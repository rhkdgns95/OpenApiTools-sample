/*
 * 뱅크다K 웹앱 REST API
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdjustJangbuService;
import org.openapitools.client.model.AppVersion;
import java.math.BigDecimal;
import org.openapitools.client.model.ChargeJangbu;
import org.openapitools.client.model.ChargeJangbuPartnership;
import org.openapitools.client.model.CreateRoleGroupInput;
import org.openapitools.client.model.ExceptionResponse;
import org.openapitools.client.model.FindMemberInput;
import org.openapitools.client.model.FindMemberOutput;
import org.openapitools.client.model.GetAppVersionsOutput;
import org.openapitools.client.model.GetCertOutput;
import org.openapitools.client.model.GetChargeJangbuPreviewOutput;
import org.openapitools.client.model.GetErrorsResponse;
import org.openapitools.client.model.GetJangbuMessagesOutput;
import org.openapitools.client.model.GetJangbusOutput;
import org.openapitools.client.model.GetMembersOutput;
import org.openapitools.client.model.GetNotices;
import org.openapitools.client.model.GetScrapingCodesOutput;
import org.openapitools.client.model.GetServicesOutput;
import org.openapitools.client.model.GetWorkS3DataResponse;
import org.openapitools.client.model.GetWorkS3DetailLogResponse;
import org.openapitools.client.model.GetWorksOutput;
import org.openapitools.client.model.Jangbu;
import org.openapitools.client.model.LoginInput;
import org.openapitools.client.model.LoginOutput;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Notice;
import org.openapitools.client.model.OsType;
import org.openapitools.client.model.PcClientError;
import org.openapitools.client.model.ProcessFlag;
import org.openapitools.client.model.Recovery;
import org.openapitools.client.model.RefreshInput;
import org.openapitools.client.model.RefreshOutput;
import org.openapitools.client.model.RegisterAdjustOutput;
import org.openapitools.client.model.RegisterAppVersionInput;
import org.openapitools.client.model.RegisterCustomerInput;
import org.openapitools.client.model.RegisterJangbuInput;
import org.openapitools.client.model.RegisterMemberInput;
import org.openapitools.client.model.RegisterNoticeInput;
import org.openapitools.client.model.RegisterScrapingCodeVersionInput;
import org.openapitools.client.model.RegisterServiceInput;
import org.openapitools.client.model.ResetPasswordInput;
import org.openapitools.client.model.ResetPasswordOutput;
import org.openapitools.client.model.RoleGroup;
import org.openapitools.client.model.ScrapingCode;
import org.openapitools.client.model.SearchAdjustJangbuServicesOutput;
import org.openapitools.client.model.SearchChargeJangbuUserServicesOutput;
import org.openapitools.client.model.SearchChargeJangbusOutput;
import org.openapitools.client.model.SearchRoleGroupOutput;
import org.openapitools.client.model.SendChagreJangbuMailTestInput;
import org.openapitools.client.model.SendChargeJangbuMailTestOutput;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.UpdateAdjustJangbuServiceInput;
import org.openapitools.client.model.UpdateAppVersionInput;
import org.openapitools.client.model.UpdateChargeJangbuPaidInput;
import org.openapitools.client.model.UpdateChargeJangbuPartnershipInput;
import org.openapitools.client.model.UpdateChargeJangbuStatusInput;
import org.openapitools.client.model.UpdateJangbuInput;
import org.openapitools.client.model.UpdateMemberInput;
import org.openapitools.client.model.UpdateRoleGroupInput;
import org.openapitools.client.model.UpdateServiceInput;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Work;
import org.openapitools.client.model.WorkRequestType;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * (해당연월) 장부사의 파트너쉽 금액 조회
     *
     * (해당연월) 장부사의 파트너쉽 금액을 조회한다.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerGetChargeJangbuPartnershipTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        ChargeJangbuPartnership response = api.adjustControllerGetChargeJangbuPartnership(jangbuId, yearMonth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 해당연월의 장부사 정산내역 결과 미리보기
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerGetChargeJangbuPreviewTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        GetChargeJangbuPreviewOutput response = api.adjustControllerGetChargeJangbuPreview(jangbuId, yearMonth);

        // TODO: test validations
    }
    
    /**
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     *
     * 정산을 등록한다 (1,2 단계 순차적으로 진행)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerRegisterAdjustTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        BigDecimal step = null;
        RegisterAdjustOutput response = api.adjustControllerRegisterAdjust(jangbuId, yearMonth, step);

        // TODO: test validations
    }
    
    /**
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     *
     * 특정 장부사의 특정연월에 해당하는 서비스별 단가를 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerSearchAdjustJangbuServicesTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        SearchAdjustJangbuServicesOutput response = api.adjustControllerSearchAdjustJangbuServices(jangbuId, yearMonth, page, limit, route);

        // TODO: test validations
    }
    
    /**
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     *
     * (특정 장부사의) 특정 정산목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerSearchChargeJangbuFromJangbuTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        BigDecimal yearMonth = null;
        SearchChargeJangbusOutput response = api.adjustControllerSearchChargeJangbuFromJangbu(jangbuId, page, limit, route, yearMonth);

        // TODO: test validations
    }
    
    /**
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     *
     * 장부사 특정 서비스 회원별 요금목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerSearchChargeJangbuUserServicesTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        BigDecimal serviceId = null;
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        SearchChargeJangbuUserServicesOutput response = api.adjustControllerSearchChargeJangbuUserServices(jangbuId, yearMonth, serviceId, page, limit, route);

        // TODO: test validations
    }
    
    /**
     * 정산내역 목록 검색 (관리자 전용)
     *
     * 정산내역 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerSearchChargeJangbusTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        SearchChargeJangbusOutput response = api.adjustControllerSearchChargeJangbus(page, limit, route, jangbuId, yearMonth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 해당연월의 정산내역 결과 테스트 메일 전송
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerSendChargeJangbuMailTestTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        SendChagreJangbuMailTestInput sendChagreJangbuMailTestInput = null;
        SendChargeJangbuMailTestOutput response = api.adjustControllerSendChargeJangbuMailTest(jangbuId, yearMonth, sendChagreJangbuMailTestInput);

        // TODO: test validations
    }
    
    /**
     * (해당연월) 장부사 특정 서비스 단가를 수정
     *
     * (해당연월) 장부사 특정 서비스 단가를 수정한다.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerUpdateAdjustJangbuServiceTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        BigDecimal serviceId = null;
        UpdateAdjustJangbuServiceInput updateAdjustJangbuServiceInput = null;
        AdjustJangbuService response = api.adjustControllerUpdateAdjustJangbuService(jangbuId, yearMonth, serviceId, updateAdjustJangbuServiceInput);

        // TODO: test validations
    }
    
    /**
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     *
     * 정산내역의 수납여부를 업데이트 한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerUpdateChargeJangbuPaidTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        UpdateChargeJangbuPaidInput updateChargeJangbuPaidInput = null;
        ChargeJangbu response = api.adjustControllerUpdateChargeJangbuPaid(jangbuId, yearMonth, updateChargeJangbuPaidInput);

        // TODO: test validations
    }
    
    /**
     * (해당연월) 장부사의 파트너쉽 금액 수정
     *
     * (해당연월) 장부사의 파트너쉽 금액을 수정한다.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerUpdateChargeJangbuPartnershipTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        UpdateChargeJangbuPartnershipInput updateChargeJangbuPartnershipInput = null;
        ChargeJangbuPartnership response = api.adjustControllerUpdateChargeJangbuPartnership(jangbuId, yearMonth, updateChargeJangbuPartnershipInput);

        // TODO: test validations
    }
    
    /**
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     *
     * 정산내역의 비공개 → 공개 상태값을 업데이트 및 정산내역의 메일을 발송한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adjustControllerUpdateChargeJangbuStatusTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal yearMonth = null;
        UpdateChargeJangbuStatusInput updateChargeJangbuStatusInput = null;
        ChargeJangbu response = api.adjustControllerUpdateChargeJangbuStatus(jangbuId, yearMonth, updateChargeJangbuStatusInput);

        // TODO: test validations
    }
    
    /**
     * 로그아웃 (토큰삭제)
     *
     * 토큰을 삭제한다 (로그아웃시)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authControllerDeleteTokenTest() throws ApiException {
        String refreshToken = null;
        api.authControllerDeleteToken(refreshToken);

        // TODO: test validations
    }
    
    /**
     * 토큰발급
     *
     * 새로운 토큰을 발급한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authControllerLoginTest() throws ApiException {
        LoginInput loginInput = null;
        LoginOutput response = api.authControllerLogin(loginInput);

        // TODO: test validations
    }
    
    /**
     * 토큰갱신
     *
     * 토큰을 갱신한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authControllerRefreshTest() throws ApiException {
        RefreshInput refreshInput = null;
        RefreshOutput response = api.authControllerRefresh(refreshInput);

        // TODO: test validations
    }
    
    /**
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     *
     * 특정 인증서를 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void errorControllerGetCertTest() throws ApiException {
        BigDecimal errorId = null;
        BigDecimal connectId = null;
        String path = null;
        GetCertOutput response = api.errorControllerGetCert(errorId, connectId, path);

        // TODO: test validations
    }
    
    /**
     * 에러 조회 (관리자 전용)
     *
     * 특정 에러를 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void errorControllerGetErrorTest() throws ApiException {
        BigDecimal errorId = null;
        PcClientError response = api.errorControllerGetError(errorId);

        // TODO: test validations
    }
    
    /**
     * 에러 목록 검색 (관리자 전용)
     *
     * 에러 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void errorControllerGetErrorsTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String startAt = null;
        String endAt = null;
        String route = null;
        String appVersion = null;
        String appName = null;
        String jangbuName = null;
        BigDecimal userId = null;
        GetErrorsResponse response = api.errorControllerGetErrors(page, limit, startAt, endAt, route, appVersion, appName, jangbuName, userId);

        // TODO: test validations
    }
    
    /**
     * 장부사 조회 (관리자 전용)
     *
     * 특정 장부사를 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jangbuControllerGetJangbuTest() throws ApiException {
        BigDecimal jangbuId = null;
        Jangbu response = api.jangbuControllerGetJangbu(jangbuId);

        // TODO: test validations
    }
    
    /**
     * 장부사 목록 검색 (관리자 전용)
     *
     * 장부사 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jangbuControllerGetJangbusTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        List<BigDecimal> serviceIds = null;
        String jangbuName = null;
        String repId = null;
        GetJangbusOutput response = api.jangbuControllerGetJangbus(page, limit, route, serviceIds, jangbuName, repId);

        // TODO: test validations
    }
    
    /**
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     *
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jangbuControllerGetJangbusWithChargeJangbuPartnershipTest() throws ApiException {
        BigDecimal yearMonth = null;
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        List<BigDecimal> serviceIds = null;
        String jangbuName = null;
        String repId = null;
        GetJangbusOutput response = api.jangbuControllerGetJangbusWithChargeJangbuPartnership(yearMonth, page, limit, route, serviceIds, jangbuName, repId);

        // TODO: test validations
    }
    
    /**
     * 장부사 등록 (관리자 전용)
     *
     * 장부사를 등록한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jangbuControllerRegisterJangbuTest() throws ApiException {
        RegisterJangbuInput registerJangbuInput = null;
        Jangbu response = api.jangbuControllerRegisterJangbu(registerJangbuInput);

        // TODO: test validations
    }
    
    /**
     * 장부사 수정 (관리자 전용)
     *
     * 특정 장부사를 수정한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jangbuControllerUpdateJangbuTest() throws ApiException {
        BigDecimal jangbuId = null;
        UpdateJangbuInput updateJangbuInput = null;
        Jangbu response = api.jangbuControllerUpdateJangbu(jangbuId, updateJangbuInput);

        // TODO: test validations
    }
    
    /**
     * 아이디 찾기 또는 패스워드 찾기
     *
     * (로그인 계정의) 아이디 또는 패스워드를 찾는다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerFindMemberTest() throws ApiException {
        FindMemberInput findMemberInput = null;
        FindMemberOutput response = api.memberControllerFindMember(findMemberInput);

        // TODO: test validations
    }
    
    /**
     * 회원 조회
     *
     * 특정 회원을 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerGetMemberTest() throws ApiException {
        BigDecimal userId = null;
        User response = api.memberControllerGetMember(userId);

        // TODO: test validations
    }
    
    /**
     * 회원 목록 검색
     *
     * 회원 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerGetMembersTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        BigDecimal jangbuId = null;
        BigDecimal serviceId = null;
        String active = null;
        String userName = null;
        String ceoName = null;
        BigDecimal userLevel = null;
        GetMembersOutput response = api.memberControllerGetMembers(page, limit, route, jangbuId, serviceId, active, userName, ceoName, userLevel);

        // TODO: test validations
    }
    
    /**
     * 패스워드 재설정 조회
     *
     * 패스워드 재설정 정보를 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerGetResetPasswordTest() throws ApiException {
        String recoveryKey = null;
        Recovery response = api.memberControllerGetResetPassword(recoveryKey);

        // TODO: test validations
    }
    
    /**
     * (고객사) 계정 등록
     *
     * (고객사) 계정을 등록한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerRegisterCustomerTest() throws ApiException {
        RegisterCustomerInput registerCustomerInput = null;
        User response = api.memberControllerRegisterCustomer(registerCustomerInput);

        // TODO: test validations
    }
    
    /**
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     *
     * (관리자 또는 장부사) 계정을 등록한다 (관라지만 이용)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerRegisterMemberTest() throws ApiException {
        RegisterMemberInput registerMemberInput = null;
        User response = api.memberControllerRegisterMember(registerMemberInput);

        // TODO: test validations
    }
    
    /**
     * (계정찾기진행시) 패스워드 재설정 처리
     *
     * (계정찾기진행시) 패스워드 재설정 정보를 처리한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerResetPasswordTest() throws ApiException {
        String recoveryKey = null;
        ResetPasswordInput resetPasswordInput = null;
        ResetPasswordOutput response = api.memberControllerResetPassword(recoveryKey, resetPasswordInput);

        // TODO: test validations
    }
    
    /**
     * 로그인 패스워드 초기화
     *
     * 아이디+이메일 조합으로 패스워드를 초기화한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerResetPasswordWithIdEmailTest() throws ApiException {
        BigDecimal memberId = null;
        User response = api.memberControllerResetPasswordWithIdEmail(memberId);

        // TODO: test validations
    }
    
    /**
     * 계정의 권한그룹 저장
     *
     * 특정 계정의 권한그룹을 저장한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerSaveUserRoleGroupTest() throws ApiException {
        BigDecimal userId = null;
        String roleGroupCode = null;
        User response = api.memberControllerSaveUserRoleGroup(userId, roleGroupCode);

        // TODO: test validations
    }
    
    /**
     * 계정 수정
     *
     * 계정을 수정한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void memberControllerUpdateMemberTest() throws ApiException {
        BigDecimal userId = null;
        UpdateMemberInput updateMemberInput = null;
        User response = api.memberControllerUpdateMember(userId, updateMemberInput);

        // TODO: test validations
    }
    
    /**
     * 앱 버전 목록 검색 (관리자 전용)
     *
     * 앱 버전 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mobileAppControllerGetAppVersionsTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        String active = null;
        OsType osType = null;
        GetAppVersionsOutput response = api.mobileAppControllerGetAppVersions(page, limit, route, active, osType);

        // TODO: test validations
    }
    
    /**
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     *
     * (특정 장부사의) 특정 메시지를 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mobileAppControllerGetJangbuMessageTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal messageId = null;
        Message response = api.mobileAppControllerGetJangbuMessage(jangbuId, messageId);

        // TODO: test validations
    }
    
    /**
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     *
     * (특정 장부사의) 메시지 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mobileAppControllerGetJangbuMessagesTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal page = null;
        BigDecimal limit = null;
        BigDecimal startAt = null;
        BigDecimal endAt = null;
        String route = null;
        GetJangbuMessagesOutput response = api.mobileAppControllerGetJangbuMessages(jangbuId, page, limit, startAt, endAt, route);

        // TODO: test validations
    }
    
    /**
     * 앱 사용자 목록 검색 (관리자 전용)
     *
     * 앱 사용자 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mobileAppControllerGetUsingAppUsersTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        String active = null;
        OsType osType = null;
        Object response = api.mobileAppControllerGetUsingAppUsers(page, limit, route, active, osType);

        // TODO: test validations
    }
    
    /**
     * 앱 버전 등록 (관리자 전용)
     *
     * 앱 버전을 등록한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mobileAppControllerRegisterAppVersionTest() throws ApiException {
        RegisterAppVersionInput registerAppVersionInput = null;
        AppVersion response = api.mobileAppControllerRegisterAppVersion(registerAppVersionInput);

        // TODO: test validations
    }
    
    /**
     * 앱 버전 수정 (관리자 전용)
     *
     * 앱 버전을 수정한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mobileAppControllerUpdateAppVersionTest() throws ApiException {
        BigDecimal versionId = null;
        UpdateAppVersionInput updateAppVersionInput = null;
        AppVersion response = api.mobileAppControllerUpdateAppVersion(versionId, updateAppVersionInput);

        // TODO: test validations
    }
    
    /**
     * 공지사항 삭제 (관리자 전용)
     *
     * 공지사항을 삭제한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void noticeControllerDeleteNoticeTest() throws ApiException {
        BigDecimal noticeId = null;
        Notice response = api.noticeControllerDeleteNotice(noticeId);

        // TODO: test validations
    }
    
    /**
     * 공지사항 조회 (관리자, 장부사 전용)
     *
     * 특정 공지사항을 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void noticeControllerGetNoticeTest() throws ApiException {
        BigDecimal noticeId = null;
        Notice response = api.noticeControllerGetNotice(noticeId);

        // TODO: test validations
    }
    
    /**
     * 공지사항 검색 (관리자, 장부사 전용)
     *
     * 공지사항 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void noticeControllerGetNoticesTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        GetNotices response = api.noticeControllerGetNotices(page, limit, route);

        // TODO: test validations
    }
    
    /**
     * 공지사항 등록 (관리자 전용)
     *
     * 공지사항을 등록한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void noticeControllerRegisterNoticeTest() throws ApiException {
        RegisterNoticeInput registerNoticeInput = null;
        Notice response = api.noticeControllerRegisterNotice(registerNoticeInput);

        // TODO: test validations
    }
    
    /**
     * 공지사항 수정 (관리자 전용)
     *
     * 공지사항을 수정한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void noticeControllerUpdateNoticeTest() throws ApiException {
        BigDecimal noticeId = null;
        RegisterNoticeInput registerNoticeInput = null;
        Notice response = api.noticeControllerUpdateNotice(noticeId, registerNoticeInput);

        // TODO: test validations
    }
    
    /**
     * 권한 목록 검색 (관리자, 장부사 전용)
     *
     * 권한 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void roleControllerGetRolesTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        BigDecimal userLevel = null;
        String active = null;
        SearchRoleGroupOutput response = api.roleControllerGetRoles(page, limit, route, userLevel, active);

        // TODO: test validations
    }
    
    /**
     * 권한 등록 (관리자 전용)
     *
     * 권한을 등록한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void roleControllerRegisterRoleTest() throws ApiException {
        CreateRoleGroupInput createRoleGroupInput = null;
        RoleGroup response = api.roleControllerRegisterRole(createRoleGroupInput);

        // TODO: test validations
    }
    
    /**
     * 권한 수정 (관리자 전용)
     *
     * 권한을 수정한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void roleControllerUpdateRoleTest() throws ApiException {
        String roleGroupCode = null;
        UpdateRoleGroupInput updateRoleGroupInput = null;
        RoleGroup response = api.roleControllerUpdateRole(roleGroupCode, updateRoleGroupInput);

        // TODO: test validations
    }
    
    /**
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     *
     * 특정 버전 코드를 활성/비활성화 한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scrapingCodeControllerActivateScrapingCodeTest() throws ApiException {
        BigDecimal serviceId = null;
        String version = null;
        ScrapingCode response = api.scrapingCodeControllerActivateScrapingCode(serviceId, version);

        // TODO: test validations
    }
    
    /**
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     *
     * 스크래핑 코드목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scrapingCodeControllerGetScrapingCodesTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        BigDecimal serviceId = null;
        String active = null;
        GetScrapingCodesOutput response = api.scrapingCodeControllerGetScrapingCodes(page, limit, route, serviceId, active);

        // TODO: test validations
    }
    
    /**
     * 스크래핑 코드 버전 등록 (Github Action &gt;&gt; Amazon SNS)
     *
     * 스크래핑 코드버전을 등록한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scrapingCodeControllerRegisterScrapingCodeVersionTest() throws ApiException {
        RegisterScrapingCodeVersionInput registerScrapingCodeVersionInput = null;
        ScrapingCode response = api.scrapingCodeControllerRegisterScrapingCodeVersion(registerScrapingCodeVersionInput);

        // TODO: test validations
    }
    
    /**
     * 서비스 조회 (관리자전용)
     *
     * 특정 서비스를 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceTest() throws ApiException {
        BigDecimal serviceId = null;
        Service response = api.serviceControllerGetService(serviceId);

        // TODO: test validations
    }
    
    /**
     * 서비스 목록 검색
     *
     * 서비스 목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServicesTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        String route = null;
        String category = null;
        BigDecimal jangbuId = null;
        GetServicesOutput response = api.serviceControllerGetServices(page, limit, route, category, jangbuId);

        // TODO: test validations
    }
    
    /**
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     *
     * 서비스를 새로 등록한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerRegisterServiceTest() throws ApiException {
        RegisterServiceInput registerServiceInput = null;
        Service response = api.serviceControllerRegisterService(registerServiceInput);

        // TODO: test validations
    }
    
    /**
     * 서비스 수정 (관리자전용: 일부사용자)
     *
     * 서비스를 수정한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerUpdateServiceTest() throws ApiException {
        BigDecimal serviceId = null;
        UpdateServiceInput updateServiceInput = null;
        Service response = api.serviceControllerUpdateService(serviceId, updateServiceInput);

        // TODO: test validations
    }
    
    /**
     * 업무 조회
     *
     * 특정 업무를 조회한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workControllerGetWorkTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal userId = null;
        BigDecimal workId = null;
        Work response = api.workControllerGetWork(jangbuId, userId, workId);

        // TODO: test validations
    }
    
    /**
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     *
     * (관리자전용) 특정 업무의 S3정보를 조회한다.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workControllerGetWorkS3DataTest() throws ApiException {
        String path = null;
        GetWorkS3DataResponse response = api.workControllerGetWorkS3Data(path);

        // TODO: test validations
    }
    
    /**
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     *
     * 특정 업무의 S3정보(업로드 로그)를 조회한다.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workControllerGetWorkS3DetailLogTest() throws ApiException {
        BigDecimal workId = null;
        GetWorkS3DetailLogResponse response = api.workControllerGetWorkS3DetailLog(workId);

        // TODO: test validations
    }
    
    /**
     * 업무 목록 검색 (관리자 전용)
     *
     * 업무목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workControllerGetWorksTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal limit = null;
        BigDecimal startAt = null;
        BigDecimal endAt = null;
        String route = null;
        BigDecimal serviceId = null;
        ProcessFlag status = null;
        WorkRequestType type = null;
        String loginId = null;
        String userName = null;
        String jangbuName = null;
        String memo = null;
        BigDecimal count = null;
        GetWorksOutput response = api.workControllerGetWorks(page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, jangbuName, memo, count);

        // TODO: test validations
    }
    
    /**
     * 장부사별 업무 목록 검색 (장부사 전용)
     *
     * 장부사별 업무목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workControllerGetWorksByJangbuTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal page = null;
        BigDecimal limit = null;
        BigDecimal startAt = null;
        BigDecimal endAt = null;
        String route = null;
        BigDecimal serviceId = null;
        ProcessFlag status = null;
        WorkRequestType type = null;
        String loginId = null;
        String userName = null;
        String memo = null;
        BigDecimal count = null;
        GetWorksOutput response = api.workControllerGetWorksByJangbu(jangbuId, page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, memo, count);

        // TODO: test validations
    }
    
    /**
     * 사용자별 업무 목록 검색 (고객 전용)
     *
     * 사용자별 업무목록을 검색한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workControllerGetWorksByUserTest() throws ApiException {
        BigDecimal userId = null;
        BigDecimal jangbuId = null;
        BigDecimal page = null;
        BigDecimal limit = null;
        BigDecimal startAt = null;
        BigDecimal endAt = null;
        String route = null;
        ProcessFlag status = null;
        String memo = null;
        BigDecimal count = null;
        GetWorksOutput response = api.workControllerGetWorksByUser(userId, jangbuId, page, limit, startAt, endAt, route, status, memo, count);

        // TODO: test validations
    }
    
    /**
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     *
     * (접수 또는 승인건만) 업무를 수정한다
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workControllerUpdateWorkTest() throws ApiException {
        BigDecimal jangbuId = null;
        BigDecimal userId = null;
        BigDecimal workId = null;
        Work response = api.workControllerUpdateWork(jangbuId, userId, workId);

        // TODO: test validations
    }
    
}
