/*
 * 뱅크다K 웹앱 REST API
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdjustJangbuService;
import org.openapitools.client.model.AppVersion;
import java.math.BigDecimal;
import org.openapitools.client.model.ChargeJangbu;
import org.openapitools.client.model.ChargeJangbuPartnership;
import org.openapitools.client.model.CreateRoleGroupInput;
import org.openapitools.client.model.ExceptionResponse;
import org.openapitools.client.model.FindMemberInput;
import org.openapitools.client.model.FindMemberOutput;
import org.openapitools.client.model.GetAppVersionsOutput;
import org.openapitools.client.model.GetCertOutput;
import org.openapitools.client.model.GetChargeJangbuPreviewOutput;
import org.openapitools.client.model.GetErrorsResponse;
import org.openapitools.client.model.GetJangbuMessagesOutput;
import org.openapitools.client.model.GetJangbusOutput;
import org.openapitools.client.model.GetMembersOutput;
import org.openapitools.client.model.GetNotices;
import org.openapitools.client.model.GetScrapingCodesOutput;
import org.openapitools.client.model.GetServicesOutput;
import org.openapitools.client.model.GetWorkS3DataResponse;
import org.openapitools.client.model.GetWorkS3DetailLogResponse;
import org.openapitools.client.model.GetWorksOutput;
import org.openapitools.client.model.Jangbu;
import org.openapitools.client.model.LoginInput;
import org.openapitools.client.model.LoginOutput;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Notice;
import org.openapitools.client.model.OsType;
import org.openapitools.client.model.PcClientError;
import org.openapitools.client.model.ProcessFlag;
import org.openapitools.client.model.Recovery;
import org.openapitools.client.model.RefreshInput;
import org.openapitools.client.model.RefreshOutput;
import org.openapitools.client.model.RegisterAdjustOutput;
import org.openapitools.client.model.RegisterAppVersionInput;
import org.openapitools.client.model.RegisterCustomerInput;
import org.openapitools.client.model.RegisterJangbuInput;
import org.openapitools.client.model.RegisterMemberInput;
import org.openapitools.client.model.RegisterNoticeInput;
import org.openapitools.client.model.RegisterScrapingCodeVersionInput;
import org.openapitools.client.model.RegisterServiceInput;
import org.openapitools.client.model.ResetPasswordInput;
import org.openapitools.client.model.ResetPasswordOutput;
import org.openapitools.client.model.RoleGroup;
import org.openapitools.client.model.ScrapingCode;
import org.openapitools.client.model.SearchAdjustJangbuServicesOutput;
import org.openapitools.client.model.SearchChargeJangbuUserServicesOutput;
import org.openapitools.client.model.SearchChargeJangbusOutput;
import org.openapitools.client.model.SearchRoleGroupOutput;
import org.openapitools.client.model.SendChagreJangbuMailTestInput;
import org.openapitools.client.model.SendChargeJangbuMailTestOutput;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.UpdateAdjustJangbuServiceInput;
import org.openapitools.client.model.UpdateAppVersionInput;
import org.openapitools.client.model.UpdateChargeJangbuPaidInput;
import org.openapitools.client.model.UpdateChargeJangbuPartnershipInput;
import org.openapitools.client.model.UpdateChargeJangbuStatusInput;
import org.openapitools.client.model.UpdateJangbuInput;
import org.openapitools.client.model.UpdateMemberInput;
import org.openapitools.client.model.UpdateRoleGroupInput;
import org.openapitools.client.model.UpdateServiceInput;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Work;
import org.openapitools.client.model.WorkRequestType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for adjustControllerGetChargeJangbuPartnership
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (해당연월) 장부사의 파트너쉽 금액정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 파트너쉽 금액정보가 없는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerGetChargeJangbuPartnershipCall(BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/partnership"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerGetChargeJangbuPartnershipValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerGetChargeJangbuPartnership(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerGetChargeJangbuPartnership(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerGetChargeJangbuPartnershipCall(jangbuId, yearMonth, _callback);
        return localVarCall;

    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액 조회
     * (해당연월) 장부사의 파트너쉽 금액을 조회한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @return ChargeJangbuPartnership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (해당연월) 장부사의 파트너쉽 금액정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 파트너쉽 금액정보가 없는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ChargeJangbuPartnership adjustControllerGetChargeJangbuPartnership(BigDecimal jangbuId, BigDecimal yearMonth) throws ApiException {
        ApiResponse<ChargeJangbuPartnership> localVarResp = adjustControllerGetChargeJangbuPartnershipWithHttpInfo(jangbuId, yearMonth);
        return localVarResp.getData();
    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액 조회
     * (해당연월) 장부사의 파트너쉽 금액을 조회한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @return ApiResponse&lt;ChargeJangbuPartnership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (해당연월) 장부사의 파트너쉽 금액정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 파트너쉽 금액정보가 없는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChargeJangbuPartnership> adjustControllerGetChargeJangbuPartnershipWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerGetChargeJangbuPartnershipValidateBeforeCall(jangbuId, yearMonth, null);
        Type localVarReturnType = new TypeToken<ChargeJangbuPartnership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액 조회 (asynchronously)
     * (해당연월) 장부사의 파트너쉽 금액을 조회한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (해당연월) 장부사의 파트너쉽 금액정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 파트너쉽 금액정보가 없는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerGetChargeJangbuPartnershipAsync(BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback<ChargeJangbuPartnership> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerGetChargeJangbuPartnershipValidateBeforeCall(jangbuId, yearMonth, _callback);
        Type localVarReturnType = new TypeToken<ChargeJangbuPartnership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerGetChargeJangbuPreview
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 해당연월 정산내역 미리보기 HTML내용 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 또는 장부사 회원 또는 정산내역 또는 파트너쉽 정보를 찾을 수 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerGetChargeJangbuPreviewCall(BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/preview"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerGetChargeJangbuPreviewValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerGetChargeJangbuPreview(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerGetChargeJangbuPreview(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerGetChargeJangbuPreviewCall(jangbuId, yearMonth, _callback);
        return localVarCall;

    }

    /**
     * 
     * 해당연월의 장부사 정산내역 결과 미리보기
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @return GetChargeJangbuPreviewOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 해당연월 정산내역 미리보기 HTML내용 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 또는 장부사 회원 또는 정산내역 또는 파트너쉽 정보를 찾을 수 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeJangbuPreviewOutput adjustControllerGetChargeJangbuPreview(BigDecimal jangbuId, BigDecimal yearMonth) throws ApiException {
        ApiResponse<GetChargeJangbuPreviewOutput> localVarResp = adjustControllerGetChargeJangbuPreviewWithHttpInfo(jangbuId, yearMonth);
        return localVarResp.getData();
    }

    /**
     * 
     * 해당연월의 장부사 정산내역 결과 미리보기
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @return ApiResponse&lt;GetChargeJangbuPreviewOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 해당연월 정산내역 미리보기 HTML내용 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 또는 장부사 회원 또는 정산내역 또는 파트너쉽 정보를 찾을 수 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChargeJangbuPreviewOutput> adjustControllerGetChargeJangbuPreviewWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerGetChargeJangbuPreviewValidateBeforeCall(jangbuId, yearMonth, null);
        Type localVarReturnType = new TypeToken<GetChargeJangbuPreviewOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 해당연월의 장부사 정산내역 결과 미리보기
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 해당연월 정산내역 미리보기 HTML내용 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 또는 장부사 회원 또는 정산내역 또는 파트너쉽 정보를 찾을 수 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerGetChargeJangbuPreviewAsync(BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback<GetChargeJangbuPreviewOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerGetChargeJangbuPreviewValidateBeforeCall(jangbuId, yearMonth, _callback);
        Type localVarReturnType = new TypeToken<GetChargeJangbuPreviewOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerRegisterAdjust
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param step 단계 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 삭제후 재등록된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 잘못된 정산등록 단계를 입력한 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 과금대상이 아닌경우 또는 (Step2의 경우)해당연월의 장부사 서비스별 단가목록이 존재하지 않음. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역은 재등록이 불가능 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerRegisterAdjustCall(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal step, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/step/{step}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()))
            .replaceAll("\\{" + "step" + "\\}", localVarApiClient.escapeString(step.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerRegisterAdjustValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal step, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerRegisterAdjust(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerRegisterAdjust(Async)");
        }
        
        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling adjustControllerRegisterAdjust(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerRegisterAdjustCall(jangbuId, yearMonth, step, _callback);
        return localVarCall;

    }

    /**
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     * 정산을 등록한다 (1,2 단계 순차적으로 진행)
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param step 단계 순번 (required)
     * @return RegisterAdjustOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 삭제후 재등록된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 잘못된 정산등록 단계를 입력한 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 과금대상이 아닌경우 또는 (Step2의 경우)해당연월의 장부사 서비스별 단가목록이 존재하지 않음. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역은 재등록이 불가능 </td><td>  -  </td></tr>
     </table>
     */
    public RegisterAdjustOutput adjustControllerRegisterAdjust(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal step) throws ApiException {
        ApiResponse<RegisterAdjustOutput> localVarResp = adjustControllerRegisterAdjustWithHttpInfo(jangbuId, yearMonth, step);
        return localVarResp.getData();
    }

    /**
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     * 정산을 등록한다 (1,2 단계 순차적으로 진행)
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param step 단계 순번 (required)
     * @return ApiResponse&lt;RegisterAdjustOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 삭제후 재등록된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 잘못된 정산등록 단계를 입력한 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 과금대상이 아닌경우 또는 (Step2의 경우)해당연월의 장부사 서비스별 단가목록이 존재하지 않음. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역은 재등록이 불가능 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterAdjustOutput> adjustControllerRegisterAdjustWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal step) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerRegisterAdjustValidateBeforeCall(jangbuId, yearMonth, step, null);
        Type localVarReturnType = new TypeToken<RegisterAdjustOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 정산 등록 (관리자 전용: 극히 일부사용자만) (asynchronously)
     * 정산을 등록한다 (1,2 단계 순차적으로 진행)
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param step 단계 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 삭제후 재등록된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 잘못된 정산등록 단계를 입력한 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 과금대상이 아닌경우 또는 (Step2의 경우)해당연월의 장부사 서비스별 단가목록이 존재하지 않음. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역은 재등록이 불가능 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerRegisterAdjustAsync(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal step, final ApiCallback<RegisterAdjustOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerRegisterAdjustValidateBeforeCall(jangbuId, yearMonth, step, _callback);
        Type localVarReturnType = new TypeToken<RegisterAdjustOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerSearchAdjustJangbuServices
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 서비스별 단가목록 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않은 정산내역 혹은 (장부사만 해당함) 해당 정산내역이 미완료 상태인 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSearchAdjustJangbuServicesCall(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerSearchAdjustJangbuServicesValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerSearchAdjustJangbuServices(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerSearchAdjustJangbuServices(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling adjustControllerSearchAdjustJangbuServices(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling adjustControllerSearchAdjustJangbuServices(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerSearchAdjustJangbuServicesCall(jangbuId, yearMonth, page, limit, route, _callback);
        return localVarCall;

    }

    /**
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     * 특정 장부사의 특정연월에 해당하는 서비스별 단가를 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @return SearchAdjustJangbuServicesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 서비스별 단가목록 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않은 정산내역 혹은 (장부사만 해당함) 해당 정산내역이 미완료 상태인 경우 </td><td>  -  </td></tr>
     </table>
     */
    public SearchAdjustJangbuServicesOutput adjustControllerSearchAdjustJangbuServices(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route) throws ApiException {
        ApiResponse<SearchAdjustJangbuServicesOutput> localVarResp = adjustControllerSearchAdjustJangbuServicesWithHttpInfo(jangbuId, yearMonth, page, limit, route);
        return localVarResp.getData();
    }

    /**
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     * 특정 장부사의 특정연월에 해당하는 서비스별 단가를 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @return ApiResponse&lt;SearchAdjustJangbuServicesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 서비스별 단가목록 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않은 정산내역 혹은 (장부사만 해당함) 해당 정산내역이 미완료 상태인 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAdjustJangbuServicesOutput> adjustControllerSearchAdjustJangbuServicesWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerSearchAdjustJangbuServicesValidateBeforeCall(jangbuId, yearMonth, page, limit, route, null);
        Type localVarReturnType = new TypeToken<SearchAdjustJangbuServicesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용) (asynchronously)
     * 특정 장부사의 특정연월에 해당하는 서비스별 단가를 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 서비스별 단가목록 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않은 정산내역 혹은 (장부사만 해당함) 해당 정산내역이 미완료 상태인 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSearchAdjustJangbuServicesAsync(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route, final ApiCallback<SearchAdjustJangbuServicesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerSearchAdjustJangbuServicesValidateBeforeCall(jangbuId, yearMonth, page, limit, route, _callback);
        Type localVarReturnType = new TypeToken<SearchAdjustJangbuServicesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerSearchChargeJangbuFromJangbu
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param yearMonth 정산연월 (YYYYMM) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사별 정산내역 목록 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSearchChargeJangbuFromJangbuCall(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, String route, BigDecimal yearMonth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (yearMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("yearMonth", yearMonth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerSearchChargeJangbuFromJangbuValidateBeforeCall(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, String route, BigDecimal yearMonth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerSearchChargeJangbuFromJangbu(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling adjustControllerSearchChargeJangbuFromJangbu(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling adjustControllerSearchChargeJangbuFromJangbu(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbuFromJangbuCall(jangbuId, page, limit, route, yearMonth, _callback);
        return localVarCall;

    }

    /**
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     * (특정 장부사의) 특정 정산목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param yearMonth 정산연월 (YYYYMM) (optional)
     * @return SearchChargeJangbusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사별 정산내역 목록 반환 </td><td>  -  </td></tr>
     </table>
     */
    public SearchChargeJangbusOutput adjustControllerSearchChargeJangbuFromJangbu(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, String route, BigDecimal yearMonth) throws ApiException {
        ApiResponse<SearchChargeJangbusOutput> localVarResp = adjustControllerSearchChargeJangbuFromJangbuWithHttpInfo(jangbuId, page, limit, route, yearMonth);
        return localVarResp.getData();
    }

    /**
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     * (특정 장부사의) 특정 정산목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param yearMonth 정산연월 (YYYYMM) (optional)
     * @return ApiResponse&lt;SearchChargeJangbusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사별 정산내역 목록 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchChargeJangbusOutput> adjustControllerSearchChargeJangbuFromJangbuWithHttpInfo(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, String route, BigDecimal yearMonth) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbuFromJangbuValidateBeforeCall(jangbuId, page, limit, route, yearMonth, null);
        Type localVarReturnType = new TypeToken<SearchChargeJangbusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (특정 장부사의) 정산목록 검색 (장부사 전용) (asynchronously)
     * (특정 장부사의) 특정 정산목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param yearMonth 정산연월 (YYYYMM) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사별 정산내역 목록 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSearchChargeJangbuFromJangbuAsync(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, String route, BigDecimal yearMonth, final ApiCallback<SearchChargeJangbusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbuFromJangbuValidateBeforeCall(jangbuId, page, limit, route, yearMonth, _callback);
        Type localVarReturnType = new TypeToken<SearchChargeJangbusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerSearchChargeJangbuUserServices
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param serviceId 서비스 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 서비스 회원별 요금목록 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않은 정산내역 혹은 (장부사만 해당함) 해당 정산내역이 미완료 상태인 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSearchChargeJangbuUserServicesCall(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, BigDecimal page, BigDecimal limit, String route, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/service/{serviceId}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()))
            .replaceAll("\\{" + "serviceId" + "\\}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerSearchChargeJangbuUserServicesValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, BigDecimal page, BigDecimal limit, String route, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerSearchChargeJangbuUserServices(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerSearchChargeJangbuUserServices(Async)");
        }
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling adjustControllerSearchChargeJangbuUserServices(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling adjustControllerSearchChargeJangbuUserServices(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling adjustControllerSearchChargeJangbuUserServices(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbuUserServicesCall(jangbuId, yearMonth, serviceId, page, limit, route, _callback);
        return localVarCall;

    }

    /**
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     * 장부사 특정 서비스 회원별 요금목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param serviceId 서비스 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @return SearchChargeJangbuUserServicesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 서비스 회원별 요금목록 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않은 정산내역 혹은 (장부사만 해당함) 해당 정산내역이 미완료 상태인 경우 </td><td>  -  </td></tr>
     </table>
     */
    public SearchChargeJangbuUserServicesOutput adjustControllerSearchChargeJangbuUserServices(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, BigDecimal page, BigDecimal limit, String route) throws ApiException {
        ApiResponse<SearchChargeJangbuUserServicesOutput> localVarResp = adjustControllerSearchChargeJangbuUserServicesWithHttpInfo(jangbuId, yearMonth, serviceId, page, limit, route);
        return localVarResp.getData();
    }

    /**
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     * 장부사 특정 서비스 회원별 요금목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param serviceId 서비스 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @return ApiResponse&lt;SearchChargeJangbuUserServicesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 서비스 회원별 요금목록 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않은 정산내역 혹은 (장부사만 해당함) 해당 정산내역이 미완료 상태인 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchChargeJangbuUserServicesOutput> adjustControllerSearchChargeJangbuUserServicesWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, BigDecimal page, BigDecimal limit, String route) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbuUserServicesValidateBeforeCall(jangbuId, yearMonth, serviceId, page, limit, route, null);
        Type localVarReturnType = new TypeToken<SearchChargeJangbuUserServicesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용) (asynchronously)
     * 장부사 특정 서비스 회원별 요금목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param serviceId 서비스 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 서비스 회원별 요금목록 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않은 정산내역 혹은 (장부사만 해당함) 해당 정산내역이 미완료 상태인 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSearchChargeJangbuUserServicesAsync(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, BigDecimal page, BigDecimal limit, String route, final ApiCallback<SearchChargeJangbuUserServicesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbuUserServicesValidateBeforeCall(jangbuId, yearMonth, serviceId, page, limit, route, _callback);
        Type localVarReturnType = new TypeToken<SearchChargeJangbuUserServicesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerSearchChargeJangbus
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param jangbuId 장부사 순번 (optional)
     * @param yearMonth 정산연월 (YYYYMM) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 전체 장부사 정산내역 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSearchChargeJangbusCall(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/adjust";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (jangbuId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jangbuId", jangbuId));
        }

        if (yearMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("yearMonth", yearMonth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerSearchChargeJangbusValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling adjustControllerSearchChargeJangbus(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling adjustControllerSearchChargeJangbus(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbusCall(page, limit, route, jangbuId, yearMonth, _callback);
        return localVarCall;

    }

    /**
     * 정산내역 목록 검색 (관리자 전용)
     * 정산내역 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param jangbuId 장부사 순번 (optional)
     * @param yearMonth 정산연월 (YYYYMM) (optional)
     * @return SearchChargeJangbusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 전체 장부사 정산내역 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public SearchChargeJangbusOutput adjustControllerSearchChargeJangbus(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal yearMonth) throws ApiException {
        ApiResponse<SearchChargeJangbusOutput> localVarResp = adjustControllerSearchChargeJangbusWithHttpInfo(page, limit, route, jangbuId, yearMonth);
        return localVarResp.getData();
    }

    /**
     * 정산내역 목록 검색 (관리자 전용)
     * 정산내역 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param jangbuId 장부사 순번 (optional)
     * @param yearMonth 정산연월 (YYYYMM) (optional)
     * @return ApiResponse&lt;SearchChargeJangbusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 전체 장부사 정산내역 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchChargeJangbusOutput> adjustControllerSearchChargeJangbusWithHttpInfo(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal yearMonth) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbusValidateBeforeCall(page, limit, route, jangbuId, yearMonth, null);
        Type localVarReturnType = new TypeToken<SearchChargeJangbusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 정산내역 목록 검색 (관리자 전용) (asynchronously)
     * 정산내역 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param jangbuId 장부사 순번 (optional)
     * @param yearMonth 정산연월 (YYYYMM) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 전체 장부사 정산내역 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSearchChargeJangbusAsync(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal yearMonth, final ApiCallback<SearchChargeJangbusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerSearchChargeJangbusValidateBeforeCall(page, limit, route, jangbuId, yearMonth, _callback);
        Type localVarReturnType = new TypeToken<SearchChargeJangbusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerSendChargeJangbuMailTest
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param sendChagreJangbuMailTestInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 해당연월의 정산내역 결과 테스트 메일을 전송한다 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 또는 장부사 회원 또는 정산내역 또는 파트너쉽 정보를 찾을 수 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSendChargeJangbuMailTestCall(BigDecimal jangbuId, BigDecimal yearMonth, SendChagreJangbuMailTestInput sendChagreJangbuMailTestInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendChagreJangbuMailTestInput;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/testmail"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerSendChargeJangbuMailTestValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, SendChagreJangbuMailTestInput sendChagreJangbuMailTestInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerSendChargeJangbuMailTest(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerSendChargeJangbuMailTest(Async)");
        }
        
        // verify the required parameter 'sendChagreJangbuMailTestInput' is set
        if (sendChagreJangbuMailTestInput == null) {
            throw new ApiException("Missing the required parameter 'sendChagreJangbuMailTestInput' when calling adjustControllerSendChargeJangbuMailTest(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerSendChargeJangbuMailTestCall(jangbuId, yearMonth, sendChagreJangbuMailTestInput, _callback);
        return localVarCall;

    }

    /**
     * 
     * 해당연월의 정산내역 결과 테스트 메일 전송
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param sendChagreJangbuMailTestInput  (required)
     * @return SendChargeJangbuMailTestOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 해당연월의 정산내역 결과 테스트 메일을 전송한다 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 또는 장부사 회원 또는 정산내역 또는 파트너쉽 정보를 찾을 수 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public SendChargeJangbuMailTestOutput adjustControllerSendChargeJangbuMailTest(BigDecimal jangbuId, BigDecimal yearMonth, SendChagreJangbuMailTestInput sendChagreJangbuMailTestInput) throws ApiException {
        ApiResponse<SendChargeJangbuMailTestOutput> localVarResp = adjustControllerSendChargeJangbuMailTestWithHttpInfo(jangbuId, yearMonth, sendChagreJangbuMailTestInput);
        return localVarResp.getData();
    }

    /**
     * 
     * 해당연월의 정산내역 결과 테스트 메일 전송
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param sendChagreJangbuMailTestInput  (required)
     * @return ApiResponse&lt;SendChargeJangbuMailTestOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 해당연월의 정산내역 결과 테스트 메일을 전송한다 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 또는 장부사 회원 또는 정산내역 또는 파트너쉽 정보를 찾을 수 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendChargeJangbuMailTestOutput> adjustControllerSendChargeJangbuMailTestWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth, SendChagreJangbuMailTestInput sendChagreJangbuMailTestInput) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerSendChargeJangbuMailTestValidateBeforeCall(jangbuId, yearMonth, sendChagreJangbuMailTestInput, null);
        Type localVarReturnType = new TypeToken<SendChargeJangbuMailTestOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 해당연월의 정산내역 결과 테스트 메일 전송
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param sendChagreJangbuMailTestInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 해당연월의 정산내역 결과 테스트 메일을 전송한다 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 또는 장부사 회원 또는 정산내역 또는 파트너쉽 정보를 찾을 수 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerSendChargeJangbuMailTestAsync(BigDecimal jangbuId, BigDecimal yearMonth, SendChagreJangbuMailTestInput sendChagreJangbuMailTestInput, final ApiCallback<SendChargeJangbuMailTestOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerSendChargeJangbuMailTestValidateBeforeCall(jangbuId, yearMonth, sendChagreJangbuMailTestInput, _callback);
        Type localVarReturnType = new TypeToken<SendChargeJangbuMailTestOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerUpdateAdjustJangbuService
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param serviceId  (required)
     * @param updateAdjustJangbuServiceInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (수정된) 해당연월 장부사 특정 서비스 단가를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사 서비스별 단가내역이 존재하지 않는 경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerUpdateAdjustJangbuServiceCall(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, UpdateAdjustJangbuServiceInput updateAdjustJangbuServiceInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAdjustJangbuServiceInput;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/service/{serviceId}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()))
            .replaceAll("\\{" + "serviceId" + "\\}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerUpdateAdjustJangbuServiceValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, UpdateAdjustJangbuServiceInput updateAdjustJangbuServiceInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerUpdateAdjustJangbuService(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerUpdateAdjustJangbuService(Async)");
        }
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling adjustControllerUpdateAdjustJangbuService(Async)");
        }
        
        // verify the required parameter 'updateAdjustJangbuServiceInput' is set
        if (updateAdjustJangbuServiceInput == null) {
            throw new ApiException("Missing the required parameter 'updateAdjustJangbuServiceInput' when calling adjustControllerUpdateAdjustJangbuService(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerUpdateAdjustJangbuServiceCall(jangbuId, yearMonth, serviceId, updateAdjustJangbuServiceInput, _callback);
        return localVarCall;

    }

    /**
     * (해당연월) 장부사 특정 서비스 단가를 수정
     * (해당연월) 장부사 특정 서비스 단가를 수정한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param serviceId  (required)
     * @param updateAdjustJangbuServiceInput  (required)
     * @return AdjustJangbuService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (수정된) 해당연월 장부사 특정 서비스 단가를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사 서비스별 단가내역이 존재하지 않는 경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public AdjustJangbuService adjustControllerUpdateAdjustJangbuService(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, UpdateAdjustJangbuServiceInput updateAdjustJangbuServiceInput) throws ApiException {
        ApiResponse<AdjustJangbuService> localVarResp = adjustControllerUpdateAdjustJangbuServiceWithHttpInfo(jangbuId, yearMonth, serviceId, updateAdjustJangbuServiceInput);
        return localVarResp.getData();
    }

    /**
     * (해당연월) 장부사 특정 서비스 단가를 수정
     * (해당연월) 장부사 특정 서비스 단가를 수정한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param serviceId  (required)
     * @param updateAdjustJangbuServiceInput  (required)
     * @return ApiResponse&lt;AdjustJangbuService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (수정된) 해당연월 장부사 특정 서비스 단가를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사 서비스별 단가내역이 존재하지 않는 경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdjustJangbuService> adjustControllerUpdateAdjustJangbuServiceWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, UpdateAdjustJangbuServiceInput updateAdjustJangbuServiceInput) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerUpdateAdjustJangbuServiceValidateBeforeCall(jangbuId, yearMonth, serviceId, updateAdjustJangbuServiceInput, null);
        Type localVarReturnType = new TypeToken<AdjustJangbuService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (해당연월) 장부사 특정 서비스 단가를 수정 (asynchronously)
     * (해당연월) 장부사 특정 서비스 단가를 수정한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param serviceId  (required)
     * @param updateAdjustJangbuServiceInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (수정된) 해당연월 장부사 특정 서비스 단가를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사 서비스별 단가내역이 존재하지 않는 경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerUpdateAdjustJangbuServiceAsync(BigDecimal jangbuId, BigDecimal yearMonth, BigDecimal serviceId, UpdateAdjustJangbuServiceInput updateAdjustJangbuServiceInput, final ApiCallback<AdjustJangbuService> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerUpdateAdjustJangbuServiceValidateBeforeCall(jangbuId, yearMonth, serviceId, updateAdjustJangbuServiceInput, _callback);
        Type localVarReturnType = new TypeToken<AdjustJangbuService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerUpdateChargeJangbuPaid
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param updateChargeJangbuPaidInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업데이트된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 정산내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerUpdateChargeJangbuPaidCall(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPaidInput updateChargeJangbuPaidInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateChargeJangbuPaidInput;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/paid"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerUpdateChargeJangbuPaidValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPaidInput updateChargeJangbuPaidInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerUpdateChargeJangbuPaid(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerUpdateChargeJangbuPaid(Async)");
        }
        
        // verify the required parameter 'updateChargeJangbuPaidInput' is set
        if (updateChargeJangbuPaidInput == null) {
            throw new ApiException("Missing the required parameter 'updateChargeJangbuPaidInput' when calling adjustControllerUpdateChargeJangbuPaid(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuPaidCall(jangbuId, yearMonth, updateChargeJangbuPaidInput, _callback);
        return localVarCall;

    }

    /**
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     * 정산내역의 수납여부를 업데이트 한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param updateChargeJangbuPaidInput  (required)
     * @return ChargeJangbu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업데이트된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 정산내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ChargeJangbu adjustControllerUpdateChargeJangbuPaid(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPaidInput updateChargeJangbuPaidInput) throws ApiException {
        ApiResponse<ChargeJangbu> localVarResp = adjustControllerUpdateChargeJangbuPaidWithHttpInfo(jangbuId, yearMonth, updateChargeJangbuPaidInput);
        return localVarResp.getData();
    }

    /**
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     * 정산내역의 수납여부를 업데이트 한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param updateChargeJangbuPaidInput  (required)
     * @return ApiResponse&lt;ChargeJangbu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업데이트된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 정산내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChargeJangbu> adjustControllerUpdateChargeJangbuPaidWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPaidInput updateChargeJangbuPaidInput) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuPaidValidateBeforeCall(jangbuId, yearMonth, updateChargeJangbuPaidInput, null);
        Type localVarReturnType = new TypeToken<ChargeJangbu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만) (asynchronously)
     * 정산내역의 수납여부를 업데이트 한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param updateChargeJangbuPaidInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업데이트된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 정산내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerUpdateChargeJangbuPaidAsync(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPaidInput updateChargeJangbuPaidInput, final ApiCallback<ChargeJangbu> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuPaidValidateBeforeCall(jangbuId, yearMonth, updateChargeJangbuPaidInput, _callback);
        Type localVarReturnType = new TypeToken<ChargeJangbu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerUpdateChargeJangbuPartnership
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param updateChargeJangbuPartnershipInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (수정된) 장부사의 파트너쉽 금액정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 파트너쉽 금액정보가 없는 경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerUpdateChargeJangbuPartnershipCall(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPartnershipInput updateChargeJangbuPartnershipInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateChargeJangbuPartnershipInput;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/partnership"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerUpdateChargeJangbuPartnershipValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPartnershipInput updateChargeJangbuPartnershipInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerUpdateChargeJangbuPartnership(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerUpdateChargeJangbuPartnership(Async)");
        }
        
        // verify the required parameter 'updateChargeJangbuPartnershipInput' is set
        if (updateChargeJangbuPartnershipInput == null) {
            throw new ApiException("Missing the required parameter 'updateChargeJangbuPartnershipInput' when calling adjustControllerUpdateChargeJangbuPartnership(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuPartnershipCall(jangbuId, yearMonth, updateChargeJangbuPartnershipInput, _callback);
        return localVarCall;

    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액 수정
     * (해당연월) 장부사의 파트너쉽 금액을 수정한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param updateChargeJangbuPartnershipInput  (required)
     * @return ChargeJangbuPartnership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (수정된) 장부사의 파트너쉽 금액정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 파트너쉽 금액정보가 없는 경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ChargeJangbuPartnership adjustControllerUpdateChargeJangbuPartnership(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPartnershipInput updateChargeJangbuPartnershipInput) throws ApiException {
        ApiResponse<ChargeJangbuPartnership> localVarResp = adjustControllerUpdateChargeJangbuPartnershipWithHttpInfo(jangbuId, yearMonth, updateChargeJangbuPartnershipInput);
        return localVarResp.getData();
    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액 수정
     * (해당연월) 장부사의 파트너쉽 금액을 수정한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param updateChargeJangbuPartnershipInput  (required)
     * @return ApiResponse&lt;ChargeJangbuPartnership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (수정된) 장부사의 파트너쉽 금액정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 파트너쉽 금액정보가 없는 경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChargeJangbuPartnership> adjustControllerUpdateChargeJangbuPartnershipWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPartnershipInput updateChargeJangbuPartnershipInput) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuPartnershipValidateBeforeCall(jangbuId, yearMonth, updateChargeJangbuPartnershipInput, null);
        Type localVarReturnType = new TypeToken<ChargeJangbuPartnership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액 수정 (asynchronously)
     * (해당연월) 장부사의 파트너쉽 금액을 수정한다.
     * @param jangbuId  (required)
     * @param yearMonth  (required)
     * @param updateChargeJangbuPartnershipInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> (수정된) 장부사의 파트너쉽 금액정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사 파트너쉽 금액정보가 없는 경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 이미 장부사에게 공개된 정산내역의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerUpdateChargeJangbuPartnershipAsync(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuPartnershipInput updateChargeJangbuPartnershipInput, final ApiCallback<ChargeJangbuPartnership> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuPartnershipValidateBeforeCall(jangbuId, yearMonth, updateChargeJangbuPartnershipInput, _callback);
        Type localVarReturnType = new TypeToken<ChargeJangbuPartnership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustControllerUpdateChargeJangbuStatus
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param updateChargeJangbuStatusInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업데이트된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 정산내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerUpdateChargeJangbuStatusCall(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuStatusInput updateChargeJangbuStatusInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateChargeJangbuStatusInput;

        // create path and map variables
        String localVarPath = "/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/status"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustControllerUpdateChargeJangbuStatusValidateBeforeCall(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuStatusInput updateChargeJangbuStatusInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling adjustControllerUpdateChargeJangbuStatus(Async)");
        }
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling adjustControllerUpdateChargeJangbuStatus(Async)");
        }
        
        // verify the required parameter 'updateChargeJangbuStatusInput' is set
        if (updateChargeJangbuStatusInput == null) {
            throw new ApiException("Missing the required parameter 'updateChargeJangbuStatusInput' when calling adjustControllerUpdateChargeJangbuStatus(Async)");
        }
        

        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuStatusCall(jangbuId, yearMonth, updateChargeJangbuStatusInput, _callback);
        return localVarCall;

    }

    /**
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     * 정산내역의 비공개 → 공개 상태값을 업데이트 및 정산내역의 메일을 발송한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param updateChargeJangbuStatusInput  (required)
     * @return ChargeJangbu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업데이트된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 정산내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ChargeJangbu adjustControllerUpdateChargeJangbuStatus(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuStatusInput updateChargeJangbuStatusInput) throws ApiException {
        ApiResponse<ChargeJangbu> localVarResp = adjustControllerUpdateChargeJangbuStatusWithHttpInfo(jangbuId, yearMonth, updateChargeJangbuStatusInput);
        return localVarResp.getData();
    }

    /**
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     * 정산내역의 비공개 → 공개 상태값을 업데이트 및 정산내역의 메일을 발송한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param updateChargeJangbuStatusInput  (required)
     * @return ApiResponse&lt;ChargeJangbu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업데이트된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 정산내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChargeJangbu> adjustControllerUpdateChargeJangbuStatusWithHttpInfo(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuStatusInput updateChargeJangbuStatusInput) throws ApiException {
        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuStatusValidateBeforeCall(jangbuId, yearMonth, updateChargeJangbuStatusInput, null);
        Type localVarReturnType = new TypeToken<ChargeJangbu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만) (asynchronously)
     * 정산내역의 비공개 → 공개 상태값을 업데이트 및 정산내역의 메일을 발송한다
     * @param jangbuId 장부사 순번 (required)
     * @param yearMonth 해당연월 (YYYYMM) (required)
     * @param updateChargeJangbuStatusInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업데이트된 정산내역 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 정산내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adjustControllerUpdateChargeJangbuStatusAsync(BigDecimal jangbuId, BigDecimal yearMonth, UpdateChargeJangbuStatusInput updateChargeJangbuStatusInput, final ApiCallback<ChargeJangbu> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustControllerUpdateChargeJangbuStatusValidateBeforeCall(jangbuId, yearMonth, updateChargeJangbuStatusInput, _callback);
        Type localVarReturnType = new TypeToken<ChargeJangbu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authControllerDeleteToken
     * @param refreshToken 리프레시 토큰 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 토큰을 삭제 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 리프레시 토큰이 존재하지 않는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authControllerDeleteTokenCall(String refreshToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/auth/{refreshToken}"
            .replaceAll("\\{" + "refreshToken" + "\\}", localVarApiClient.escapeString(refreshToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authControllerDeleteTokenValidateBeforeCall(String refreshToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'refreshToken' is set
        if (refreshToken == null) {
            throw new ApiException("Missing the required parameter 'refreshToken' when calling authControllerDeleteToken(Async)");
        }
        

        okhttp3.Call localVarCall = authControllerDeleteTokenCall(refreshToken, _callback);
        return localVarCall;

    }

    /**
     * 로그아웃 (토큰삭제)
     * 토큰을 삭제한다 (로그아웃시)
     * @param refreshToken 리프레시 토큰 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 토큰을 삭제 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 리프레시 토큰이 존재하지 않는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public void authControllerDeleteToken(String refreshToken) throws ApiException {
        authControllerDeleteTokenWithHttpInfo(refreshToken);
    }

    /**
     * 로그아웃 (토큰삭제)
     * 토큰을 삭제한다 (로그아웃시)
     * @param refreshToken 리프레시 토큰 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 토큰을 삭제 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 리프레시 토큰이 존재하지 않는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> authControllerDeleteTokenWithHttpInfo(String refreshToken) throws ApiException {
        okhttp3.Call localVarCall = authControllerDeleteTokenValidateBeforeCall(refreshToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 로그아웃 (토큰삭제) (asynchronously)
     * 토큰을 삭제한다 (로그아웃시)
     * @param refreshToken 리프레시 토큰 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 토큰을 삭제 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 리프레시 토큰이 존재하지 않는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authControllerDeleteTokenAsync(String refreshToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authControllerDeleteTokenValidateBeforeCall(refreshToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for authControllerLogin
     * @param loginInput 로그인 요청 데이터 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 새 토큰을 발급 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 해당 패스워드가 일치하지 않음 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 아이디를 갖는 사용자가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authControllerLoginCall(LoginInput loginInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loginInput;

        // create path and map variables
        String localVarPath = "/public/api/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authControllerLoginValidateBeforeCall(LoginInput loginInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loginInput' is set
        if (loginInput == null) {
            throw new ApiException("Missing the required parameter 'loginInput' when calling authControllerLogin(Async)");
        }
        

        okhttp3.Call localVarCall = authControllerLoginCall(loginInput, _callback);
        return localVarCall;

    }

    /**
     * 토큰발급
     * 새로운 토큰을 발급한다
     * @param loginInput 로그인 요청 데이터 (required)
     * @return LoginOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 새 토큰을 발급 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 해당 패스워드가 일치하지 않음 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 아이디를 갖는 사용자가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public LoginOutput authControllerLogin(LoginInput loginInput) throws ApiException {
        ApiResponse<LoginOutput> localVarResp = authControllerLoginWithHttpInfo(loginInput);
        return localVarResp.getData();
    }

    /**
     * 토큰발급
     * 새로운 토큰을 발급한다
     * @param loginInput 로그인 요청 데이터 (required)
     * @return ApiResponse&lt;LoginOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 새 토큰을 발급 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 해당 패스워드가 일치하지 않음 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 아이디를 갖는 사용자가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginOutput> authControllerLoginWithHttpInfo(LoginInput loginInput) throws ApiException {
        okhttp3.Call localVarCall = authControllerLoginValidateBeforeCall(loginInput, null);
        Type localVarReturnType = new TypeToken<LoginOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 토큰발급 (asynchronously)
     * 새로운 토큰을 발급한다
     * @param loginInput 로그인 요청 데이터 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 새 토큰을 발급 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 해당 패스워드가 일치하지 않음 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 아이디를 갖는 사용자가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authControllerLoginAsync(LoginInput loginInput, final ApiCallback<LoginOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authControllerLoginValidateBeforeCall(loginInput, _callback);
        Type localVarReturnType = new TypeToken<LoginOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authControllerRefresh
     * @param refreshInput 토큰갱신 요청 데이터 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 토큰을 갱신 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 존재하지 않는 토큰의 경우 또는 유효하지 않거나 만료된 토큰의 경우 또는 회원정보가 유효하지 않은경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authControllerRefreshCall(RefreshInput refreshInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = refreshInput;

        // create path and map variables
        String localVarPath = "/public/api/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authControllerRefreshValidateBeforeCall(RefreshInput refreshInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'refreshInput' is set
        if (refreshInput == null) {
            throw new ApiException("Missing the required parameter 'refreshInput' when calling authControllerRefresh(Async)");
        }
        

        okhttp3.Call localVarCall = authControllerRefreshCall(refreshInput, _callback);
        return localVarCall;

    }

    /**
     * 토큰갱신
     * 토큰을 갱신한다
     * @param refreshInput 토큰갱신 요청 데이터 (required)
     * @return RefreshOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 토큰을 갱신 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 존재하지 않는 토큰의 경우 또는 유효하지 않거나 만료된 토큰의 경우 또는 회원정보가 유효하지 않은경우 </td><td>  -  </td></tr>
     </table>
     */
    public RefreshOutput authControllerRefresh(RefreshInput refreshInput) throws ApiException {
        ApiResponse<RefreshOutput> localVarResp = authControllerRefreshWithHttpInfo(refreshInput);
        return localVarResp.getData();
    }

    /**
     * 토큰갱신
     * 토큰을 갱신한다
     * @param refreshInput 토큰갱신 요청 데이터 (required)
     * @return ApiResponse&lt;RefreshOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 토큰을 갱신 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 존재하지 않는 토큰의 경우 또는 유효하지 않거나 만료된 토큰의 경우 또는 회원정보가 유효하지 않은경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshOutput> authControllerRefreshWithHttpInfo(RefreshInput refreshInput) throws ApiException {
        okhttp3.Call localVarCall = authControllerRefreshValidateBeforeCall(refreshInput, null);
        Type localVarReturnType = new TypeToken<RefreshOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 토큰갱신 (asynchronously)
     * 토큰을 갱신한다
     * @param refreshInput 토큰갱신 요청 데이터 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 토큰을 갱신 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 존재하지 않는 토큰의 경우 또는 유효하지 않거나 만료된 토큰의 경우 또는 회원정보가 유효하지 않은경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authControllerRefreshAsync(RefreshInput refreshInput, final ApiCallback<RefreshOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authControllerRefreshValidateBeforeCall(refreshInput, _callback);
        Type localVarReturnType = new TypeToken<RefreshOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorControllerGetCert
     * @param errorId 에러 순번 (required)
     * @param connectId 연결정보 순번 (required)
     * @param path S3 경로 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 인증서정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 connectId의 인증서가 존재하지 않거나 DB에 Connect 정보가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorControllerGetCertCall(BigDecimal errorId, BigDecimal connectId, String path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/error/{errorId}/cert"
            .replaceAll("\\{" + "errorId" + "\\}", localVarApiClient.escapeString(errorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (connectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connectId", connectId));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorControllerGetCertValidateBeforeCall(BigDecimal errorId, BigDecimal connectId, String path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorControllerGetCert(Async)");
        }
        
        // verify the required parameter 'connectId' is set
        if (connectId == null) {
            throw new ApiException("Missing the required parameter 'connectId' when calling errorControllerGetCert(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling errorControllerGetCert(Async)");
        }
        

        okhttp3.Call localVarCall = errorControllerGetCertCall(errorId, connectId, path, _callback);
        return localVarCall;

    }

    /**
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     * 특정 인증서를 조회한다
     * @param errorId 에러 순번 (required)
     * @param connectId 연결정보 순번 (required)
     * @param path S3 경로 (required)
     * @return GetCertOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 인증서정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 connectId의 인증서가 존재하지 않거나 DB에 Connect 정보가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public GetCertOutput errorControllerGetCert(BigDecimal errorId, BigDecimal connectId, String path) throws ApiException {
        ApiResponse<GetCertOutput> localVarResp = errorControllerGetCertWithHttpInfo(errorId, connectId, path);
        return localVarResp.getData();
    }

    /**
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     * 특정 인증서를 조회한다
     * @param errorId 에러 순번 (required)
     * @param connectId 연결정보 순번 (required)
     * @param path S3 경로 (required)
     * @return ApiResponse&lt;GetCertOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 인증서정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 connectId의 인증서가 존재하지 않거나 DB에 Connect 정보가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCertOutput> errorControllerGetCertWithHttpInfo(BigDecimal errorId, BigDecimal connectId, String path) throws ApiException {
        okhttp3.Call localVarCall = errorControllerGetCertValidateBeforeCall(errorId, connectId, path, null);
        Type localVarReturnType = new TypeToken<GetCertOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 인증서 조회 (관리자 전용: 극히 일부사용자만) (asynchronously)
     * 특정 인증서를 조회한다
     * @param errorId 에러 순번 (required)
     * @param connectId 연결정보 순번 (required)
     * @param path S3 경로 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 인증서정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 connectId의 인증서가 존재하지 않거나 DB에 Connect 정보가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorControllerGetCertAsync(BigDecimal errorId, BigDecimal connectId, String path, final ApiCallback<GetCertOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorControllerGetCertValidateBeforeCall(errorId, connectId, path, _callback);
        Type localVarReturnType = new TypeToken<GetCertOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorControllerGetError
     * @param errorId 에러 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 에러정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 PC클라이언트 에러가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorControllerGetErrorCall(BigDecimal errorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/error/{errorId}"
            .replaceAll("\\{" + "errorId" + "\\}", localVarApiClient.escapeString(errorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorControllerGetErrorValidateBeforeCall(BigDecimal errorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorControllerGetError(Async)");
        }
        

        okhttp3.Call localVarCall = errorControllerGetErrorCall(errorId, _callback);
        return localVarCall;

    }

    /**
     * 에러 조회 (관리자 전용)
     * 특정 에러를 조회한다
     * @param errorId 에러 순번 (required)
     * @return PcClientError
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 에러정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 PC클라이언트 에러가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public PcClientError errorControllerGetError(BigDecimal errorId) throws ApiException {
        ApiResponse<PcClientError> localVarResp = errorControllerGetErrorWithHttpInfo(errorId);
        return localVarResp.getData();
    }

    /**
     * 에러 조회 (관리자 전용)
     * 특정 에러를 조회한다
     * @param errorId 에러 순번 (required)
     * @return ApiResponse&lt;PcClientError&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 에러정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 PC클라이언트 에러가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PcClientError> errorControllerGetErrorWithHttpInfo(BigDecimal errorId) throws ApiException {
        okhttp3.Call localVarCall = errorControllerGetErrorValidateBeforeCall(errorId, null);
        Type localVarReturnType = new TypeToken<PcClientError>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 에러 조회 (관리자 전용) (asynchronously)
     * 특정 에러를 조회한다
     * @param errorId 에러 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 에러정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 PC클라이언트 에러가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorControllerGetErrorAsync(BigDecimal errorId, final ApiCallback<PcClientError> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorControllerGetErrorValidateBeforeCall(errorId, _callback);
        Type localVarReturnType = new TypeToken<PcClientError>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorControllerGetErrors
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 시작일시 (YYYYMMDDHHmm) (required)
     * @param endAt 종료일시 (YYYYMMDDHHmm) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param appVersion 앱 버전 (optional)
     * @param appName 앱 이름 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param userId 회원의 순번 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 에러목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorControllerGetErrorsCall(BigDecimal page, BigDecimal limit, String startAt, String endAt, String route, String appVersion, String appName, String jangbuName, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/error";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (endAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAt", endAt));
        }

        if (appVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appVersion", appVersion));
        }

        if (appName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appName", appName));
        }

        if (jangbuName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jangbuName", jangbuName));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorControllerGetErrorsValidateBeforeCall(BigDecimal page, BigDecimal limit, String startAt, String endAt, String route, String appVersion, String appName, String jangbuName, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling errorControllerGetErrors(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling errorControllerGetErrors(Async)");
        }
        
        // verify the required parameter 'startAt' is set
        if (startAt == null) {
            throw new ApiException("Missing the required parameter 'startAt' when calling errorControllerGetErrors(Async)");
        }
        
        // verify the required parameter 'endAt' is set
        if (endAt == null) {
            throw new ApiException("Missing the required parameter 'endAt' when calling errorControllerGetErrors(Async)");
        }
        

        okhttp3.Call localVarCall = errorControllerGetErrorsCall(page, limit, startAt, endAt, route, appVersion, appName, jangbuName, userId, _callback);
        return localVarCall;

    }

    /**
     * 에러 목록 검색 (관리자 전용)
     * 에러 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 시작일시 (YYYYMMDDHHmm) (required)
     * @param endAt 종료일시 (YYYYMMDDHHmm) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param appVersion 앱 버전 (optional)
     * @param appName 앱 이름 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param userId 회원의 순번 (optional)
     * @return GetErrorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 에러목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public GetErrorsResponse errorControllerGetErrors(BigDecimal page, BigDecimal limit, String startAt, String endAt, String route, String appVersion, String appName, String jangbuName, BigDecimal userId) throws ApiException {
        ApiResponse<GetErrorsResponse> localVarResp = errorControllerGetErrorsWithHttpInfo(page, limit, startAt, endAt, route, appVersion, appName, jangbuName, userId);
        return localVarResp.getData();
    }

    /**
     * 에러 목록 검색 (관리자 전용)
     * 에러 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 시작일시 (YYYYMMDDHHmm) (required)
     * @param endAt 종료일시 (YYYYMMDDHHmm) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param appVersion 앱 버전 (optional)
     * @param appName 앱 이름 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param userId 회원의 순번 (optional)
     * @return ApiResponse&lt;GetErrorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 에러목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetErrorsResponse> errorControllerGetErrorsWithHttpInfo(BigDecimal page, BigDecimal limit, String startAt, String endAt, String route, String appVersion, String appName, String jangbuName, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = errorControllerGetErrorsValidateBeforeCall(page, limit, startAt, endAt, route, appVersion, appName, jangbuName, userId, null);
        Type localVarReturnType = new TypeToken<GetErrorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 에러 목록 검색 (관리자 전용) (asynchronously)
     * 에러 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 시작일시 (YYYYMMDDHHmm) (required)
     * @param endAt 종료일시 (YYYYMMDDHHmm) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param appVersion 앱 버전 (optional)
     * @param appName 앱 이름 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param userId 회원의 순번 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 에러목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorControllerGetErrorsAsync(BigDecimal page, BigDecimal limit, String startAt, String endAt, String route, String appVersion, String appName, String jangbuName, BigDecimal userId, final ApiCallback<GetErrorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorControllerGetErrorsValidateBeforeCall(page, limit, startAt, endAt, route, appVersion, appName, jangbuName, userId, _callback);
        Type localVarReturnType = new TypeToken<GetErrorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jangbuControllerGetJangbu
     * @param jangbuId 장부사의 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 특정 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerGetJangbuCall(BigDecimal jangbuId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/jangbu/{jangbuId}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jangbuControllerGetJangbuValidateBeforeCall(BigDecimal jangbuId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling jangbuControllerGetJangbu(Async)");
        }
        

        okhttp3.Call localVarCall = jangbuControllerGetJangbuCall(jangbuId, _callback);
        return localVarCall;

    }

    /**
     * 장부사 조회 (관리자 전용)
     * 특정 장부사를 조회한다
     * @param jangbuId 장부사의 순번 (required)
     * @return Jangbu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 특정 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public Jangbu jangbuControllerGetJangbu(BigDecimal jangbuId) throws ApiException {
        ApiResponse<Jangbu> localVarResp = jangbuControllerGetJangbuWithHttpInfo(jangbuId);
        return localVarResp.getData();
    }

    /**
     * 장부사 조회 (관리자 전용)
     * 특정 장부사를 조회한다
     * @param jangbuId 장부사의 순번 (required)
     * @return ApiResponse&lt;Jangbu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 특정 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jangbu> jangbuControllerGetJangbuWithHttpInfo(BigDecimal jangbuId) throws ApiException {
        okhttp3.Call localVarCall = jangbuControllerGetJangbuValidateBeforeCall(jangbuId, null);
        Type localVarReturnType = new TypeToken<Jangbu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 장부사 조회 (관리자 전용) (asynchronously)
     * 특정 장부사를 조회한다
     * @param jangbuId 장부사의 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 특정 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerGetJangbuAsync(BigDecimal jangbuId, final ApiCallback<Jangbu> _callback) throws ApiException {

        okhttp3.Call localVarCall = jangbuControllerGetJangbuValidateBeforeCall(jangbuId, _callback);
        Type localVarReturnType = new TypeToken<Jangbu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jangbuControllerGetJangbus
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceIds 서비스 순번 목록 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param repId 장부사 아이디 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerGetJangbusCall(BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/jangbu";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (serviceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "serviceIds", serviceIds));
        }

        if (jangbuName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jangbuName", jangbuName));
        }

        if (repId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repId", repId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jangbuControllerGetJangbusValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling jangbuControllerGetJangbus(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling jangbuControllerGetJangbus(Async)");
        }
        

        okhttp3.Call localVarCall = jangbuControllerGetJangbusCall(page, limit, route, serviceIds, jangbuName, repId, _callback);
        return localVarCall;

    }

    /**
     * 장부사 목록 검색 (관리자 전용)
     * 장부사 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceIds 서비스 순번 목록 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param repId 장부사 아이디 (optional)
     * @return GetJangbusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public GetJangbusOutput jangbuControllerGetJangbus(BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId) throws ApiException {
        ApiResponse<GetJangbusOutput> localVarResp = jangbuControllerGetJangbusWithHttpInfo(page, limit, route, serviceIds, jangbuName, repId);
        return localVarResp.getData();
    }

    /**
     * 장부사 목록 검색 (관리자 전용)
     * 장부사 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceIds 서비스 순번 목록 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param repId 장부사 아이디 (optional)
     * @return ApiResponse&lt;GetJangbusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetJangbusOutput> jangbuControllerGetJangbusWithHttpInfo(BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId) throws ApiException {
        okhttp3.Call localVarCall = jangbuControllerGetJangbusValidateBeforeCall(page, limit, route, serviceIds, jangbuName, repId, null);
        Type localVarReturnType = new TypeToken<GetJangbusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 장부사 목록 검색 (관리자 전용) (asynchronously)
     * 장부사 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceIds 서비스 순번 목록 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param repId 장부사 아이디 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerGetJangbusAsync(BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId, final ApiCallback<GetJangbusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = jangbuControllerGetJangbusValidateBeforeCall(page, limit, route, serviceIds, jangbuName, repId, _callback);
        Type localVarReturnType = new TypeToken<GetJangbusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jangbuControllerGetJangbusWithChargeJangbuPartnership
     * @param yearMonth 해당연월 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceIds 서비스 순번 목록 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param repId 장부사 아이디 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerGetJangbusWithChargeJangbuPartnershipCall(BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/jangbu/yearMonth/{yearMonth}"
            .replaceAll("\\{" + "yearMonth" + "\\}", localVarApiClient.escapeString(yearMonth.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (serviceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "serviceIds", serviceIds));
        }

        if (jangbuName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jangbuName", jangbuName));
        }

        if (repId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repId", repId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jangbuControllerGetJangbusWithChargeJangbuPartnershipValidateBeforeCall(BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'yearMonth' is set
        if (yearMonth == null) {
            throw new ApiException("Missing the required parameter 'yearMonth' when calling jangbuControllerGetJangbusWithChargeJangbuPartnership(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling jangbuControllerGetJangbusWithChargeJangbuPartnership(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling jangbuControllerGetJangbusWithChargeJangbuPartnership(Async)");
        }
        

        okhttp3.Call localVarCall = jangbuControllerGetJangbusWithChargeJangbuPartnershipCall(yearMonth, page, limit, route, serviceIds, jangbuName, repId, _callback);
        return localVarCall;

    }

    /**
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색한다
     * @param yearMonth 해당연월 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceIds 서비스 순번 목록 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param repId 장부사 아이디 (optional)
     * @return GetJangbusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public GetJangbusOutput jangbuControllerGetJangbusWithChargeJangbuPartnership(BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId) throws ApiException {
        ApiResponse<GetJangbusOutput> localVarResp = jangbuControllerGetJangbusWithChargeJangbuPartnershipWithHttpInfo(yearMonth, page, limit, route, serviceIds, jangbuName, repId);
        return localVarResp.getData();
    }

    /**
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색한다
     * @param yearMonth 해당연월 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceIds 서비스 순번 목록 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param repId 장부사 아이디 (optional)
     * @return ApiResponse&lt;GetJangbusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetJangbusOutput> jangbuControllerGetJangbusWithChargeJangbuPartnershipWithHttpInfo(BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId) throws ApiException {
        okhttp3.Call localVarCall = jangbuControllerGetJangbusWithChargeJangbuPartnershipValidateBeforeCall(yearMonth, page, limit, route, serviceIds, jangbuName, repId, null);
        Type localVarReturnType = new TypeToken<GetJangbusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용) (asynchronously)
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색한다
     * @param yearMonth 해당연월 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceIds 서비스 순번 목록 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param repId 장부사 아이디 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerGetJangbusWithChargeJangbuPartnershipAsync(BigDecimal yearMonth, BigDecimal page, BigDecimal limit, String route, List<BigDecimal> serviceIds, String jangbuName, String repId, final ApiCallback<GetJangbusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = jangbuControllerGetJangbusWithChargeJangbuPartnershipValidateBeforeCall(yearMonth, page, limit, route, serviceIds, jangbuName, repId, _callback);
        Type localVarReturnType = new TypeToken<GetJangbusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jangbuControllerRegisterJangbu
     * @param registerJangbuInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 장부사명이 존재 또는 중복된 로그인 아이디 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerRegisterJangbuCall(RegisterJangbuInput registerJangbuInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerJangbuInput;

        // create path and map variables
        String localVarPath = "/public/api/jangbu";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jangbuControllerRegisterJangbuValidateBeforeCall(RegisterJangbuInput registerJangbuInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerJangbuInput' is set
        if (registerJangbuInput == null) {
            throw new ApiException("Missing the required parameter 'registerJangbuInput' when calling jangbuControllerRegisterJangbu(Async)");
        }
        

        okhttp3.Call localVarCall = jangbuControllerRegisterJangbuCall(registerJangbuInput, _callback);
        return localVarCall;

    }

    /**
     * 장부사 등록 (관리자 전용)
     * 장부사를 등록한다
     * @param registerJangbuInput  (required)
     * @return Jangbu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 장부사명이 존재 또는 중복된 로그인 아이디 </td><td>  -  </td></tr>
     </table>
     */
    public Jangbu jangbuControllerRegisterJangbu(RegisterJangbuInput registerJangbuInput) throws ApiException {
        ApiResponse<Jangbu> localVarResp = jangbuControllerRegisterJangbuWithHttpInfo(registerJangbuInput);
        return localVarResp.getData();
    }

    /**
     * 장부사 등록 (관리자 전용)
     * 장부사를 등록한다
     * @param registerJangbuInput  (required)
     * @return ApiResponse&lt;Jangbu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 장부사명이 존재 또는 중복된 로그인 아이디 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jangbu> jangbuControllerRegisterJangbuWithHttpInfo(RegisterJangbuInput registerJangbuInput) throws ApiException {
        okhttp3.Call localVarCall = jangbuControllerRegisterJangbuValidateBeforeCall(registerJangbuInput, null);
        Type localVarReturnType = new TypeToken<Jangbu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 장부사 등록 (관리자 전용) (asynchronously)
     * 장부사를 등록한다
     * @param registerJangbuInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 장부사명이 존재 또는 중복된 로그인 아이디 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerRegisterJangbuAsync(RegisterJangbuInput registerJangbuInput, final ApiCallback<Jangbu> _callback) throws ApiException {

        okhttp3.Call localVarCall = jangbuControllerRegisterJangbuValidateBeforeCall(registerJangbuInput, _callback);
        Type localVarReturnType = new TypeToken<Jangbu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jangbuControllerUpdateJangbu
     * @param jangbuId 장부사의 순번 (required)
     * @param updateJangbuInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사가 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 장부사명이 중복되는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerUpdateJangbuCall(BigDecimal jangbuId, UpdateJangbuInput updateJangbuInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateJangbuInput;

        // create path and map variables
        String localVarPath = "/public/api/jangbu/{jangbuId}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jangbuControllerUpdateJangbuValidateBeforeCall(BigDecimal jangbuId, UpdateJangbuInput updateJangbuInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling jangbuControllerUpdateJangbu(Async)");
        }
        
        // verify the required parameter 'updateJangbuInput' is set
        if (updateJangbuInput == null) {
            throw new ApiException("Missing the required parameter 'updateJangbuInput' when calling jangbuControllerUpdateJangbu(Async)");
        }
        

        okhttp3.Call localVarCall = jangbuControllerUpdateJangbuCall(jangbuId, updateJangbuInput, _callback);
        return localVarCall;

    }

    /**
     * 장부사 수정 (관리자 전용)
     * 특정 장부사를 수정한다
     * @param jangbuId 장부사의 순번 (required)
     * @param updateJangbuInput  (required)
     * @return Jangbu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사가 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 장부사명이 중복되는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public Jangbu jangbuControllerUpdateJangbu(BigDecimal jangbuId, UpdateJangbuInput updateJangbuInput) throws ApiException {
        ApiResponse<Jangbu> localVarResp = jangbuControllerUpdateJangbuWithHttpInfo(jangbuId, updateJangbuInput);
        return localVarResp.getData();
    }

    /**
     * 장부사 수정 (관리자 전용)
     * 특정 장부사를 수정한다
     * @param jangbuId 장부사의 순번 (required)
     * @param updateJangbuInput  (required)
     * @return ApiResponse&lt;Jangbu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사가 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 장부사명이 중복되는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jangbu> jangbuControllerUpdateJangbuWithHttpInfo(BigDecimal jangbuId, UpdateJangbuInput updateJangbuInput) throws ApiException {
        okhttp3.Call localVarCall = jangbuControllerUpdateJangbuValidateBeforeCall(jangbuId, updateJangbuInput, null);
        Type localVarReturnType = new TypeToken<Jangbu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 장부사 수정 (관리자 전용) (asynchronously)
     * 특정 장부사를 수정한다
     * @param jangbuId 장부사의 순번 (required)
     * @param updateJangbuInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 장부사를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 장부사가 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 장부사명이 중복되는 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jangbuControllerUpdateJangbuAsync(BigDecimal jangbuId, UpdateJangbuInput updateJangbuInput, final ApiCallback<Jangbu> _callback) throws ApiException {

        okhttp3.Call localVarCall = jangbuControllerUpdateJangbuValidateBeforeCall(jangbuId, updateJangbuInput, _callback);
        Type localVarReturnType = new TypeToken<Jangbu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerFindMember
     * @param findMemberInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 아이디(아이디 찾기) 또는 패스워드(패스워드 찾기) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 이름, ID, 이메일이 올바르지 않음 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 아이디를 갖는 사용자가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerFindMemberCall(FindMemberInput findMemberInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = findMemberInput;

        // create path and map variables
        String localVarPath = "/public/api/member/find/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerFindMemberValidateBeforeCall(FindMemberInput findMemberInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'findMemberInput' is set
        if (findMemberInput == null) {
            throw new ApiException("Missing the required parameter 'findMemberInput' when calling memberControllerFindMember(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerFindMemberCall(findMemberInput, _callback);
        return localVarCall;

    }

    /**
     * 아이디 찾기 또는 패스워드 찾기
     * (로그인 계정의) 아이디 또는 패스워드를 찾는다
     * @param findMemberInput  (required)
     * @return FindMemberOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 아이디(아이디 찾기) 또는 패스워드(패스워드 찾기) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 이름, ID, 이메일이 올바르지 않음 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 아이디를 갖는 사용자가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public FindMemberOutput memberControllerFindMember(FindMemberInput findMemberInput) throws ApiException {
        ApiResponse<FindMemberOutput> localVarResp = memberControllerFindMemberWithHttpInfo(findMemberInput);
        return localVarResp.getData();
    }

    /**
     * 아이디 찾기 또는 패스워드 찾기
     * (로그인 계정의) 아이디 또는 패스워드를 찾는다
     * @param findMemberInput  (required)
     * @return ApiResponse&lt;FindMemberOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 아이디(아이디 찾기) 또는 패스워드(패스워드 찾기) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 이름, ID, 이메일이 올바르지 않음 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 아이디를 갖는 사용자가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FindMemberOutput> memberControllerFindMemberWithHttpInfo(FindMemberInput findMemberInput) throws ApiException {
        okhttp3.Call localVarCall = memberControllerFindMemberValidateBeforeCall(findMemberInput, null);
        Type localVarReturnType = new TypeToken<FindMemberOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 아이디 찾기 또는 패스워드 찾기 (asynchronously)
     * (로그인 계정의) 아이디 또는 패스워드를 찾는다
     * @param findMemberInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 아이디(아이디 찾기) 또는 패스워드(패스워드 찾기) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 이름, ID, 이메일이 올바르지 않음 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 아이디를 갖는 사용자가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerFindMemberAsync(FindMemberInput findMemberInput, final ApiCallback<FindMemberOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerFindMemberValidateBeforeCall(findMemberInput, _callback);
        Type localVarReturnType = new TypeToken<FindMemberOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerGetMember
     * @param userId 회원의 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 회원정보 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerGetMemberCall(BigDecimal userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/member/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerGetMemberValidateBeforeCall(BigDecimal userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling memberControllerGetMember(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerGetMemberCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 회원 조회
     * 특정 회원을 조회한다
     * @param userId 회원의 순번 (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 회원정보 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public User memberControllerGetMember(BigDecimal userId) throws ApiException {
        ApiResponse<User> localVarResp = memberControllerGetMemberWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 회원 조회
     * 특정 회원을 조회한다
     * @param userId 회원의 순번 (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 회원정보 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> memberControllerGetMemberWithHttpInfo(BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = memberControllerGetMemberValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 회원 조회 (asynchronously)
     * 특정 회원을 조회한다
     * @param userId 회원의 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 회원정보 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerGetMemberAsync(BigDecimal userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerGetMemberValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerGetMembers
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param jangbuId 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param userName 회원명 (optional)
     * @param ceoName 대표자명 (optional)
     * @param userLevel 회원레벨 (고객,장부사,관리자) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 회원목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerGetMembersCall(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal serviceId, String active, String userName, String ceoName, BigDecimal userLevel, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (jangbuId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jangbuId", jangbuId));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (ceoName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ceoName", ceoName));
        }

        if (userLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userLevel", userLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerGetMembersValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal serviceId, String active, String userName, String ceoName, BigDecimal userLevel, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling memberControllerGetMembers(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling memberControllerGetMembers(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerGetMembersCall(page, limit, route, jangbuId, serviceId, active, userName, ceoName, userLevel, _callback);
        return localVarCall;

    }

    /**
     * 회원 목록 검색
     * 회원 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param jangbuId 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param userName 회원명 (optional)
     * @param ceoName 대표자명 (optional)
     * @param userLevel 회원레벨 (고객,장부사,관리자) (optional)
     * @return GetMembersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 회원목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public GetMembersOutput memberControllerGetMembers(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal serviceId, String active, String userName, String ceoName, BigDecimal userLevel) throws ApiException {
        ApiResponse<GetMembersOutput> localVarResp = memberControllerGetMembersWithHttpInfo(page, limit, route, jangbuId, serviceId, active, userName, ceoName, userLevel);
        return localVarResp.getData();
    }

    /**
     * 회원 목록 검색
     * 회원 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param jangbuId 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param userName 회원명 (optional)
     * @param ceoName 대표자명 (optional)
     * @param userLevel 회원레벨 (고객,장부사,관리자) (optional)
     * @return ApiResponse&lt;GetMembersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 회원목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMembersOutput> memberControllerGetMembersWithHttpInfo(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal serviceId, String active, String userName, String ceoName, BigDecimal userLevel) throws ApiException {
        okhttp3.Call localVarCall = memberControllerGetMembersValidateBeforeCall(page, limit, route, jangbuId, serviceId, active, userName, ceoName, userLevel, null);
        Type localVarReturnType = new TypeToken<GetMembersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 회원 목록 검색 (asynchronously)
     * 회원 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param jangbuId 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param userName 회원명 (optional)
     * @param ceoName 대표자명 (optional)
     * @param userLevel 회원레벨 (고객,장부사,관리자) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 회원목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerGetMembersAsync(BigDecimal page, BigDecimal limit, String route, BigDecimal jangbuId, BigDecimal serviceId, String active, String userName, String ceoName, BigDecimal userLevel, final ApiCallback<GetMembersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerGetMembersValidateBeforeCall(page, limit, route, jangbuId, serviceId, active, userName, ceoName, userLevel, _callback);
        Type localVarReturnType = new TypeToken<GetMembersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerGetResetPassword
     * @param recoveryKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 비밀번호 초기화 정보 반환 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 초기화 키 만료기간이 지난 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 키가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerGetResetPasswordCall(String recoveryKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/member/recover/{recoveryKey}"
            .replaceAll("\\{" + "recoveryKey" + "\\}", localVarApiClient.escapeString(recoveryKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerGetResetPasswordValidateBeforeCall(String recoveryKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'recoveryKey' is set
        if (recoveryKey == null) {
            throw new ApiException("Missing the required parameter 'recoveryKey' when calling memberControllerGetResetPassword(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerGetResetPasswordCall(recoveryKey, _callback);
        return localVarCall;

    }

    /**
     * 패스워드 재설정 조회
     * 패스워드 재설정 정보를 조회한다
     * @param recoveryKey  (required)
     * @return Recovery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 비밀번호 초기화 정보 반환 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 초기화 키 만료기간이 지난 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 키가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public Recovery memberControllerGetResetPassword(String recoveryKey) throws ApiException {
        ApiResponse<Recovery> localVarResp = memberControllerGetResetPasswordWithHttpInfo(recoveryKey);
        return localVarResp.getData();
    }

    /**
     * 패스워드 재설정 조회
     * 패스워드 재설정 정보를 조회한다
     * @param recoveryKey  (required)
     * @return ApiResponse&lt;Recovery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 비밀번호 초기화 정보 반환 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 초기화 키 만료기간이 지난 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 키가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Recovery> memberControllerGetResetPasswordWithHttpInfo(String recoveryKey) throws ApiException {
        okhttp3.Call localVarCall = memberControllerGetResetPasswordValidateBeforeCall(recoveryKey, null);
        Type localVarReturnType = new TypeToken<Recovery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 패스워드 재설정 조회 (asynchronously)
     * 패스워드 재설정 정보를 조회한다
     * @param recoveryKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 비밀번호 초기화 정보 반환 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 초기화 키 만료기간이 지난 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 키가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerGetResetPasswordAsync(String recoveryKey, final ApiCallback<Recovery> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerGetResetPasswordValidateBeforeCall(recoveryKey, _callback);
        Type localVarReturnType = new TypeToken<Recovery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerRegisterCustomer
     * @param registerCustomerInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 계정정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 로그인 아이디의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerRegisterCustomerCall(RegisterCustomerInput registerCustomerInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerCustomerInput;

        // create path and map variables
        String localVarPath = "/public/api/member/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerRegisterCustomerValidateBeforeCall(RegisterCustomerInput registerCustomerInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerCustomerInput' is set
        if (registerCustomerInput == null) {
            throw new ApiException("Missing the required parameter 'registerCustomerInput' when calling memberControllerRegisterCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerRegisterCustomerCall(registerCustomerInput, _callback);
        return localVarCall;

    }

    /**
     * (고객사) 계정 등록
     * (고객사) 계정을 등록한다
     * @param registerCustomerInput  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 계정정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 로그인 아이디의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public User memberControllerRegisterCustomer(RegisterCustomerInput registerCustomerInput) throws ApiException {
        ApiResponse<User> localVarResp = memberControllerRegisterCustomerWithHttpInfo(registerCustomerInput);
        return localVarResp.getData();
    }

    /**
     * (고객사) 계정 등록
     * (고객사) 계정을 등록한다
     * @param registerCustomerInput  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 계정정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 로그인 아이디의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> memberControllerRegisterCustomerWithHttpInfo(RegisterCustomerInput registerCustomerInput) throws ApiException {
        okhttp3.Call localVarCall = memberControllerRegisterCustomerValidateBeforeCall(registerCustomerInput, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (고객사) 계정 등록 (asynchronously)
     * (고객사) 계정을 등록한다
     * @param registerCustomerInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 계정정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 로그인 아이디의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerRegisterCustomerAsync(RegisterCustomerInput registerCustomerInput, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerRegisterCustomerValidateBeforeCall(registerCustomerInput, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerRegisterMember
     * @param registerMemberInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 계정정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> (장부사 회원 등록시에만) 장부사가 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 로그인 아이디의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerRegisterMemberCall(RegisterMemberInput registerMemberInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerMemberInput;

        // create path and map variables
        String localVarPath = "/public/api/member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerRegisterMemberValidateBeforeCall(RegisterMemberInput registerMemberInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerMemberInput' is set
        if (registerMemberInput == null) {
            throw new ApiException("Missing the required parameter 'registerMemberInput' when calling memberControllerRegisterMember(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerRegisterMemberCall(registerMemberInput, _callback);
        return localVarCall;

    }

    /**
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     * (관리자 또는 장부사) 계정을 등록한다 (관라지만 이용)
     * @param registerMemberInput  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 계정정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> (장부사 회원 등록시에만) 장부사가 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 로그인 아이디의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public User memberControllerRegisterMember(RegisterMemberInput registerMemberInput) throws ApiException {
        ApiResponse<User> localVarResp = memberControllerRegisterMemberWithHttpInfo(registerMemberInput);
        return localVarResp.getData();
    }

    /**
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     * (관리자 또는 장부사) 계정을 등록한다 (관라지만 이용)
     * @param registerMemberInput  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 계정정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> (장부사 회원 등록시에만) 장부사가 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 로그인 아이디의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> memberControllerRegisterMemberWithHttpInfo(RegisterMemberInput registerMemberInput) throws ApiException {
        okhttp3.Call localVarCall = memberControllerRegisterMemberValidateBeforeCall(registerMemberInput, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용) (asynchronously)
     * (관리자 또는 장부사) 계정을 등록한다 (관라지만 이용)
     * @param registerMemberInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 계정정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> (장부사 회원 등록시에만) 장부사가 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 중복된 로그인 아이디의 경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerRegisterMemberAsync(RegisterMemberInput registerMemberInput, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerRegisterMemberValidateBeforeCall(registerMemberInput, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerResetPassword
     * @param recoveryKey 키값 (required)
     * @param resetPasswordInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 패스워드 재설정 처리이후 로그인하는 페이지로 이동 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 초기화 키 만료기간이 지난 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 키가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerResetPasswordCall(String recoveryKey, ResetPasswordInput resetPasswordInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = resetPasswordInput;

        // create path and map variables
        String localVarPath = "/public/api/member/recover/{recoveryKey}"
            .replaceAll("\\{" + "recoveryKey" + "\\}", localVarApiClient.escapeString(recoveryKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerResetPasswordValidateBeforeCall(String recoveryKey, ResetPasswordInput resetPasswordInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'recoveryKey' is set
        if (recoveryKey == null) {
            throw new ApiException("Missing the required parameter 'recoveryKey' when calling memberControllerResetPassword(Async)");
        }
        
        // verify the required parameter 'resetPasswordInput' is set
        if (resetPasswordInput == null) {
            throw new ApiException("Missing the required parameter 'resetPasswordInput' when calling memberControllerResetPassword(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerResetPasswordCall(recoveryKey, resetPasswordInput, _callback);
        return localVarCall;

    }

    /**
     * (계정찾기진행시) 패스워드 재설정 처리
     * (계정찾기진행시) 패스워드 재설정 정보를 처리한다
     * @param recoveryKey 키값 (required)
     * @param resetPasswordInput  (required)
     * @return ResetPasswordOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 패스워드 재설정 처리이후 로그인하는 페이지로 이동 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 초기화 키 만료기간이 지난 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 키가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ResetPasswordOutput memberControllerResetPassword(String recoveryKey, ResetPasswordInput resetPasswordInput) throws ApiException {
        ApiResponse<ResetPasswordOutput> localVarResp = memberControllerResetPasswordWithHttpInfo(recoveryKey, resetPasswordInput);
        return localVarResp.getData();
    }

    /**
     * (계정찾기진행시) 패스워드 재설정 처리
     * (계정찾기진행시) 패스워드 재설정 정보를 처리한다
     * @param recoveryKey 키값 (required)
     * @param resetPasswordInput  (required)
     * @return ApiResponse&lt;ResetPasswordOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 패스워드 재설정 처리이후 로그인하는 페이지로 이동 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 초기화 키 만료기간이 지난 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 키가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResetPasswordOutput> memberControllerResetPasswordWithHttpInfo(String recoveryKey, ResetPasswordInput resetPasswordInput) throws ApiException {
        okhttp3.Call localVarCall = memberControllerResetPasswordValidateBeforeCall(recoveryKey, resetPasswordInput, null);
        Type localVarReturnType = new TypeToken<ResetPasswordOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (계정찾기진행시) 패스워드 재설정 처리 (asynchronously)
     * (계정찾기진행시) 패스워드 재설정 정보를 처리한다
     * @param recoveryKey 키값 (required)
     * @param resetPasswordInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 패스워드 재설정 처리이후 로그인하는 페이지로 이동 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 초기화 키 만료기간이 지난 경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 키가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerResetPasswordAsync(String recoveryKey, ResetPasswordInput resetPasswordInput, final ApiCallback<ResetPasswordOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerResetPasswordValidateBeforeCall(recoveryKey, resetPasswordInput, _callback);
        Type localVarReturnType = new TypeToken<ResetPasswordOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerResetPasswordWithIdEmail
     * @param memberId 회원의 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 패스워드 초기화된 회원정보 반환 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 장부사가 관리자 패스워드를 초기화하는경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 장부사가 다른장부사 계정의 정보를 수정하는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerResetPasswordWithIdEmailCall(BigDecimal memberId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/member/{memberId}/reset"
            .replaceAll("\\{" + "memberId" + "\\}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerResetPasswordWithIdEmailValidateBeforeCall(BigDecimal memberId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling memberControllerResetPasswordWithIdEmail(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerResetPasswordWithIdEmailCall(memberId, _callback);
        return localVarCall;

    }

    /**
     * 로그인 패스워드 초기화
     * 아이디+이메일 조합으로 패스워드를 초기화한다
     * @param memberId 회원의 순번 (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 패스워드 초기화된 회원정보 반환 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 장부사가 관리자 패스워드를 초기화하는경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 장부사가 다른장부사 계정의 정보를 수정하는경우 </td><td>  -  </td></tr>
     </table>
     */
    public User memberControllerResetPasswordWithIdEmail(BigDecimal memberId) throws ApiException {
        ApiResponse<User> localVarResp = memberControllerResetPasswordWithIdEmailWithHttpInfo(memberId);
        return localVarResp.getData();
    }

    /**
     * 로그인 패스워드 초기화
     * 아이디+이메일 조합으로 패스워드를 초기화한다
     * @param memberId 회원의 순번 (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 패스워드 초기화된 회원정보 반환 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 장부사가 관리자 패스워드를 초기화하는경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 장부사가 다른장부사 계정의 정보를 수정하는경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> memberControllerResetPasswordWithIdEmailWithHttpInfo(BigDecimal memberId) throws ApiException {
        okhttp3.Call localVarCall = memberControllerResetPasswordWithIdEmailValidateBeforeCall(memberId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 로그인 패스워드 초기화 (asynchronously)
     * 아이디+이메일 조합으로 패스워드를 초기화한다
     * @param memberId 회원의 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 패스워드 초기화된 회원정보 반환 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 장부사가 관리자 패스워드를 초기화하는경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 장부사가 다른장부사 계정의 정보를 수정하는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerResetPasswordWithIdEmailAsync(BigDecimal memberId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerResetPasswordWithIdEmailValidateBeforeCall(memberId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerSaveUserRoleGroup
     * @param userId 계정의 순번 (required)
     * @param roleGroupCode 계좌코드 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 계정정보륿 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 게정이 존재하지 않거나 특정 권한그룹목록이 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 권한그룹이 활성화되어있지 않거나 계정과 권한그룹의 레벨이 다른경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerSaveUserRoleGroupCall(BigDecimal userId, String roleGroupCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/member/{userId}/role/{roleGroupCode}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "roleGroupCode" + "\\}", localVarApiClient.escapeString(roleGroupCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerSaveUserRoleGroupValidateBeforeCall(BigDecimal userId, String roleGroupCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling memberControllerSaveUserRoleGroup(Async)");
        }
        
        // verify the required parameter 'roleGroupCode' is set
        if (roleGroupCode == null) {
            throw new ApiException("Missing the required parameter 'roleGroupCode' when calling memberControllerSaveUserRoleGroup(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerSaveUserRoleGroupCall(userId, roleGroupCode, _callback);
        return localVarCall;

    }

    /**
     * 계정의 권한그룹 저장
     * 특정 계정의 권한그룹을 저장한다
     * @param userId 계정의 순번 (required)
     * @param roleGroupCode 계좌코드 순번 (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 계정정보륿 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 게정이 존재하지 않거나 특정 권한그룹목록이 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 권한그룹이 활성화되어있지 않거나 계정과 권한그룹의 레벨이 다른경우 </td><td>  -  </td></tr>
     </table>
     */
    public User memberControllerSaveUserRoleGroup(BigDecimal userId, String roleGroupCode) throws ApiException {
        ApiResponse<User> localVarResp = memberControllerSaveUserRoleGroupWithHttpInfo(userId, roleGroupCode);
        return localVarResp.getData();
    }

    /**
     * 계정의 권한그룹 저장
     * 특정 계정의 권한그룹을 저장한다
     * @param userId 계정의 순번 (required)
     * @param roleGroupCode 계좌코드 순번 (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 계정정보륿 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 게정이 존재하지 않거나 특정 권한그룹목록이 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 권한그룹이 활성화되어있지 않거나 계정과 권한그룹의 레벨이 다른경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> memberControllerSaveUserRoleGroupWithHttpInfo(BigDecimal userId, String roleGroupCode) throws ApiException {
        okhttp3.Call localVarCall = memberControllerSaveUserRoleGroupValidateBeforeCall(userId, roleGroupCode, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 계정의 권한그룹 저장 (asynchronously)
     * 특정 계정의 권한그룹을 저장한다
     * @param userId 계정의 순번 (required)
     * @param roleGroupCode 계좌코드 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 계정정보륿 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 게정이 존재하지 않거나 특정 권한그룹목록이 존재하지 않는경우 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 권한그룹이 활성화되어있지 않거나 계정과 권한그룹의 레벨이 다른경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerSaveUserRoleGroupAsync(BigDecimal userId, String roleGroupCode, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerSaveUserRoleGroupValidateBeforeCall(userId, roleGroupCode, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for memberControllerUpdateMember
     * @param userId 회원의 순번 (required)
     * @param updateMemberInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 계정정보륿 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerUpdateMemberCall(BigDecimal userId, UpdateMemberInput updateMemberInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateMemberInput;

        // create path and map variables
        String localVarPath = "/public/api/member/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call memberControllerUpdateMemberValidateBeforeCall(BigDecimal userId, UpdateMemberInput updateMemberInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling memberControllerUpdateMember(Async)");
        }
        
        // verify the required parameter 'updateMemberInput' is set
        if (updateMemberInput == null) {
            throw new ApiException("Missing the required parameter 'updateMemberInput' when calling memberControllerUpdateMember(Async)");
        }
        

        okhttp3.Call localVarCall = memberControllerUpdateMemberCall(userId, updateMemberInput, _callback);
        return localVarCall;

    }

    /**
     * 계정 수정
     * 계정을 수정한다
     * @param userId 회원의 순번 (required)
     * @param updateMemberInput  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 계정정보륿 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public User memberControllerUpdateMember(BigDecimal userId, UpdateMemberInput updateMemberInput) throws ApiException {
        ApiResponse<User> localVarResp = memberControllerUpdateMemberWithHttpInfo(userId, updateMemberInput);
        return localVarResp.getData();
    }

    /**
     * 계정 수정
     * 계정을 수정한다
     * @param userId 회원의 순번 (required)
     * @param updateMemberInput  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 계정정보륿 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> memberControllerUpdateMemberWithHttpInfo(BigDecimal userId, UpdateMemberInput updateMemberInput) throws ApiException {
        okhttp3.Call localVarCall = memberControllerUpdateMemberValidateBeforeCall(userId, updateMemberInput, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 계정 수정 (asynchronously)
     * 계정을 수정한다
     * @param userId 회원의 순번 (required)
     * @param updateMemberInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 계정정보륿 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 id의 회원이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call memberControllerUpdateMemberAsync(BigDecimal userId, UpdateMemberInput updateMemberInput, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = memberControllerUpdateMemberValidateBeforeCall(userId, updateMemberInput, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mobileAppControllerGetAppVersions
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param osType OS유형 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 앱 버전 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerGetAppVersionsCall(BigDecimal page, BigDecimal limit, String route, String active, OsType osType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/app/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (osType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("osType", osType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mobileAppControllerGetAppVersionsValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, String active, OsType osType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling mobileAppControllerGetAppVersions(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling mobileAppControllerGetAppVersions(Async)");
        }
        

        okhttp3.Call localVarCall = mobileAppControllerGetAppVersionsCall(page, limit, route, active, osType, _callback);
        return localVarCall;

    }

    /**
     * 앱 버전 목록 검색 (관리자 전용)
     * 앱 버전 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param osType OS유형 (optional)
     * @return GetAppVersionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 앱 버전 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public GetAppVersionsOutput mobileAppControllerGetAppVersions(BigDecimal page, BigDecimal limit, String route, String active, OsType osType) throws ApiException {
        ApiResponse<GetAppVersionsOutput> localVarResp = mobileAppControllerGetAppVersionsWithHttpInfo(page, limit, route, active, osType);
        return localVarResp.getData();
    }

    /**
     * 앱 버전 목록 검색 (관리자 전용)
     * 앱 버전 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param osType OS유형 (optional)
     * @return ApiResponse&lt;GetAppVersionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 앱 버전 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAppVersionsOutput> mobileAppControllerGetAppVersionsWithHttpInfo(BigDecimal page, BigDecimal limit, String route, String active, OsType osType) throws ApiException {
        okhttp3.Call localVarCall = mobileAppControllerGetAppVersionsValidateBeforeCall(page, limit, route, active, osType, null);
        Type localVarReturnType = new TypeToken<GetAppVersionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 앱 버전 목록 검색 (관리자 전용) (asynchronously)
     * 앱 버전 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param osType OS유형 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 앱 버전 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerGetAppVersionsAsync(BigDecimal page, BigDecimal limit, String route, String active, OsType osType, final ApiCallback<GetAppVersionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mobileAppControllerGetAppVersionsValidateBeforeCall(page, limit, route, active, osType, _callback);
        Type localVarReturnType = new TypeToken<GetAppVersionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mobileAppControllerGetJangbuMessage
     * @param jangbuId  (required)
     * @param messageId 메시지 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : (특정 장부사의) 메시지 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 메시지가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerGetJangbuMessageCall(BigDecimal jangbuId, BigDecimal messageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/app/jangbu/{jangbuId}/message/{messageId}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "messageId" + "\\}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mobileAppControllerGetJangbuMessageValidateBeforeCall(BigDecimal jangbuId, BigDecimal messageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling mobileAppControllerGetJangbuMessage(Async)");
        }
        
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling mobileAppControllerGetJangbuMessage(Async)");
        }
        

        okhttp3.Call localVarCall = mobileAppControllerGetJangbuMessageCall(jangbuId, messageId, _callback);
        return localVarCall;

    }

    /**
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     * (특정 장부사의) 특정 메시지를 조회한다
     * @param jangbuId  (required)
     * @param messageId 메시지 순번 (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : (특정 장부사의) 메시지 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 메시지가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public Message mobileAppControllerGetJangbuMessage(BigDecimal jangbuId, BigDecimal messageId) throws ApiException {
        ApiResponse<Message> localVarResp = mobileAppControllerGetJangbuMessageWithHttpInfo(jangbuId, messageId);
        return localVarResp.getData();
    }

    /**
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     * (특정 장부사의) 특정 메시지를 조회한다
     * @param jangbuId  (required)
     * @param messageId 메시지 순번 (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : (특정 장부사의) 메시지 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 메시지가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Message> mobileAppControllerGetJangbuMessageWithHttpInfo(BigDecimal jangbuId, BigDecimal messageId) throws ApiException {
        okhttp3.Call localVarCall = mobileAppControllerGetJangbuMessageValidateBeforeCall(jangbuId, messageId, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용) (asynchronously)
     * (특정 장부사의) 특정 메시지를 조회한다
     * @param jangbuId  (required)
     * @param messageId 메시지 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : (특정 장부사의) 메시지 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 메시지가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerGetJangbuMessageAsync(BigDecimal jangbuId, BigDecimal messageId, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = mobileAppControllerGetJangbuMessageValidateBeforeCall(jangbuId, messageId, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mobileAppControllerGetJangbuMessages
     * @param jangbuId  (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 기간 시작일자(YYYYMMDD) (required)
     * @param endAt 기간 종료일자(YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : (특정 장부사의) 메시지 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerGetJangbuMessagesCall(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/app/jangbu/{jangbuId}/message"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (endAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAt", endAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mobileAppControllerGetJangbuMessagesValidateBeforeCall(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling mobileAppControllerGetJangbuMessages(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling mobileAppControllerGetJangbuMessages(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling mobileAppControllerGetJangbuMessages(Async)");
        }
        
        // verify the required parameter 'startAt' is set
        if (startAt == null) {
            throw new ApiException("Missing the required parameter 'startAt' when calling mobileAppControllerGetJangbuMessages(Async)");
        }
        
        // verify the required parameter 'endAt' is set
        if (endAt == null) {
            throw new ApiException("Missing the required parameter 'endAt' when calling mobileAppControllerGetJangbuMessages(Async)");
        }
        

        okhttp3.Call localVarCall = mobileAppControllerGetJangbuMessagesCall(jangbuId, page, limit, startAt, endAt, route, _callback);
        return localVarCall;

    }

    /**
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     * (특정 장부사의) 메시지 목록을 검색한다
     * @param jangbuId  (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 기간 시작일자(YYYYMMDD) (required)
     * @param endAt 기간 종료일자(YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @return GetJangbuMessagesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : (특정 장부사의) 메시지 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public GetJangbuMessagesOutput mobileAppControllerGetJangbuMessages(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route) throws ApiException {
        ApiResponse<GetJangbuMessagesOutput> localVarResp = mobileAppControllerGetJangbuMessagesWithHttpInfo(jangbuId, page, limit, startAt, endAt, route);
        return localVarResp.getData();
    }

    /**
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     * (특정 장부사의) 메시지 목록을 검색한다
     * @param jangbuId  (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 기간 시작일자(YYYYMMDD) (required)
     * @param endAt 기간 종료일자(YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @return ApiResponse&lt;GetJangbuMessagesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : (특정 장부사의) 메시지 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetJangbuMessagesOutput> mobileAppControllerGetJangbuMessagesWithHttpInfo(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route) throws ApiException {
        okhttp3.Call localVarCall = mobileAppControllerGetJangbuMessagesValidateBeforeCall(jangbuId, page, limit, startAt, endAt, route, null);
        Type localVarReturnType = new TypeToken<GetJangbuMessagesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용) (asynchronously)
     * (특정 장부사의) 메시지 목록을 검색한다
     * @param jangbuId  (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 기간 시작일자(YYYYMMDD) (required)
     * @param endAt 기간 종료일자(YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : (특정 장부사의) 메시지 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerGetJangbuMessagesAsync(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, final ApiCallback<GetJangbuMessagesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = mobileAppControllerGetJangbuMessagesValidateBeforeCall(jangbuId, page, limit, startAt, endAt, route, _callback);
        Type localVarReturnType = new TypeToken<GetJangbuMessagesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mobileAppControllerGetUsingAppUsers
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param osType OS유형 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 앱 사용자 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerGetUsingAppUsersCall(BigDecimal page, BigDecimal limit, String route, String active, OsType osType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/app/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (osType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("osType", osType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mobileAppControllerGetUsingAppUsersValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, String active, OsType osType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling mobileAppControllerGetUsingAppUsers(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling mobileAppControllerGetUsingAppUsers(Async)");
        }
        

        okhttp3.Call localVarCall = mobileAppControllerGetUsingAppUsersCall(page, limit, route, active, osType, _callback);
        return localVarCall;

    }

    /**
     * 앱 사용자 목록 검색 (관리자 전용)
     * 앱 사용자 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param osType OS유형 (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 앱 사용자 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public Object mobileAppControllerGetUsingAppUsers(BigDecimal page, BigDecimal limit, String route, String active, OsType osType) throws ApiException {
        ApiResponse<Object> localVarResp = mobileAppControllerGetUsingAppUsersWithHttpInfo(page, limit, route, active, osType);
        return localVarResp.getData();
    }

    /**
     * 앱 사용자 목록 검색 (관리자 전용)
     * 앱 사용자 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param osType OS유형 (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 앱 사용자 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> mobileAppControllerGetUsingAppUsersWithHttpInfo(BigDecimal page, BigDecimal limit, String route, String active, OsType osType) throws ApiException {
        okhttp3.Call localVarCall = mobileAppControllerGetUsingAppUsersValidateBeforeCall(page, limit, route, active, osType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 앱 사용자 목록 검색 (관리자 전용) (asynchronously)
     * 앱 사용자 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param osType OS유형 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 앱 사용자 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerGetUsingAppUsersAsync(BigDecimal page, BigDecimal limit, String route, String active, OsType osType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = mobileAppControllerGetUsingAppUsersValidateBeforeCall(page, limit, route, active, osType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mobileAppControllerRegisterAppVersion
     * @param registerAppVersionInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 앱 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> 해당 OS의 버전이 이미 존재하는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerRegisterAppVersionCall(RegisterAppVersionInput registerAppVersionInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerAppVersionInput;

        // create path and map variables
        String localVarPath = "/public/api/app/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mobileAppControllerRegisterAppVersionValidateBeforeCall(RegisterAppVersionInput registerAppVersionInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerAppVersionInput' is set
        if (registerAppVersionInput == null) {
            throw new ApiException("Missing the required parameter 'registerAppVersionInput' when calling mobileAppControllerRegisterAppVersion(Async)");
        }
        

        okhttp3.Call localVarCall = mobileAppControllerRegisterAppVersionCall(registerAppVersionInput, _callback);
        return localVarCall;

    }

    /**
     * 앱 버전 등록 (관리자 전용)
     * 앱 버전을 등록한다
     * @param registerAppVersionInput  (required)
     * @return AppVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 앱 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> 해당 OS의 버전이 이미 존재하는경우 </td><td>  -  </td></tr>
     </table>
     */
    public AppVersion mobileAppControllerRegisterAppVersion(RegisterAppVersionInput registerAppVersionInput) throws ApiException {
        ApiResponse<AppVersion> localVarResp = mobileAppControllerRegisterAppVersionWithHttpInfo(registerAppVersionInput);
        return localVarResp.getData();
    }

    /**
     * 앱 버전 등록 (관리자 전용)
     * 앱 버전을 등록한다
     * @param registerAppVersionInput  (required)
     * @return ApiResponse&lt;AppVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 앱 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> 해당 OS의 버전이 이미 존재하는경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppVersion> mobileAppControllerRegisterAppVersionWithHttpInfo(RegisterAppVersionInput registerAppVersionInput) throws ApiException {
        okhttp3.Call localVarCall = mobileAppControllerRegisterAppVersionValidateBeforeCall(registerAppVersionInput, null);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 앱 버전 등록 (관리자 전용) (asynchronously)
     * 앱 버전을 등록한다
     * @param registerAppVersionInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 앱 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> 해당 OS의 버전이 이미 존재하는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerRegisterAppVersionAsync(RegisterAppVersionInput registerAppVersionInput, final ApiCallback<AppVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = mobileAppControllerRegisterAppVersionValidateBeforeCall(registerAppVersionInput, _callback);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mobileAppControllerUpdateAppVersion
     * @param versionId 버전 순번 (required)
     * @param updateAppVersionInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 앱 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> 해당 OS의 버전이 이미 존재하는경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 앱 버전이 존재하지 않는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerUpdateAppVersionCall(BigDecimal versionId, UpdateAppVersionInput updateAppVersionInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateAppVersionInput;

        // create path and map variables
        String localVarPath = "/public/api/app/version/{versionId}"
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mobileAppControllerUpdateAppVersionValidateBeforeCall(BigDecimal versionId, UpdateAppVersionInput updateAppVersionInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling mobileAppControllerUpdateAppVersion(Async)");
        }
        
        // verify the required parameter 'updateAppVersionInput' is set
        if (updateAppVersionInput == null) {
            throw new ApiException("Missing the required parameter 'updateAppVersionInput' when calling mobileAppControllerUpdateAppVersion(Async)");
        }
        

        okhttp3.Call localVarCall = mobileAppControllerUpdateAppVersionCall(versionId, updateAppVersionInput, _callback);
        return localVarCall;

    }

    /**
     * 앱 버전 수정 (관리자 전용)
     * 앱 버전을 수정한다
     * @param versionId 버전 순번 (required)
     * @param updateAppVersionInput  (required)
     * @return AppVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 앱 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> 해당 OS의 버전이 이미 존재하는경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 앱 버전이 존재하지 않는경우 </td><td>  -  </td></tr>
     </table>
     */
    public AppVersion mobileAppControllerUpdateAppVersion(BigDecimal versionId, UpdateAppVersionInput updateAppVersionInput) throws ApiException {
        ApiResponse<AppVersion> localVarResp = mobileAppControllerUpdateAppVersionWithHttpInfo(versionId, updateAppVersionInput);
        return localVarResp.getData();
    }

    /**
     * 앱 버전 수정 (관리자 전용)
     * 앱 버전을 수정한다
     * @param versionId 버전 순번 (required)
     * @param updateAppVersionInput  (required)
     * @return ApiResponse&lt;AppVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 앱 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> 해당 OS의 버전이 이미 존재하는경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 앱 버전이 존재하지 않는경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppVersion> mobileAppControllerUpdateAppVersionWithHttpInfo(BigDecimal versionId, UpdateAppVersionInput updateAppVersionInput) throws ApiException {
        okhttp3.Call localVarCall = mobileAppControllerUpdateAppVersionValidateBeforeCall(versionId, updateAppVersionInput, null);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 앱 버전 수정 (관리자 전용) (asynchronously)
     * 앱 버전을 수정한다
     * @param versionId 버전 순번 (required)
     * @param updateAppVersionInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 앱 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> 해당 OS의 버전이 이미 존재하는경우 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 앱 버전이 존재하지 않는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobileAppControllerUpdateAppVersionAsync(BigDecimal versionId, UpdateAppVersionInput updateAppVersionInput, final ApiCallback<AppVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = mobileAppControllerUpdateAppVersionValidateBeforeCall(versionId, updateAppVersionInput, _callback);
        Type localVarReturnType = new TypeToken<AppVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for noticeControllerDeleteNotice
     * @param noticeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 삭제된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerDeleteNoticeCall(BigDecimal noticeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/notice/{noticeId}"
            .replaceAll("\\{" + "noticeId" + "\\}", localVarApiClient.escapeString(noticeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call noticeControllerDeleteNoticeValidateBeforeCall(BigDecimal noticeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'noticeId' is set
        if (noticeId == null) {
            throw new ApiException("Missing the required parameter 'noticeId' when calling noticeControllerDeleteNotice(Async)");
        }
        

        okhttp3.Call localVarCall = noticeControllerDeleteNoticeCall(noticeId, _callback);
        return localVarCall;

    }

    /**
     * 공지사항 삭제 (관리자 전용)
     * 공지사항을 삭제한다
     * @param noticeId  (required)
     * @return Notice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 삭제된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
     </table>
     */
    public Notice noticeControllerDeleteNotice(BigDecimal noticeId) throws ApiException {
        ApiResponse<Notice> localVarResp = noticeControllerDeleteNoticeWithHttpInfo(noticeId);
        return localVarResp.getData();
    }

    /**
     * 공지사항 삭제 (관리자 전용)
     * 공지사항을 삭제한다
     * @param noticeId  (required)
     * @return ApiResponse&lt;Notice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 삭제된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notice> noticeControllerDeleteNoticeWithHttpInfo(BigDecimal noticeId) throws ApiException {
        okhttp3.Call localVarCall = noticeControllerDeleteNoticeValidateBeforeCall(noticeId, null);
        Type localVarReturnType = new TypeToken<Notice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 공지사항 삭제 (관리자 전용) (asynchronously)
     * 공지사항을 삭제한다
     * @param noticeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 삭제된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerDeleteNoticeAsync(BigDecimal noticeId, final ApiCallback<Notice> _callback) throws ApiException {

        okhttp3.Call localVarCall = noticeControllerDeleteNoticeValidateBeforeCall(noticeId, _callback);
        Type localVarReturnType = new TypeToken<Notice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for noticeControllerGetNotice
     * @param noticeId 공지사항 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 공지사항 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 공지사항을 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerGetNoticeCall(BigDecimal noticeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/notice/{noticeId}"
            .replaceAll("\\{" + "noticeId" + "\\}", localVarApiClient.escapeString(noticeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call noticeControllerGetNoticeValidateBeforeCall(BigDecimal noticeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'noticeId' is set
        if (noticeId == null) {
            throw new ApiException("Missing the required parameter 'noticeId' when calling noticeControllerGetNotice(Async)");
        }
        

        okhttp3.Call localVarCall = noticeControllerGetNoticeCall(noticeId, _callback);
        return localVarCall;

    }

    /**
     * 공지사항 조회 (관리자, 장부사 전용)
     * 특정 공지사항을 조회한다
     * @param noticeId 공지사항 순번 (required)
     * @return Notice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 공지사항 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 공지사항을 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public Notice noticeControllerGetNotice(BigDecimal noticeId) throws ApiException {
        ApiResponse<Notice> localVarResp = noticeControllerGetNoticeWithHttpInfo(noticeId);
        return localVarResp.getData();
    }

    /**
     * 공지사항 조회 (관리자, 장부사 전용)
     * 특정 공지사항을 조회한다
     * @param noticeId 공지사항 순번 (required)
     * @return ApiResponse&lt;Notice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 공지사항 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 공지사항을 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notice> noticeControllerGetNoticeWithHttpInfo(BigDecimal noticeId) throws ApiException {
        okhttp3.Call localVarCall = noticeControllerGetNoticeValidateBeforeCall(noticeId, null);
        Type localVarReturnType = new TypeToken<Notice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 공지사항 조회 (관리자, 장부사 전용) (asynchronously)
     * 특정 공지사항을 조회한다
     * @param noticeId 공지사항 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 공지사항 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 공지사항을 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerGetNoticeAsync(BigDecimal noticeId, final ApiCallback<Notice> _callback) throws ApiException {

        okhttp3.Call localVarCall = noticeControllerGetNoticeValidateBeforeCall(noticeId, _callback);
        Type localVarReturnType = new TypeToken<Notice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for noticeControllerGetNotices
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 공지사항 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 잘못된 검색옵션의 입력 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerGetNoticesCall(BigDecimal page, BigDecimal limit, String route, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/notice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call noticeControllerGetNoticesValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling noticeControllerGetNotices(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling noticeControllerGetNotices(Async)");
        }
        

        okhttp3.Call localVarCall = noticeControllerGetNoticesCall(page, limit, route, _callback);
        return localVarCall;

    }

    /**
     * 공지사항 검색 (관리자, 장부사 전용)
     * 공지사항 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @return GetNotices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 공지사항 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 잘못된 검색옵션의 입력 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간) </td><td>  -  </td></tr>
     </table>
     */
    public GetNotices noticeControllerGetNotices(BigDecimal page, BigDecimal limit, String route) throws ApiException {
        ApiResponse<GetNotices> localVarResp = noticeControllerGetNoticesWithHttpInfo(page, limit, route);
        return localVarResp.getData();
    }

    /**
     * 공지사항 검색 (관리자, 장부사 전용)
     * 공지사항 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @return ApiResponse&lt;GetNotices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 공지사항 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 잘못된 검색옵션의 입력 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNotices> noticeControllerGetNoticesWithHttpInfo(BigDecimal page, BigDecimal limit, String route) throws ApiException {
        okhttp3.Call localVarCall = noticeControllerGetNoticesValidateBeforeCall(page, limit, route, null);
        Type localVarReturnType = new TypeToken<GetNotices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 공지사항 검색 (관리자, 장부사 전용) (asynchronously)
     * 공지사항 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 공지사항 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 잘못된 검색옵션의 입력 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증실패 (엑세스 토큰의 유무, 유효기간) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerGetNoticesAsync(BigDecimal page, BigDecimal limit, String route, final ApiCallback<GetNotices> _callback) throws ApiException {

        okhttp3.Call localVarCall = noticeControllerGetNoticesValidateBeforeCall(page, limit, route, _callback);
        Type localVarReturnType = new TypeToken<GetNotices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for noticeControllerRegisterNotice
     * @param registerNoticeInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerRegisterNoticeCall(RegisterNoticeInput registerNoticeInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerNoticeInput;

        // create path and map variables
        String localVarPath = "/public/api/notice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call noticeControllerRegisterNoticeValidateBeforeCall(RegisterNoticeInput registerNoticeInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerNoticeInput' is set
        if (registerNoticeInput == null) {
            throw new ApiException("Missing the required parameter 'registerNoticeInput' when calling noticeControllerRegisterNotice(Async)");
        }
        

        okhttp3.Call localVarCall = noticeControllerRegisterNoticeCall(registerNoticeInput, _callback);
        return localVarCall;

    }

    /**
     * 공지사항 등록 (관리자 전용)
     * 공지사항을 등록한다
     * @param registerNoticeInput  (required)
     * @return Notice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
     </table>
     */
    public Notice noticeControllerRegisterNotice(RegisterNoticeInput registerNoticeInput) throws ApiException {
        ApiResponse<Notice> localVarResp = noticeControllerRegisterNoticeWithHttpInfo(registerNoticeInput);
        return localVarResp.getData();
    }

    /**
     * 공지사항 등록 (관리자 전용)
     * 공지사항을 등록한다
     * @param registerNoticeInput  (required)
     * @return ApiResponse&lt;Notice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notice> noticeControllerRegisterNoticeWithHttpInfo(RegisterNoticeInput registerNoticeInput) throws ApiException {
        okhttp3.Call localVarCall = noticeControllerRegisterNoticeValidateBeforeCall(registerNoticeInput, null);
        Type localVarReturnType = new TypeToken<Notice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 공지사항 등록 (관리자 전용) (asynchronously)
     * 공지사항을 등록한다
     * @param registerNoticeInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerRegisterNoticeAsync(RegisterNoticeInput registerNoticeInput, final ApiCallback<Notice> _callback) throws ApiException {

        okhttp3.Call localVarCall = noticeControllerRegisterNoticeValidateBeforeCall(registerNoticeInput, _callback);
        Type localVarReturnType = new TypeToken<Notice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for noticeControllerUpdateNotice
     * @param noticeId 공지사항 순번 (required)
     * @param registerNoticeInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 공지사항을 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerUpdateNoticeCall(BigDecimal noticeId, RegisterNoticeInput registerNoticeInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerNoticeInput;

        // create path and map variables
        String localVarPath = "/public/api/notice/{noticeId}"
            .replaceAll("\\{" + "noticeId" + "\\}", localVarApiClient.escapeString(noticeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call noticeControllerUpdateNoticeValidateBeforeCall(BigDecimal noticeId, RegisterNoticeInput registerNoticeInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'noticeId' is set
        if (noticeId == null) {
            throw new ApiException("Missing the required parameter 'noticeId' when calling noticeControllerUpdateNotice(Async)");
        }
        
        // verify the required parameter 'registerNoticeInput' is set
        if (registerNoticeInput == null) {
            throw new ApiException("Missing the required parameter 'registerNoticeInput' when calling noticeControllerUpdateNotice(Async)");
        }
        

        okhttp3.Call localVarCall = noticeControllerUpdateNoticeCall(noticeId, registerNoticeInput, _callback);
        return localVarCall;

    }

    /**
     * 공지사항 수정 (관리자 전용)
     * 공지사항을 수정한다
     * @param noticeId 공지사항 순번 (required)
     * @param registerNoticeInput  (required)
     * @return Notice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 공지사항을 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public Notice noticeControllerUpdateNotice(BigDecimal noticeId, RegisterNoticeInput registerNoticeInput) throws ApiException {
        ApiResponse<Notice> localVarResp = noticeControllerUpdateNoticeWithHttpInfo(noticeId, registerNoticeInput);
        return localVarResp.getData();
    }

    /**
     * 공지사항 수정 (관리자 전용)
     * 공지사항을 수정한다
     * @param noticeId 공지사항 순번 (required)
     * @param registerNoticeInput  (required)
     * @return ApiResponse&lt;Notice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 공지사항을 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notice> noticeControllerUpdateNoticeWithHttpInfo(BigDecimal noticeId, RegisterNoticeInput registerNoticeInput) throws ApiException {
        okhttp3.Call localVarCall = noticeControllerUpdateNoticeValidateBeforeCall(noticeId, registerNoticeInput, null);
        Type localVarReturnType = new TypeToken<Notice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 공지사항 수정 (관리자 전용) (asynchronously)
     * 공지사항을 수정한다
     * @param noticeId 공지사항 순번 (required)
     * @param registerNoticeInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 공지사항을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 요청 파라미터 오류 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 실패 : 인증 실패 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 공지사항을 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call noticeControllerUpdateNoticeAsync(BigDecimal noticeId, RegisterNoticeInput registerNoticeInput, final ApiCallback<Notice> _callback) throws ApiException {

        okhttp3.Call localVarCall = noticeControllerUpdateNoticeValidateBeforeCall(noticeId, registerNoticeInput, _callback);
        Type localVarReturnType = new TypeToken<Notice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleControllerGetRoles
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param userLevel 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param active 활성 여부(0: 비활성, 1: 활성) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 권한목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 실패 : 권한이 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleControllerGetRolesCall(BigDecimal page, BigDecimal limit, String route, BigDecimal userLevel, String active, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (userLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userLevel", userLevel));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleControllerGetRolesValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, BigDecimal userLevel, String active, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling roleControllerGetRoles(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling roleControllerGetRoles(Async)");
        }
        

        okhttp3.Call localVarCall = roleControllerGetRolesCall(page, limit, route, userLevel, active, _callback);
        return localVarCall;

    }

    /**
     * 권한 목록 검색 (관리자, 장부사 전용)
     * 권한 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param userLevel 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param active 활성 여부(0: 비활성, 1: 활성) (optional)
     * @return SearchRoleGroupOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 권한목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 실패 : 권한이 없음 </td><td>  -  </td></tr>
     </table>
     */
    public SearchRoleGroupOutput roleControllerGetRoles(BigDecimal page, BigDecimal limit, String route, BigDecimal userLevel, String active) throws ApiException {
        ApiResponse<SearchRoleGroupOutput> localVarResp = roleControllerGetRolesWithHttpInfo(page, limit, route, userLevel, active);
        return localVarResp.getData();
    }

    /**
     * 권한 목록 검색 (관리자, 장부사 전용)
     * 권한 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param userLevel 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param active 활성 여부(0: 비활성, 1: 활성) (optional)
     * @return ApiResponse&lt;SearchRoleGroupOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 권한목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 실패 : 권한이 없음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchRoleGroupOutput> roleControllerGetRolesWithHttpInfo(BigDecimal page, BigDecimal limit, String route, BigDecimal userLevel, String active) throws ApiException {
        okhttp3.Call localVarCall = roleControllerGetRolesValidateBeforeCall(page, limit, route, userLevel, active, null);
        Type localVarReturnType = new TypeToken<SearchRoleGroupOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 권한 목록 검색 (관리자, 장부사 전용) (asynchronously)
     * 권한 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param userLevel 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param active 활성 여부(0: 비활성, 1: 활성) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 권한목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 실패 : 권한이 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleControllerGetRolesAsync(BigDecimal page, BigDecimal limit, String route, BigDecimal userLevel, String active, final ApiCallback<SearchRoleGroupOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleControllerGetRolesValidateBeforeCall(page, limit, route, userLevel, active, _callback);
        Type localVarReturnType = new TypeToken<SearchRoleGroupOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleControllerRegisterRole
     * @param createRoleGroupInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 권한을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 권한 목록 중 중복되는 값 존재 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 그룹명 또는 그룹 권한 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleControllerRegisterRoleCall(CreateRoleGroupInput createRoleGroupInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createRoleGroupInput;

        // create path and map variables
        String localVarPath = "/public/api/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleControllerRegisterRoleValidateBeforeCall(CreateRoleGroupInput createRoleGroupInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createRoleGroupInput' is set
        if (createRoleGroupInput == null) {
            throw new ApiException("Missing the required parameter 'createRoleGroupInput' when calling roleControllerRegisterRole(Async)");
        }
        

        okhttp3.Call localVarCall = roleControllerRegisterRoleCall(createRoleGroupInput, _callback);
        return localVarCall;

    }

    /**
     * 권한 등록 (관리자 전용)
     * 권한을 등록한다
     * @param createRoleGroupInput  (required)
     * @return RoleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 권한을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 권한 목록 중 중복되는 값 존재 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 그룹명 또는 그룹 권한 </td><td>  -  </td></tr>
     </table>
     */
    public RoleGroup roleControllerRegisterRole(CreateRoleGroupInput createRoleGroupInput) throws ApiException {
        ApiResponse<RoleGroup> localVarResp = roleControllerRegisterRoleWithHttpInfo(createRoleGroupInput);
        return localVarResp.getData();
    }

    /**
     * 권한 등록 (관리자 전용)
     * 권한을 등록한다
     * @param createRoleGroupInput  (required)
     * @return ApiResponse&lt;RoleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 권한을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 권한 목록 중 중복되는 값 존재 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 그룹명 또는 그룹 권한 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleGroup> roleControllerRegisterRoleWithHttpInfo(CreateRoleGroupInput createRoleGroupInput) throws ApiException {
        okhttp3.Call localVarCall = roleControllerRegisterRoleValidateBeforeCall(createRoleGroupInput, null);
        Type localVarReturnType = new TypeToken<RoleGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 권한 등록 (관리자 전용) (asynchronously)
     * 권한을 등록한다
     * @param createRoleGroupInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 권한을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 권한 목록 중 중복되는 값 존재 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 그룹명 또는 그룹 권한 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleControllerRegisterRoleAsync(CreateRoleGroupInput createRoleGroupInput, final ApiCallback<RoleGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleControllerRegisterRoleValidateBeforeCall(createRoleGroupInput, _callback);
        Type localVarReturnType = new TypeToken<RoleGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleControllerUpdateRole
     * @param roleGroupCode 그룹코드명 (required)
     * @param updateRoleGroupInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 권한을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 권한 목록 중 중복되는 값 존재 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 권한 그룹을 찾을 수 없음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 그룹 권한 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleControllerUpdateRoleCall(String roleGroupCode, UpdateRoleGroupInput updateRoleGroupInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateRoleGroupInput;

        // create path and map variables
        String localVarPath = "/public/api/role/{roleGroupCode}"
            .replaceAll("\\{" + "roleGroupCode" + "\\}", localVarApiClient.escapeString(roleGroupCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleControllerUpdateRoleValidateBeforeCall(String roleGroupCode, UpdateRoleGroupInput updateRoleGroupInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleGroupCode' is set
        if (roleGroupCode == null) {
            throw new ApiException("Missing the required parameter 'roleGroupCode' when calling roleControllerUpdateRole(Async)");
        }
        
        // verify the required parameter 'updateRoleGroupInput' is set
        if (updateRoleGroupInput == null) {
            throw new ApiException("Missing the required parameter 'updateRoleGroupInput' when calling roleControllerUpdateRole(Async)");
        }
        

        okhttp3.Call localVarCall = roleControllerUpdateRoleCall(roleGroupCode, updateRoleGroupInput, _callback);
        return localVarCall;

    }

    /**
     * 권한 수정 (관리자 전용)
     * 권한을 수정한다
     * @param roleGroupCode 그룹코드명 (required)
     * @param updateRoleGroupInput  (required)
     * @return RoleGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 권한을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 권한 목록 중 중복되는 값 존재 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 권한 그룹을 찾을 수 없음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 그룹 권한 </td><td>  -  </td></tr>
     </table>
     */
    public RoleGroup roleControllerUpdateRole(String roleGroupCode, UpdateRoleGroupInput updateRoleGroupInput) throws ApiException {
        ApiResponse<RoleGroup> localVarResp = roleControllerUpdateRoleWithHttpInfo(roleGroupCode, updateRoleGroupInput);
        return localVarResp.getData();
    }

    /**
     * 권한 수정 (관리자 전용)
     * 권한을 수정한다
     * @param roleGroupCode 그룹코드명 (required)
     * @param updateRoleGroupInput  (required)
     * @return ApiResponse&lt;RoleGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 권한을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 권한 목록 중 중복되는 값 존재 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 권한 그룹을 찾을 수 없음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 그룹 권한 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleGroup> roleControllerUpdateRoleWithHttpInfo(String roleGroupCode, UpdateRoleGroupInput updateRoleGroupInput) throws ApiException {
        okhttp3.Call localVarCall = roleControllerUpdateRoleValidateBeforeCall(roleGroupCode, updateRoleGroupInput, null);
        Type localVarReturnType = new TypeToken<RoleGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 권한 수정 (관리자 전용) (asynchronously)
     * 권한을 수정한다
     * @param roleGroupCode 그룹코드명 (required)
     * @param updateRoleGroupInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 권한을 반환 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 실패 : 권한 목록 중 중복되는 값 존재 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 권한 그룹을 찾을 수 없음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 그룹 권한 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleControllerUpdateRoleAsync(String roleGroupCode, UpdateRoleGroupInput updateRoleGroupInput, final ApiCallback<RoleGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleControllerUpdateRoleValidateBeforeCall(roleGroupCode, updateRoleGroupInput, _callback);
        Type localVarReturnType = new TypeToken<RoleGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scrapingCodeControllerActivateScrapingCode
     * @param serviceId 서비스 순번 (required)
     * @param version 버전 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 활성 여부가 변경된 코드를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 버전의 코드를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scrapingCodeControllerActivateScrapingCodeCall(BigDecimal serviceId, String version, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/scraping-code/{serviceId}"
            .replaceAll("\\{" + "serviceId" + "\\}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scrapingCodeControllerActivateScrapingCodeValidateBeforeCall(BigDecimal serviceId, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling scrapingCodeControllerActivateScrapingCode(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling scrapingCodeControllerActivateScrapingCode(Async)");
        }
        

        okhttp3.Call localVarCall = scrapingCodeControllerActivateScrapingCodeCall(serviceId, version, _callback);
        return localVarCall;

    }

    /**
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     * 특정 버전 코드를 활성/비활성화 한다
     * @param serviceId 서비스 순번 (required)
     * @param version 버전 (required)
     * @return ScrapingCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 활성 여부가 변경된 코드를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 버전의 코드를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public ScrapingCode scrapingCodeControllerActivateScrapingCode(BigDecimal serviceId, String version) throws ApiException {
        ApiResponse<ScrapingCode> localVarResp = scrapingCodeControllerActivateScrapingCodeWithHttpInfo(serviceId, version);
        return localVarResp.getData();
    }

    /**
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     * 특정 버전 코드를 활성/비활성화 한다
     * @param serviceId 서비스 순번 (required)
     * @param version 버전 (required)
     * @return ApiResponse&lt;ScrapingCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 활성 여부가 변경된 코드를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 버전의 코드를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScrapingCode> scrapingCodeControllerActivateScrapingCodeWithHttpInfo(BigDecimal serviceId, String version) throws ApiException {
        okhttp3.Call localVarCall = scrapingCodeControllerActivateScrapingCodeValidateBeforeCall(serviceId, version, null);
        Type localVarReturnType = new TypeToken<ScrapingCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만) (asynchronously)
     * 특정 버전 코드를 활성/비활성화 한다
     * @param serviceId 서비스 순번 (required)
     * @param version 버전 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 활성 여부가 변경된 코드를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 해당 버전의 코드를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scrapingCodeControllerActivateScrapingCodeAsync(BigDecimal serviceId, String version, final ApiCallback<ScrapingCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = scrapingCodeControllerActivateScrapingCodeValidateBeforeCall(serviceId, version, _callback);
        Type localVarReturnType = new TypeToken<ScrapingCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scrapingCodeControllerGetScrapingCodes
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 스크랩핑 코드 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scrapingCodeControllerGetScrapingCodesCall(BigDecimal page, BigDecimal limit, String route, BigDecimal serviceId, String active, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/scraping-code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scrapingCodeControllerGetScrapingCodesValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, BigDecimal serviceId, String active, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling scrapingCodeControllerGetScrapingCodes(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling scrapingCodeControllerGetScrapingCodes(Async)");
        }
        

        okhttp3.Call localVarCall = scrapingCodeControllerGetScrapingCodesCall(page, limit, route, serviceId, active, _callback);
        return localVarCall;

    }

    /**
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     * 스크래핑 코드목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     * @return GetScrapingCodesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 스크랩핑 코드 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public GetScrapingCodesOutput scrapingCodeControllerGetScrapingCodes(BigDecimal page, BigDecimal limit, String route, BigDecimal serviceId, String active) throws ApiException {
        ApiResponse<GetScrapingCodesOutput> localVarResp = scrapingCodeControllerGetScrapingCodesWithHttpInfo(page, limit, route, serviceId, active);
        return localVarResp.getData();
    }

    /**
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     * 스크래핑 코드목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     * @return ApiResponse&lt;GetScrapingCodesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 스크랩핑 코드 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetScrapingCodesOutput> scrapingCodeControllerGetScrapingCodesWithHttpInfo(BigDecimal page, BigDecimal limit, String route, BigDecimal serviceId, String active) throws ApiException {
        okhttp3.Call localVarCall = scrapingCodeControllerGetScrapingCodesValidateBeforeCall(page, limit, route, serviceId, active, null);
        Type localVarReturnType = new TypeToken<GetScrapingCodesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만) (asynchronously)
     * 스크래핑 코드목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 스크랩핑 코드 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scrapingCodeControllerGetScrapingCodesAsync(BigDecimal page, BigDecimal limit, String route, BigDecimal serviceId, String active, final ApiCallback<GetScrapingCodesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = scrapingCodeControllerGetScrapingCodesValidateBeforeCall(page, limit, route, serviceId, active, _callback);
        Type localVarReturnType = new TypeToken<GetScrapingCodesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scrapingCodeControllerRegisterScrapingCodeVersion
     * @param registerScrapingCodeVersionInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 스크랩핑 코드 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 버전 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 실패 : 스크래핑 코드 업로드 중 오류 발생 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scrapingCodeControllerRegisterScrapingCodeVersionCall(RegisterScrapingCodeVersionInput registerScrapingCodeVersionInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerScrapingCodeVersionInput;

        // create path and map variables
        String localVarPath = "/public/api/scraping-code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scrapingCodeControllerRegisterScrapingCodeVersionValidateBeforeCall(RegisterScrapingCodeVersionInput registerScrapingCodeVersionInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerScrapingCodeVersionInput' is set
        if (registerScrapingCodeVersionInput == null) {
            throw new ApiException("Missing the required parameter 'registerScrapingCodeVersionInput' when calling scrapingCodeControllerRegisterScrapingCodeVersion(Async)");
        }
        

        okhttp3.Call localVarCall = scrapingCodeControllerRegisterScrapingCodeVersionCall(registerScrapingCodeVersionInput, _callback);
        return localVarCall;

    }

    /**
     * 스크래핑 코드 버전 등록 (Github Action &gt;&gt; Amazon SNS)
     * 스크래핑 코드버전을 등록한다
     * @param registerScrapingCodeVersionInput  (required)
     * @return ScrapingCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 스크랩핑 코드 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 버전 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 실패 : 스크래핑 코드 업로드 중 오류 발생 </td><td>  -  </td></tr>
     </table>
     */
    public ScrapingCode scrapingCodeControllerRegisterScrapingCodeVersion(RegisterScrapingCodeVersionInput registerScrapingCodeVersionInput) throws ApiException {
        ApiResponse<ScrapingCode> localVarResp = scrapingCodeControllerRegisterScrapingCodeVersionWithHttpInfo(registerScrapingCodeVersionInput);
        return localVarResp.getData();
    }

    /**
     * 스크래핑 코드 버전 등록 (Github Action &gt;&gt; Amazon SNS)
     * 스크래핑 코드버전을 등록한다
     * @param registerScrapingCodeVersionInput  (required)
     * @return ApiResponse&lt;ScrapingCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 스크랩핑 코드 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 버전 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 실패 : 스크래핑 코드 업로드 중 오류 발생 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScrapingCode> scrapingCodeControllerRegisterScrapingCodeVersionWithHttpInfo(RegisterScrapingCodeVersionInput registerScrapingCodeVersionInput) throws ApiException {
        okhttp3.Call localVarCall = scrapingCodeControllerRegisterScrapingCodeVersionValidateBeforeCall(registerScrapingCodeVersionInput, null);
        Type localVarReturnType = new TypeToken<ScrapingCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 스크래핑 코드 버전 등록 (Github Action &gt;&gt; Amazon SNS) (asynchronously)
     * 스크래핑 코드버전을 등록한다
     * @param registerScrapingCodeVersionInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록된 스크랩핑 코드 버전을 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 버전 </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 실패 : 스크래핑 코드 업로드 중 오류 발생 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scrapingCodeControllerRegisterScrapingCodeVersionAsync(RegisterScrapingCodeVersionInput registerScrapingCodeVersionInput, final ApiCallback<ScrapingCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = scrapingCodeControllerRegisterScrapingCodeVersionValidateBeforeCall(registerScrapingCodeVersionInput, _callback);
        Type localVarReturnType = new TypeToken<ScrapingCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceControllerGetService
     * @param serviceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 조회한 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 서비스를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceControllerGetServiceCall(BigDecimal serviceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/service/{serviceId}"
            .replaceAll("\\{" + "serviceId" + "\\}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceControllerGetServiceValidateBeforeCall(BigDecimal serviceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling serviceControllerGetService(Async)");
        }
        

        okhttp3.Call localVarCall = serviceControllerGetServiceCall(serviceId, _callback);
        return localVarCall;

    }

    /**
     * 서비스 조회 (관리자전용)
     * 특정 서비스를 조회한다
     * @param serviceId  (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 조회한 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 서비스를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public Service serviceControllerGetService(BigDecimal serviceId) throws ApiException {
        ApiResponse<Service> localVarResp = serviceControllerGetServiceWithHttpInfo(serviceId);
        return localVarResp.getData();
    }

    /**
     * 서비스 조회 (관리자전용)
     * 특정 서비스를 조회한다
     * @param serviceId  (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 조회한 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 서비스를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> serviceControllerGetServiceWithHttpInfo(BigDecimal serviceId) throws ApiException {
        okhttp3.Call localVarCall = serviceControllerGetServiceValidateBeforeCall(serviceId, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 서비스 조회 (관리자전용) (asynchronously)
     * 특정 서비스를 조회한다
     * @param serviceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 조회한 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 서비스를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceControllerGetServiceAsync(BigDecimal serviceId, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceControllerGetServiceValidateBeforeCall(serviceId, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceControllerGetServices
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param category 서비스 카테고리 (optional)
     * @param jangbuId 장부사 순번 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 서비스 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceControllerGetServicesCall(BigDecimal page, BigDecimal limit, String route, String category, BigDecimal jangbuId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/service";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (jangbuId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jangbuId", jangbuId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceControllerGetServicesValidateBeforeCall(BigDecimal page, BigDecimal limit, String route, String category, BigDecimal jangbuId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling serviceControllerGetServices(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling serviceControllerGetServices(Async)");
        }
        

        okhttp3.Call localVarCall = serviceControllerGetServicesCall(page, limit, route, category, jangbuId, _callback);
        return localVarCall;

    }

    /**
     * 서비스 목록 검색
     * 서비스 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param category 서비스 카테고리 (optional)
     * @param jangbuId 장부사 순번 (optional)
     * @return GetServicesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 서비스 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public GetServicesOutput serviceControllerGetServices(BigDecimal page, BigDecimal limit, String route, String category, BigDecimal jangbuId) throws ApiException {
        ApiResponse<GetServicesOutput> localVarResp = serviceControllerGetServicesWithHttpInfo(page, limit, route, category, jangbuId);
        return localVarResp.getData();
    }

    /**
     * 서비스 목록 검색
     * 서비스 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param category 서비스 카테고리 (optional)
     * @param jangbuId 장부사 순번 (optional)
     * @return ApiResponse&lt;GetServicesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 서비스 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetServicesOutput> serviceControllerGetServicesWithHttpInfo(BigDecimal page, BigDecimal limit, String route, String category, BigDecimal jangbuId) throws ApiException {
        okhttp3.Call localVarCall = serviceControllerGetServicesValidateBeforeCall(page, limit, route, category, jangbuId, null);
        Type localVarReturnType = new TypeToken<GetServicesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 서비스 목록 검색 (asynchronously)
     * 서비스 목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param route 페이징 링크 경로 (optional)
     * @param category 서비스 카테고리 (optional)
     * @param jangbuId 장부사 순번 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 서비스 목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceControllerGetServicesAsync(BigDecimal page, BigDecimal limit, String route, String category, BigDecimal jangbuId, final ApiCallback<GetServicesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceControllerGetServicesValidateBeforeCall(page, limit, route, category, jangbuId, _callback);
        Type localVarReturnType = new TypeToken<GetServicesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceControllerRegisterService
     * @param registerServiceInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록한 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 서비스 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceControllerRegisterServiceCall(RegisterServiceInput registerServiceInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerServiceInput;

        // create path and map variables
        String localVarPath = "/public/api/service";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceControllerRegisterServiceValidateBeforeCall(RegisterServiceInput registerServiceInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerServiceInput' is set
        if (registerServiceInput == null) {
            throw new ApiException("Missing the required parameter 'registerServiceInput' when calling serviceControllerRegisterService(Async)");
        }
        

        okhttp3.Call localVarCall = serviceControllerRegisterServiceCall(registerServiceInput, _callback);
        return localVarCall;

    }

    /**
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     * 서비스를 새로 등록한다
     * @param registerServiceInput  (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록한 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 서비스 </td><td>  -  </td></tr>
     </table>
     */
    public Service serviceControllerRegisterService(RegisterServiceInput registerServiceInput) throws ApiException {
        ApiResponse<Service> localVarResp = serviceControllerRegisterServiceWithHttpInfo(registerServiceInput);
        return localVarResp.getData();
    }

    /**
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     * 서비스를 새로 등록한다
     * @param registerServiceInput  (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록한 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 서비스 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> serviceControllerRegisterServiceWithHttpInfo(RegisterServiceInput registerServiceInput) throws ApiException {
        okhttp3.Call localVarCall = serviceControllerRegisterServiceValidateBeforeCall(registerServiceInput, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자) (asynchronously)
     * 서비스를 새로 등록한다
     * @param registerServiceInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 등록한 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 실패 : 이미 존재하는 서비스 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceControllerRegisterServiceAsync(RegisterServiceInput registerServiceInput, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceControllerRegisterServiceValidateBeforeCall(registerServiceInput, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceControllerUpdateService
     * @param serviceId  (required)
     * @param updateServiceInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 서비스를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceControllerUpdateServiceCall(BigDecimal serviceId, UpdateServiceInput updateServiceInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateServiceInput;

        // create path and map variables
        String localVarPath = "/public/api/service/{serviceId}"
            .replaceAll("\\{" + "serviceId" + "\\}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceControllerUpdateServiceValidateBeforeCall(BigDecimal serviceId, UpdateServiceInput updateServiceInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling serviceControllerUpdateService(Async)");
        }
        
        // verify the required parameter 'updateServiceInput' is set
        if (updateServiceInput == null) {
            throw new ApiException("Missing the required parameter 'updateServiceInput' when calling serviceControllerUpdateService(Async)");
        }
        

        okhttp3.Call localVarCall = serviceControllerUpdateServiceCall(serviceId, updateServiceInput, _callback);
        return localVarCall;

    }

    /**
     * 서비스 수정 (관리자전용: 일부사용자)
     * 서비스를 수정한다
     * @param serviceId  (required)
     * @param updateServiceInput  (required)
     * @return Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 서비스를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public Service serviceControllerUpdateService(BigDecimal serviceId, UpdateServiceInput updateServiceInput) throws ApiException {
        ApiResponse<Service> localVarResp = serviceControllerUpdateServiceWithHttpInfo(serviceId, updateServiceInput);
        return localVarResp.getData();
    }

    /**
     * 서비스 수정 (관리자전용: 일부사용자)
     * 서비스를 수정한다
     * @param serviceId  (required)
     * @param updateServiceInput  (required)
     * @return ApiResponse&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 서비스를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Service> serviceControllerUpdateServiceWithHttpInfo(BigDecimal serviceId, UpdateServiceInput updateServiceInput) throws ApiException {
        okhttp3.Call localVarCall = serviceControllerUpdateServiceValidateBeforeCall(serviceId, updateServiceInput, null);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 서비스 수정 (관리자전용: 일부사용자) (asynchronously)
     * 서비스를 수정한다
     * @param serviceId  (required)
     * @param updateServiceInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 서비스를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 실패 : 서비스를 찾을 수 없음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceControllerUpdateServiceAsync(BigDecimal serviceId, UpdateServiceInput updateServiceInput, final ApiCallback<Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceControllerUpdateServiceValidateBeforeCall(serviceId, updateServiceInput, _callback);
        Type localVarReturnType = new TypeToken<Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workControllerGetWork
     * @param jangbuId 장부사 순번 (required)
     * @param userId 회원 순번 (required)
     * @param workId 업무 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업무정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 업무내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorkCall(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/jangbu/{jangbuId}/user/{userId}/work/{workId}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "workId" + "\\}", localVarApiClient.escapeString(workId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workControllerGetWorkValidateBeforeCall(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling workControllerGetWork(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling workControllerGetWork(Async)");
        }
        
        // verify the required parameter 'workId' is set
        if (workId == null) {
            throw new ApiException("Missing the required parameter 'workId' when calling workControllerGetWork(Async)");
        }
        

        okhttp3.Call localVarCall = workControllerGetWorkCall(jangbuId, userId, workId, _callback);
        return localVarCall;

    }

    /**
     * 업무 조회
     * 특정 업무를 조회한다
     * @param jangbuId 장부사 순번 (required)
     * @param userId 회원 순번 (required)
     * @param workId 업무 순번 (required)
     * @return Work
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업무정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 업무내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public Work workControllerGetWork(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId) throws ApiException {
        ApiResponse<Work> localVarResp = workControllerGetWorkWithHttpInfo(jangbuId, userId, workId);
        return localVarResp.getData();
    }

    /**
     * 업무 조회
     * 특정 업무를 조회한다
     * @param jangbuId 장부사 순번 (required)
     * @param userId 회원 순번 (required)
     * @param workId 업무 순번 (required)
     * @return ApiResponse&lt;Work&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업무정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 업무내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Work> workControllerGetWorkWithHttpInfo(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId) throws ApiException {
        okhttp3.Call localVarCall = workControllerGetWorkValidateBeforeCall(jangbuId, userId, workId, null);
        Type localVarReturnType = new TypeToken<Work>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 업무 조회 (asynchronously)
     * 특정 업무를 조회한다
     * @param jangbuId 장부사 순번 (required)
     * @param userId 회원 순번 (required)
     * @param workId 업무 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업무정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 업무내역이 존재하지 않음 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorkAsync(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId, final ApiCallback<Work> _callback) throws ApiException {

        okhttp3.Call localVarCall = workControllerGetWorkValidateBeforeCall(jangbuId, userId, workId, _callback);
        Type localVarReturnType = new TypeToken<Work>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workControllerGetWorkS3Data
     * @param path S3저장 경로 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업로드 또는 스크래핑 로그 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않는 S3 데이터 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorkS3DataCall(String path, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/work/log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workControllerGetWorkS3DataValidateBeforeCall(String path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling workControllerGetWorkS3Data(Async)");
        }
        

        okhttp3.Call localVarCall = workControllerGetWorkS3DataCall(path, _callback);
        return localVarCall;

    }

    /**
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     * (관리자전용) 특정 업무의 S3정보를 조회한다.
     * @param path S3저장 경로 (required)
     * @return GetWorkS3DataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업로드 또는 스크래핑 로그 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않는 S3 데이터 </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkS3DataResponse workControllerGetWorkS3Data(String path) throws ApiException {
        ApiResponse<GetWorkS3DataResponse> localVarResp = workControllerGetWorkS3DataWithHttpInfo(path);
        return localVarResp.getData();
    }

    /**
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     * (관리자전용) 특정 업무의 S3정보를 조회한다.
     * @param path S3저장 경로 (required)
     * @return ApiResponse&lt;GetWorkS3DataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업로드 또는 스크래핑 로그 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않는 S3 데이터 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWorkS3DataResponse> workControllerGetWorkS3DataWithHttpInfo(String path) throws ApiException {
        okhttp3.Call localVarCall = workControllerGetWorkS3DataValidateBeforeCall(path, null);
        Type localVarReturnType = new TypeToken<GetWorkS3DataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보) (asynchronously)
     * (관리자전용) 특정 업무의 S3정보를 조회한다.
     * @param path S3저장 경로 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업로드 또는 스크래핑 로그 정보를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않는 S3 데이터 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorkS3DataAsync(String path, final ApiCallback<GetWorkS3DataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workControllerGetWorkS3DataValidateBeforeCall(path, _callback);
        Type localVarReturnType = new TypeToken<GetWorkS3DataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workControllerGetWorkS3DetailLog
     * @param workId 업무순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : S3(업로드 로그) 데이터 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않는 업무내역 또는 S3데이터가 없는경우, 정보가 없는경우 혹은 업무내역의 로그가 없거나 요청타입이 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorkS3DetailLogCall(BigDecimal workId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/work/log-detail/{workId}"
            .replaceAll("\\{" + "workId" + "\\}", localVarApiClient.escapeString(workId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workControllerGetWorkS3DetailLogValidateBeforeCall(BigDecimal workId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'workId' is set
        if (workId == null) {
            throw new ApiException("Missing the required parameter 'workId' when calling workControllerGetWorkS3DetailLog(Async)");
        }
        

        okhttp3.Call localVarCall = workControllerGetWorkS3DetailLogCall(workId, _callback);
        return localVarCall;

    }

    /**
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     * 특정 업무의 S3정보(업로드 로그)를 조회한다.
     * @param workId 업무순번 (required)
     * @return GetWorkS3DetailLogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : S3(업로드 로그) 데이터 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않는 업무내역 또는 S3데이터가 없는경우, 정보가 없는경우 혹은 업무내역의 로그가 없거나 요청타입이 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkS3DetailLogResponse workControllerGetWorkS3DetailLog(BigDecimal workId) throws ApiException {
        ApiResponse<GetWorkS3DetailLogResponse> localVarResp = workControllerGetWorkS3DetailLogWithHttpInfo(workId);
        return localVarResp.getData();
    }

    /**
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     * 특정 업무의 S3정보(업로드 로그)를 조회한다.
     * @param workId 업무순번 (required)
     * @return ApiResponse&lt;GetWorkS3DetailLogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : S3(업로드 로그) 데이터 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않는 업무내역 또는 S3데이터가 없는경우, 정보가 없는경우 혹은 업무내역의 로그가 없거나 요청타입이 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWorkS3DetailLogResponse> workControllerGetWorkS3DetailLogWithHttpInfo(BigDecimal workId) throws ApiException {
        okhttp3.Call localVarCall = workControllerGetWorkS3DetailLogValidateBeforeCall(workId, null);
        Type localVarReturnType = new TypeToken<GetWorkS3DetailLogResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 특정 업무의 S3정보의 조회 (업로드 로그) (asynchronously)
     * 특정 업무의 S3정보(업로드 로그)를 조회한다.
     * @param workId 업무순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : S3(업로드 로그) 데이터 목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 존재하지 않는 업무내역 또는 S3데이터가 없는경우, 정보가 없는경우 혹은 업무내역의 로그가 없거나 요청타입이 없는경우 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorkS3DetailLogAsync(BigDecimal workId, final ApiCallback<GetWorkS3DetailLogResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workControllerGetWorkS3DetailLogValidateBeforeCall(workId, _callback);
        Type localVarReturnType = new TypeToken<GetWorkS3DetailLogResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workControllerGetWorks
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param status 상태별 (optional)
     * @param type (업무)요청 타입 (optional)
     * @param loginId (로그인) 아이디 (optional)
     * @param userName 상호명 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param memo 메모내용 (optional)
     * @param count 접수 건수 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업무목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorksCall(BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String jangbuName, String memo, BigDecimal count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/work";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (loginId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loginId", loginId));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (jangbuName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jangbuName", jangbuName));
        }

        if (memo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memo", memo));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (endAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAt", endAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workControllerGetWorksValidateBeforeCall(BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String jangbuName, String memo, BigDecimal count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling workControllerGetWorks(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling workControllerGetWorks(Async)");
        }
        
        // verify the required parameter 'startAt' is set
        if (startAt == null) {
            throw new ApiException("Missing the required parameter 'startAt' when calling workControllerGetWorks(Async)");
        }
        
        // verify the required parameter 'endAt' is set
        if (endAt == null) {
            throw new ApiException("Missing the required parameter 'endAt' when calling workControllerGetWorks(Async)");
        }
        

        okhttp3.Call localVarCall = workControllerGetWorksCall(page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, jangbuName, memo, count, _callback);
        return localVarCall;

    }

    /**
     * 업무 목록 검색 (관리자 전용)
     * 업무목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param status 상태별 (optional)
     * @param type (업무)요청 타입 (optional)
     * @param loginId (로그인) 아이디 (optional)
     * @param userName 상호명 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param memo 메모내용 (optional)
     * @param count 접수 건수 (optional)
     * @return GetWorksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업무목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public GetWorksOutput workControllerGetWorks(BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String jangbuName, String memo, BigDecimal count) throws ApiException {
        ApiResponse<GetWorksOutput> localVarResp = workControllerGetWorksWithHttpInfo(page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, jangbuName, memo, count);
        return localVarResp.getData();
    }

    /**
     * 업무 목록 검색 (관리자 전용)
     * 업무목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param status 상태별 (optional)
     * @param type (업무)요청 타입 (optional)
     * @param loginId (로그인) 아이디 (optional)
     * @param userName 상호명 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param memo 메모내용 (optional)
     * @param count 접수 건수 (optional)
     * @return ApiResponse&lt;GetWorksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업무목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWorksOutput> workControllerGetWorksWithHttpInfo(BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String jangbuName, String memo, BigDecimal count) throws ApiException {
        okhttp3.Call localVarCall = workControllerGetWorksValidateBeforeCall(page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, jangbuName, memo, count, null);
        Type localVarReturnType = new TypeToken<GetWorksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 업무 목록 검색 (관리자 전용) (asynchronously)
     * 업무목록을 검색한다
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param status 상태별 (optional)
     * @param type (업무)요청 타입 (optional)
     * @param loginId (로그인) 아이디 (optional)
     * @param userName 상호명 (optional)
     * @param jangbuName 장부사명 (optional)
     * @param memo 메모내용 (optional)
     * @param count 접수 건수 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 업무목록을 반환 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorksAsync(BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String jangbuName, String memo, BigDecimal count, final ApiCallback<GetWorksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = workControllerGetWorksValidateBeforeCall(page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, jangbuName, memo, count, _callback);
        Type localVarReturnType = new TypeToken<GetWorksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workControllerGetWorksByJangbu
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param status 상태별 (optional)
     * @param type (업무)요청 타입 (optional)
     * @param loginId (로그인) 아이디 (optional)
     * @param userName 상호명 (optional)
     * @param memo 메모내용 (optional)
     * @param count 데이터 건수 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사별 업무목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않는 경우에 해당 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorksByJangbuCall(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String memo, BigDecimal count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/jangbu/{jangbuId}/work"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceId", serviceId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (loginId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loginId", loginId));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (memo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memo", memo));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (endAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAt", endAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workControllerGetWorksByJangbuValidateBeforeCall(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String memo, BigDecimal count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling workControllerGetWorksByJangbu(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling workControllerGetWorksByJangbu(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling workControllerGetWorksByJangbu(Async)");
        }
        
        // verify the required parameter 'startAt' is set
        if (startAt == null) {
            throw new ApiException("Missing the required parameter 'startAt' when calling workControllerGetWorksByJangbu(Async)");
        }
        
        // verify the required parameter 'endAt' is set
        if (endAt == null) {
            throw new ApiException("Missing the required parameter 'endAt' when calling workControllerGetWorksByJangbu(Async)");
        }
        

        okhttp3.Call localVarCall = workControllerGetWorksByJangbuCall(jangbuId, page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, memo, count, _callback);
        return localVarCall;

    }

    /**
     * 장부사별 업무 목록 검색 (장부사 전용)
     * 장부사별 업무목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param status 상태별 (optional)
     * @param type (업무)요청 타입 (optional)
     * @param loginId (로그인) 아이디 (optional)
     * @param userName 상호명 (optional)
     * @param memo 메모내용 (optional)
     * @param count 데이터 건수 (optional)
     * @return GetWorksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사별 업무목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않는 경우에 해당 </td><td>  -  </td></tr>
     </table>
     */
    public GetWorksOutput workControllerGetWorksByJangbu(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String memo, BigDecimal count) throws ApiException {
        ApiResponse<GetWorksOutput> localVarResp = workControllerGetWorksByJangbuWithHttpInfo(jangbuId, page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, memo, count);
        return localVarResp.getData();
    }

    /**
     * 장부사별 업무 목록 검색 (장부사 전용)
     * 장부사별 업무목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param status 상태별 (optional)
     * @param type (업무)요청 타입 (optional)
     * @param loginId (로그인) 아이디 (optional)
     * @param userName 상호명 (optional)
     * @param memo 메모내용 (optional)
     * @param count 데이터 건수 (optional)
     * @return ApiResponse&lt;GetWorksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사별 업무목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않는 경우에 해당 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWorksOutput> workControllerGetWorksByJangbuWithHttpInfo(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String memo, BigDecimal count) throws ApiException {
        okhttp3.Call localVarCall = workControllerGetWorksByJangbuValidateBeforeCall(jangbuId, page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, memo, count, null);
        Type localVarReturnType = new TypeToken<GetWorksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 장부사별 업무 목록 검색 (장부사 전용) (asynchronously)
     * 장부사별 업무목록을 검색한다
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param serviceId 서비스 순번 (optional)
     * @param status 상태별 (optional)
     * @param type (업무)요청 타입 (optional)
     * @param loginId (로그인) 아이디 (optional)
     * @param userName 상호명 (optional)
     * @param memo 메모내용 (optional)
     * @param count 데이터 건수 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 장부사별 업무목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않는 경우에 해당 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorksByJangbuAsync(BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, BigDecimal serviceId, ProcessFlag status, WorkRequestType type, String loginId, String userName, String memo, BigDecimal count, final ApiCallback<GetWorksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = workControllerGetWorksByJangbuValidateBeforeCall(jangbuId, page, limit, startAt, endAt, route, serviceId, status, type, loginId, userName, memo, count, _callback);
        Type localVarReturnType = new TypeToken<GetWorksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workControllerGetWorksByUser
     * @param userId 회원 순번 (required)
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param status 상태별 (optional)
     * @param memo 메모내용 (optional)
     * @param count 데이터 건수 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 사용자별 업무목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 장부사의 고객이 아닌 경우에 해당 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorksByUserCall(BigDecimal userId, BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, ProcessFlag status, String memo, BigDecimal count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/jangbu/{jangbuId}/user/{userId}/work"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (route != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("route", route));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (memo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memo", memo));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        if (endAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endAt", endAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workControllerGetWorksByUserValidateBeforeCall(BigDecimal userId, BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, ProcessFlag status, String memo, BigDecimal count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling workControllerGetWorksByUser(Async)");
        }
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling workControllerGetWorksByUser(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling workControllerGetWorksByUser(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling workControllerGetWorksByUser(Async)");
        }
        
        // verify the required parameter 'startAt' is set
        if (startAt == null) {
            throw new ApiException("Missing the required parameter 'startAt' when calling workControllerGetWorksByUser(Async)");
        }
        
        // verify the required parameter 'endAt' is set
        if (endAt == null) {
            throw new ApiException("Missing the required parameter 'endAt' when calling workControllerGetWorksByUser(Async)");
        }
        

        okhttp3.Call localVarCall = workControllerGetWorksByUserCall(userId, jangbuId, page, limit, startAt, endAt, route, status, memo, count, _callback);
        return localVarCall;

    }

    /**
     * 사용자별 업무 목록 검색 (고객 전용)
     * 사용자별 업무목록을 검색한다
     * @param userId 회원 순번 (required)
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param status 상태별 (optional)
     * @param memo 메모내용 (optional)
     * @param count 데이터 건수 (optional)
     * @return GetWorksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 사용자별 업무목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 장부사의 고객이 아닌 경우에 해당 </td><td>  -  </td></tr>
     </table>
     */
    public GetWorksOutput workControllerGetWorksByUser(BigDecimal userId, BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, ProcessFlag status, String memo, BigDecimal count) throws ApiException {
        ApiResponse<GetWorksOutput> localVarResp = workControllerGetWorksByUserWithHttpInfo(userId, jangbuId, page, limit, startAt, endAt, route, status, memo, count);
        return localVarResp.getData();
    }

    /**
     * 사용자별 업무 목록 검색 (고객 전용)
     * 사용자별 업무목록을 검색한다
     * @param userId 회원 순번 (required)
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param status 상태별 (optional)
     * @param memo 메모내용 (optional)
     * @param count 데이터 건수 (optional)
     * @return ApiResponse&lt;GetWorksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 사용자별 업무목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 장부사의 고객이 아닌 경우에 해당 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetWorksOutput> workControllerGetWorksByUserWithHttpInfo(BigDecimal userId, BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, ProcessFlag status, String memo, BigDecimal count) throws ApiException {
        okhttp3.Call localVarCall = workControllerGetWorksByUserValidateBeforeCall(userId, jangbuId, page, limit, startAt, endAt, route, status, memo, count, null);
        Type localVarReturnType = new TypeToken<GetWorksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 사용자별 업무 목록 검색 (고객 전용) (asynchronously)
     * 사용자별 업무목록을 검색한다
     * @param userId 회원 순번 (required)
     * @param jangbuId 장부사 순번 (required)
     * @param page 페이징 페이지 정보 (required)
     * @param limit 페이징 페이지당 목록 수 (required)
     * @param startAt 검색시작일자 (YYYYMMDD) (required)
     * @param endAt 검색종료일자 (YYYYMMDD) (required)
     * @param route 페이징 링크 경로 (optional)
     * @param status 상태별 (optional)
     * @param memo 메모내용 (optional)
     * @param count 데이터 건수 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 사용자별 업무목록을 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 장부사가 존재하지 않거나 장부사의 고객이 아닌 경우에 해당 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerGetWorksByUserAsync(BigDecimal userId, BigDecimal jangbuId, BigDecimal page, BigDecimal limit, BigDecimal startAt, BigDecimal endAt, String route, ProcessFlag status, String memo, BigDecimal count, final ApiCallback<GetWorksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = workControllerGetWorksByUserValidateBeforeCall(userId, jangbuId, page, limit, startAt, endAt, route, status, memo, count, _callback);
        Type localVarReturnType = new TypeToken<GetWorksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workControllerUpdateWork
     * @param jangbuId 장부사 순번 (required)
     * @param userId 회원 순번 (required)
     * @param workId 업무 순번 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 업무를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 업무가 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 해당 업무가 접수 또는 승인상태가 아님 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerUpdateWorkCall(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/api/jangbu/{jangbuId}/user/{userId}/work/{workId}"
            .replaceAll("\\{" + "jangbuId" + "\\}", localVarApiClient.escapeString(jangbuId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "workId" + "\\}", localVarApiClient.escapeString(workId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workControllerUpdateWorkValidateBeforeCall(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jangbuId' is set
        if (jangbuId == null) {
            throw new ApiException("Missing the required parameter 'jangbuId' when calling workControllerUpdateWork(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling workControllerUpdateWork(Async)");
        }
        
        // verify the required parameter 'workId' is set
        if (workId == null) {
            throw new ApiException("Missing the required parameter 'workId' when calling workControllerUpdateWork(Async)");
        }
        

        okhttp3.Call localVarCall = workControllerUpdateWorkCall(jangbuId, userId, workId, _callback);
        return localVarCall;

    }

    /**
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     * (접수 또는 승인건만) 업무를 수정한다
     * @param jangbuId 장부사 순번 (required)
     * @param userId 회원 순번 (required)
     * @param workId 업무 순번 (required)
     * @return Work
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 업무를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 업무가 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 해당 업무가 접수 또는 승인상태가 아님 </td><td>  -  </td></tr>
     </table>
     */
    public Work workControllerUpdateWork(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId) throws ApiException {
        ApiResponse<Work> localVarResp = workControllerUpdateWorkWithHttpInfo(jangbuId, userId, workId);
        return localVarResp.getData();
    }

    /**
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     * (접수 또는 승인건만) 업무를 수정한다
     * @param jangbuId 장부사 순번 (required)
     * @param userId 회원 순번 (required)
     * @param workId 업무 순번 (required)
     * @return ApiResponse&lt;Work&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 업무를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 업무가 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 해당 업무가 접수 또는 승인상태가 아님 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Work> workControllerUpdateWorkWithHttpInfo(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId) throws ApiException {
        okhttp3.Call localVarCall = workControllerUpdateWorkValidateBeforeCall(jangbuId, userId, workId, null);
        Type localVarReturnType = new TypeToken<Work>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리) (asynchronously)
     * (접수 또는 승인건만) 업무를 수정한다
     * @param jangbuId 장부사 순번 (required)
     * @param userId 회원 순번 (required)
     * @param workId 업무 순번 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 성공 : 수정된 업무를 반환 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 해당 업무가 존재하지 않음 </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> 해당 업무가 접수 또는 승인상태가 아님 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workControllerUpdateWorkAsync(BigDecimal jangbuId, BigDecimal userId, BigDecimal workId, final ApiCallback<Work> _callback) throws ApiException {

        okhttp3.Call localVarCall = workControllerUpdateWorkValidateBeforeCall(jangbuId, userId, workId, _callback);
        Type localVarReturnType = new TypeToken<Work>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
