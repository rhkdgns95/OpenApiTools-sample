<?php
/**
 * APIApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 뱅크다K 웹앱 REST API
 *
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * APIApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiMonitorControllerGetApiMonitor
     *
     * API모니터링 조회 (관리자 전용)
     *
     * @param  float $api_id API모니터링 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiLog|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiMonitorControllerGetApiMonitor($api_id)
    {
        list($response) = $this->apiMonitorControllerGetApiMonitorWithHttpInfo($api_id);
        return $response;
    }

    /**
     * Operation apiMonitorControllerGetApiMonitorWithHttpInfo
     *
     * API모니터링 조회 (관리자 전용)
     *
     * @param  float $api_id API모니터링 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiLog|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiMonitorControllerGetApiMonitorWithHttpInfo($api_id)
    {
        $request = $this->apiMonitorControllerGetApiMonitorRequest($api_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ApiLog' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiLog', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ApiLog';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiMonitorControllerGetApiMonitorAsync
     *
     * API모니터링 조회 (관리자 전용)
     *
     * @param  float $api_id API모니터링 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiMonitorControllerGetApiMonitorAsync($api_id)
    {
        return $this->apiMonitorControllerGetApiMonitorAsyncWithHttpInfo($api_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiMonitorControllerGetApiMonitorAsyncWithHttpInfo
     *
     * API모니터링 조회 (관리자 전용)
     *
     * @param  float $api_id API모니터링 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiMonitorControllerGetApiMonitorAsyncWithHttpInfo($api_id)
    {
        $returnType = '\OpenAPI\Client\Model\ApiLog';
        $request = $this->apiMonitorControllerGetApiMonitorRequest($api_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiMonitorControllerGetApiMonitor'
     *
     * @param  float $api_id API모니터링 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiMonitorControllerGetApiMonitorRequest($api_id)
    {
        // verify the required parameter 'api_id' is set
        if ($api_id === null || (is_array($api_id) && count($api_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_id when calling apiMonitorControllerGetApiMonitor'
            );
        }

        $resourcePath = '/public/api/api-monitor/detail/{apiId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($api_id !== null) {
            $resourcePath = str_replace(
                '{' . 'apiId' . '}',
                ObjectSerializer::toPathValue($api_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiMonitorControllerGetApiMonitors
     *
     * API모니터링 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  string $service_name 서비스 이름 (optional)
     * @param  float $user_seq 회원 순번 (optional)
     * @param  string $uid 회원 ID (optional)
     * @param  string $ip IP (optional)
     * @param  float $api_seq api 순번 (optional)
     * @param  float $rcode 결과 응답코드 (optional)
     * @param  bool $is_fail 실패여부 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetApiMonitorsOutput
     */
    public function apiMonitorControllerGetApiMonitors($page, $limit, $start_at, $end_at, $route = null, $jangbu_id = null, $service_name = null, $user_seq = null, $uid = null, $ip = null, $api_seq = null, $rcode = null, $is_fail = null)
    {
        list($response) = $this->apiMonitorControllerGetApiMonitorsWithHttpInfo($page, $limit, $start_at, $end_at, $route, $jangbu_id, $service_name, $user_seq, $uid, $ip, $api_seq, $rcode, $is_fail);
        return $response;
    }

    /**
     * Operation apiMonitorControllerGetApiMonitorsWithHttpInfo
     *
     * API모니터링 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  string $service_name 서비스 이름 (optional)
     * @param  float $user_seq 회원 순번 (optional)
     * @param  string $uid 회원 ID (optional)
     * @param  string $ip IP (optional)
     * @param  float $api_seq api 순번 (optional)
     * @param  float $rcode 결과 응답코드 (optional)
     * @param  bool $is_fail 실패여부 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetApiMonitorsOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiMonitorControllerGetApiMonitorsWithHttpInfo($page, $limit, $start_at, $end_at, $route = null, $jangbu_id = null, $service_name = null, $user_seq = null, $uid = null, $ip = null, $api_seq = null, $rcode = null, $is_fail = null)
    {
        $request = $this->apiMonitorControllerGetApiMonitorsRequest($page, $limit, $start_at, $end_at, $route, $jangbu_id, $service_name, $user_seq, $uid, $ip, $api_seq, $rcode, $is_fail);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetApiMonitorsOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetApiMonitorsOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetApiMonitorsOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetApiMonitorsOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiMonitorControllerGetApiMonitorsAsync
     *
     * API모니터링 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  string $service_name 서비스 이름 (optional)
     * @param  float $user_seq 회원 순번 (optional)
     * @param  string $uid 회원 ID (optional)
     * @param  string $ip IP (optional)
     * @param  float $api_seq api 순번 (optional)
     * @param  float $rcode 결과 응답코드 (optional)
     * @param  bool $is_fail 실패여부 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiMonitorControllerGetApiMonitorsAsync($page, $limit, $start_at, $end_at, $route = null, $jangbu_id = null, $service_name = null, $user_seq = null, $uid = null, $ip = null, $api_seq = null, $rcode = null, $is_fail = null)
    {
        return $this->apiMonitorControllerGetApiMonitorsAsyncWithHttpInfo($page, $limit, $start_at, $end_at, $route, $jangbu_id, $service_name, $user_seq, $uid, $ip, $api_seq, $rcode, $is_fail)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiMonitorControllerGetApiMonitorsAsyncWithHttpInfo
     *
     * API모니터링 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  string $service_name 서비스 이름 (optional)
     * @param  float $user_seq 회원 순번 (optional)
     * @param  string $uid 회원 ID (optional)
     * @param  string $ip IP (optional)
     * @param  float $api_seq api 순번 (optional)
     * @param  float $rcode 결과 응답코드 (optional)
     * @param  bool $is_fail 실패여부 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiMonitorControllerGetApiMonitorsAsyncWithHttpInfo($page, $limit, $start_at, $end_at, $route = null, $jangbu_id = null, $service_name = null, $user_seq = null, $uid = null, $ip = null, $api_seq = null, $rcode = null, $is_fail = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetApiMonitorsOutput';
        $request = $this->apiMonitorControllerGetApiMonitorsRequest($page, $limit, $start_at, $end_at, $route, $jangbu_id, $service_name, $user_seq, $uid, $ip, $api_seq, $rcode, $is_fail);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiMonitorControllerGetApiMonitors'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  string $service_name 서비스 이름 (optional)
     * @param  float $user_seq 회원 순번 (optional)
     * @param  string $uid 회원 ID (optional)
     * @param  string $ip IP (optional)
     * @param  float $api_seq api 순번 (optional)
     * @param  float $rcode 결과 응답코드 (optional)
     * @param  bool $is_fail 실패여부 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiMonitorControllerGetApiMonitorsRequest($page, $limit, $start_at, $end_at, $route = null, $jangbu_id = null, $service_name = null, $user_seq = null, $uid = null, $ip = null, $api_seq = null, $rcode = null, $is_fail = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling apiMonitorControllerGetApiMonitors'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling apiMonitorControllerGetApiMonitors'
            );
        }
        // verify the required parameter 'start_at' is set
        if ($start_at === null || (is_array($start_at) && count($start_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_at when calling apiMonitorControllerGetApiMonitors'
            );
        }
        // verify the required parameter 'end_at' is set
        if ($end_at === null || (is_array($end_at) && count($end_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_at when calling apiMonitorControllerGetApiMonitors'
            );
        }

        $resourcePath = '/public/api/api-monitor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($start_at !== null) {
            if('form' === 'form' && is_array($start_at)) {
                foreach($start_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startAt'] = $start_at;
            }
        }
        // query params
        if ($end_at !== null) {
            if('form' === 'form' && is_array($end_at)) {
                foreach($end_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endAt'] = $end_at;
            }
        }
        // query params
        if ($jangbu_id !== null) {
            if('form' === 'form' && is_array($jangbu_id)) {
                foreach($jangbu_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jangbuId'] = $jangbu_id;
            }
        }
        // query params
        if ($service_name !== null) {
            if('form' === 'form' && is_array($service_name)) {
                foreach($service_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceName'] = $service_name;
            }
        }
        // query params
        if ($user_seq !== null) {
            if('form' === 'form' && is_array($user_seq)) {
                foreach($user_seq as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userSeq'] = $user_seq;
            }
        }
        // query params
        if ($uid !== null) {
            if('form' === 'form' && is_array($uid)) {
                foreach($uid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['uid'] = $uid;
            }
        }
        // query params
        if ($ip !== null) {
            if('form' === 'form' && is_array($ip)) {
                foreach($ip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ip'] = $ip;
            }
        }
        // query params
        if ($api_seq !== null) {
            if('form' === 'form' && is_array($api_seq)) {
                foreach($api_seq as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['apiSeq'] = $api_seq;
            }
        }
        // query params
        if ($rcode !== null) {
            if('form' === 'form' && is_array($rcode)) {
                foreach($rcode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rcode'] = $rcode;
            }
        }
        // query params
        if ($is_fail !== null) {
            if('form' === 'form' && is_array($is_fail)) {
                foreach($is_fail as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['isFail'] = $is_fail;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiMonitorControllerGetApiS3Data
     *
     * API모니터링 S3 데이터 조회 (관리자 전용)
     *
     * @param  string $path S3 경로 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiMonitorControllerGetApiS3Data($path)
    {
        list($response) = $this->apiMonitorControllerGetApiS3DataWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation apiMonitorControllerGetApiS3DataWithHttpInfo
     *
     * API모니터링 S3 데이터 조회 (관리자 전용)
     *
     * @param  string $path S3 경로 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiMonitorControllerGetApiS3DataWithHttpInfo($path)
    {
        $request = $this->apiMonitorControllerGetApiS3DataRequest($path);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiMonitorControllerGetApiS3DataAsync
     *
     * API모니터링 S3 데이터 조회 (관리자 전용)
     *
     * @param  string $path S3 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiMonitorControllerGetApiS3DataAsync($path)
    {
        return $this->apiMonitorControllerGetApiS3DataAsyncWithHttpInfo($path)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiMonitorControllerGetApiS3DataAsyncWithHttpInfo
     *
     * API모니터링 S3 데이터 조회 (관리자 전용)
     *
     * @param  string $path S3 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiMonitorControllerGetApiS3DataAsyncWithHttpInfo($path)
    {
        $returnType = 'string';
        $request = $this->apiMonitorControllerGetApiS3DataRequest($path);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiMonitorControllerGetApiS3Data'
     *
     * @param  string $path S3 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiMonitorControllerGetApiS3DataRequest($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling apiMonitorControllerGetApiS3Data'
            );
        }

        $resourcePath = '/public/api/api-monitor/log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
