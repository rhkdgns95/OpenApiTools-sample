<?php
/**
 * DefaultApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 뱅크다K 웹앱 REST API
 *
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adjustControllerGetChargeJangbuPartnership
     *
     * (해당연월) 장부사의 파트너쉽 금액 조회
     *
     * @param  float $jangbu_id jangbu_id (required)
     * @param  float $year_month year_month (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChargeJangbuPartnership|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerGetChargeJangbuPartnership($jangbu_id, $year_month)
    {
        list($response) = $this->adjustControllerGetChargeJangbuPartnershipWithHttpInfo($jangbu_id, $year_month);
        return $response;
    }

    /**
     * Operation adjustControllerGetChargeJangbuPartnershipWithHttpInfo
     *
     * (해당연월) 장부사의 파트너쉽 금액 조회
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChargeJangbuPartnership|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerGetChargeJangbuPartnershipWithHttpInfo($jangbu_id, $year_month)
    {
        $request = $this->adjustControllerGetChargeJangbuPartnershipRequest($jangbu_id, $year_month);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChargeJangbuPartnership' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChargeJangbuPartnership', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChargeJangbuPartnership';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChargeJangbuPartnership',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerGetChargeJangbuPartnershipAsync
     *
     * (해당연월) 장부사의 파트너쉽 금액 조회
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerGetChargeJangbuPartnershipAsync($jangbu_id, $year_month)
    {
        return $this->adjustControllerGetChargeJangbuPartnershipAsyncWithHttpInfo($jangbu_id, $year_month)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerGetChargeJangbuPartnershipAsyncWithHttpInfo
     *
     * (해당연월) 장부사의 파트너쉽 금액 조회
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerGetChargeJangbuPartnershipAsyncWithHttpInfo($jangbu_id, $year_month)
    {
        $returnType = '\OpenAPI\Client\Model\ChargeJangbuPartnership';
        $request = $this->adjustControllerGetChargeJangbuPartnershipRequest($jangbu_id, $year_month);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerGetChargeJangbuPartnership'
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerGetChargeJangbuPartnershipRequest($jangbu_id, $year_month)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerGetChargeJangbuPartnership'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerGetChargeJangbuPartnership'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/partnership';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerGetChargeJangbuPreview
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetChargeJangbuPreviewOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerGetChargeJangbuPreview($jangbu_id, $year_month)
    {
        list($response) = $this->adjustControllerGetChargeJangbuPreviewWithHttpInfo($jangbu_id, $year_month);
        return $response;
    }

    /**
     * Operation adjustControllerGetChargeJangbuPreviewWithHttpInfo
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetChargeJangbuPreviewOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerGetChargeJangbuPreviewWithHttpInfo($jangbu_id, $year_month)
    {
        $request = $this->adjustControllerGetChargeJangbuPreviewRequest($jangbu_id, $year_month);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetChargeJangbuPreviewOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetChargeJangbuPreviewOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetChargeJangbuPreviewOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetChargeJangbuPreviewOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerGetChargeJangbuPreviewAsync
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerGetChargeJangbuPreviewAsync($jangbu_id, $year_month)
    {
        return $this->adjustControllerGetChargeJangbuPreviewAsyncWithHttpInfo($jangbu_id, $year_month)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerGetChargeJangbuPreviewAsyncWithHttpInfo
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerGetChargeJangbuPreviewAsyncWithHttpInfo($jangbu_id, $year_month)
    {
        $returnType = '\OpenAPI\Client\Model\GetChargeJangbuPreviewOutput';
        $request = $this->adjustControllerGetChargeJangbuPreviewRequest($jangbu_id, $year_month);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerGetChargeJangbuPreview'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerGetChargeJangbuPreviewRequest($jangbu_id, $year_month)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerGetChargeJangbuPreview'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerGetChargeJangbuPreview'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerRegisterAdjust
     *
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $step 단계 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RegisterAdjustOutput|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerRegisterAdjust($jangbu_id, $year_month, $step)
    {
        list($response) = $this->adjustControllerRegisterAdjustWithHttpInfo($jangbu_id, $year_month, $step);
        return $response;
    }

    /**
     * Operation adjustControllerRegisterAdjustWithHttpInfo
     *
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $step 단계 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RegisterAdjustOutput|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerRegisterAdjustWithHttpInfo($jangbu_id, $year_month, $step)
    {
        $request = $this->adjustControllerRegisterAdjustRequest($jangbu_id, $year_month, $step);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RegisterAdjustOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RegisterAdjustOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RegisterAdjustOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RegisterAdjustOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerRegisterAdjustAsync
     *
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $step 단계 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerRegisterAdjustAsync($jangbu_id, $year_month, $step)
    {
        return $this->adjustControllerRegisterAdjustAsyncWithHttpInfo($jangbu_id, $year_month, $step)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerRegisterAdjustAsyncWithHttpInfo
     *
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $step 단계 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerRegisterAdjustAsyncWithHttpInfo($jangbu_id, $year_month, $step)
    {
        $returnType = '\OpenAPI\Client\Model\RegisterAdjustOutput';
        $request = $this->adjustControllerRegisterAdjustRequest($jangbu_id, $year_month, $step);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerRegisterAdjust'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $step 단계 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerRegisterAdjustRequest($jangbu_id, $year_month, $step)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerRegisterAdjust'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerRegisterAdjust'
            );
        }
        // verify the required parameter 'step' is set
        if ($step === null || (is_array($step) && count($step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step when calling adjustControllerRegisterAdjust'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/step/{step}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }
        // path params
        if ($step !== null) {
            $resourcePath = str_replace(
                '{' . 'step' . '}',
                ObjectSerializer::toPathValue($step),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerSearchAdjustJangbuServices
     *
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchAdjustJangbuServicesOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerSearchAdjustJangbuServices($jangbu_id, $year_month, $page, $limit, $route = null)
    {
        list($response) = $this->adjustControllerSearchAdjustJangbuServicesWithHttpInfo($jangbu_id, $year_month, $page, $limit, $route);
        return $response;
    }

    /**
     * Operation adjustControllerSearchAdjustJangbuServicesWithHttpInfo
     *
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchAdjustJangbuServicesOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerSearchAdjustJangbuServicesWithHttpInfo($jangbu_id, $year_month, $page, $limit, $route = null)
    {
        $request = $this->adjustControllerSearchAdjustJangbuServicesRequest($jangbu_id, $year_month, $page, $limit, $route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchAdjustJangbuServicesOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchAdjustJangbuServicesOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchAdjustJangbuServicesOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchAdjustJangbuServicesOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerSearchAdjustJangbuServicesAsync
     *
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSearchAdjustJangbuServicesAsync($jangbu_id, $year_month, $page, $limit, $route = null)
    {
        return $this->adjustControllerSearchAdjustJangbuServicesAsyncWithHttpInfo($jangbu_id, $year_month, $page, $limit, $route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerSearchAdjustJangbuServicesAsyncWithHttpInfo
     *
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSearchAdjustJangbuServicesAsyncWithHttpInfo($jangbu_id, $year_month, $page, $limit, $route = null)
    {
        $returnType = '\OpenAPI\Client\Model\SearchAdjustJangbuServicesOutput';
        $request = $this->adjustControllerSearchAdjustJangbuServicesRequest($jangbu_id, $year_month, $page, $limit, $route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerSearchAdjustJangbuServices'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerSearchAdjustJangbuServicesRequest($jangbu_id, $year_month, $page, $limit, $route = null)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerSearchAdjustJangbuServices'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerSearchAdjustJangbuServices'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling adjustControllerSearchAdjustJangbuServices'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling adjustControllerSearchAdjustJangbuServices'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }


        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerSearchChargeJangbuFromJangbu
     *
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchChargeJangbusOutput
     */
    public function adjustControllerSearchChargeJangbuFromJangbu($jangbu_id, $page, $limit, $route = null, $year_month = null)
    {
        list($response) = $this->adjustControllerSearchChargeJangbuFromJangbuWithHttpInfo($jangbu_id, $page, $limit, $route, $year_month);
        return $response;
    }

    /**
     * Operation adjustControllerSearchChargeJangbuFromJangbuWithHttpInfo
     *
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchChargeJangbusOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerSearchChargeJangbuFromJangbuWithHttpInfo($jangbu_id, $page, $limit, $route = null, $year_month = null)
    {
        $request = $this->adjustControllerSearchChargeJangbuFromJangbuRequest($jangbu_id, $page, $limit, $route, $year_month);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchChargeJangbusOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchChargeJangbusOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchChargeJangbusOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchChargeJangbusOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerSearchChargeJangbuFromJangbuAsync
     *
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSearchChargeJangbuFromJangbuAsync($jangbu_id, $page, $limit, $route = null, $year_month = null)
    {
        return $this->adjustControllerSearchChargeJangbuFromJangbuAsyncWithHttpInfo($jangbu_id, $page, $limit, $route, $year_month)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerSearchChargeJangbuFromJangbuAsyncWithHttpInfo
     *
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSearchChargeJangbuFromJangbuAsyncWithHttpInfo($jangbu_id, $page, $limit, $route = null, $year_month = null)
    {
        $returnType = '\OpenAPI\Client\Model\SearchChargeJangbusOutput';
        $request = $this->adjustControllerSearchChargeJangbuFromJangbuRequest($jangbu_id, $page, $limit, $route, $year_month);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerSearchChargeJangbuFromJangbu'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerSearchChargeJangbuFromJangbuRequest($jangbu_id, $page, $limit, $route = null, $year_month = null)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerSearchChargeJangbuFromJangbu'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling adjustControllerSearchChargeJangbuFromJangbu'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling adjustControllerSearchChargeJangbuFromJangbu'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($year_month !== null) {
            if('form' === 'form' && is_array($year_month)) {
                foreach($year_month as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['yearMonth'] = $year_month;
            }
        }


        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerSearchChargeJangbuUserServices
     *
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $service_id 서비스 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchChargeJangbuUserServicesOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerSearchChargeJangbuUserServices($jangbu_id, $year_month, $service_id, $page, $limit, $route = null)
    {
        list($response) = $this->adjustControllerSearchChargeJangbuUserServicesWithHttpInfo($jangbu_id, $year_month, $service_id, $page, $limit, $route);
        return $response;
    }

    /**
     * Operation adjustControllerSearchChargeJangbuUserServicesWithHttpInfo
     *
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $service_id 서비스 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchChargeJangbuUserServicesOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerSearchChargeJangbuUserServicesWithHttpInfo($jangbu_id, $year_month, $service_id, $page, $limit, $route = null)
    {
        $request = $this->adjustControllerSearchChargeJangbuUserServicesRequest($jangbu_id, $year_month, $service_id, $page, $limit, $route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchChargeJangbuUserServicesOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchChargeJangbuUserServicesOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchChargeJangbuUserServicesOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchChargeJangbuUserServicesOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerSearchChargeJangbuUserServicesAsync
     *
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $service_id 서비스 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSearchChargeJangbuUserServicesAsync($jangbu_id, $year_month, $service_id, $page, $limit, $route = null)
    {
        return $this->adjustControllerSearchChargeJangbuUserServicesAsyncWithHttpInfo($jangbu_id, $year_month, $service_id, $page, $limit, $route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerSearchChargeJangbuUserServicesAsyncWithHttpInfo
     *
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $service_id 서비스 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSearchChargeJangbuUserServicesAsyncWithHttpInfo($jangbu_id, $year_month, $service_id, $page, $limit, $route = null)
    {
        $returnType = '\OpenAPI\Client\Model\SearchChargeJangbuUserServicesOutput';
        $request = $this->adjustControllerSearchChargeJangbuUserServicesRequest($jangbu_id, $year_month, $service_id, $page, $limit, $route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerSearchChargeJangbuUserServices'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  float $service_id 서비스 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerSearchChargeJangbuUserServicesRequest($jangbu_id, $year_month, $service_id, $page, $limit, $route = null)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerSearchChargeJangbuUserServices'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerSearchChargeJangbuUserServices'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling adjustControllerSearchChargeJangbuUserServices'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling adjustControllerSearchChargeJangbuUserServices'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling adjustControllerSearchChargeJangbuUserServices'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/service/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }


        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerSearchChargeJangbus
     *
     * 정산내역 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchChargeJangbusOutput
     */
    public function adjustControllerSearchChargeJangbus($page, $limit, $route = null, $jangbu_id = null, $year_month = null)
    {
        list($response) = $this->adjustControllerSearchChargeJangbusWithHttpInfo($page, $limit, $route, $jangbu_id, $year_month);
        return $response;
    }

    /**
     * Operation adjustControllerSearchChargeJangbusWithHttpInfo
     *
     * 정산내역 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchChargeJangbusOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerSearchChargeJangbusWithHttpInfo($page, $limit, $route = null, $jangbu_id = null, $year_month = null)
    {
        $request = $this->adjustControllerSearchChargeJangbusRequest($page, $limit, $route, $jangbu_id, $year_month);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchChargeJangbusOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchChargeJangbusOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchChargeJangbusOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchChargeJangbusOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerSearchChargeJangbusAsync
     *
     * 정산내역 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSearchChargeJangbusAsync($page, $limit, $route = null, $jangbu_id = null, $year_month = null)
    {
        return $this->adjustControllerSearchChargeJangbusAsyncWithHttpInfo($page, $limit, $route, $jangbu_id, $year_month)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerSearchChargeJangbusAsyncWithHttpInfo
     *
     * 정산내역 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSearchChargeJangbusAsyncWithHttpInfo($page, $limit, $route = null, $jangbu_id = null, $year_month = null)
    {
        $returnType = '\OpenAPI\Client\Model\SearchChargeJangbusOutput';
        $request = $this->adjustControllerSearchChargeJangbusRequest($page, $limit, $route, $jangbu_id, $year_month);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerSearchChargeJangbus'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     * @param  float $year_month 정산연월 (YYYYMM) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerSearchChargeJangbusRequest($page, $limit, $route = null, $jangbu_id = null, $year_month = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling adjustControllerSearchChargeJangbus'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling adjustControllerSearchChargeJangbus'
            );
        }

        $resourcePath = '/public/api/adjust';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($jangbu_id !== null) {
            if('form' === 'form' && is_array($jangbu_id)) {
                foreach($jangbu_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jangbuId'] = $jangbu_id;
            }
        }
        // query params
        if ($year_month !== null) {
            if('form' === 'form' && is_array($year_month)) {
                foreach($year_month as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['yearMonth'] = $year_month;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerSendChargeJangbuMailTest
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\SendChagreJangbuMailTestInput $send_chagre_jangbu_mail_test_input send_chagre_jangbu_mail_test_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SendChargeJangbuMailTestOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerSendChargeJangbuMailTest($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input)
    {
        list($response) = $this->adjustControllerSendChargeJangbuMailTestWithHttpInfo($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input);
        return $response;
    }

    /**
     * Operation adjustControllerSendChargeJangbuMailTestWithHttpInfo
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\SendChagreJangbuMailTestInput $send_chagre_jangbu_mail_test_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SendChargeJangbuMailTestOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerSendChargeJangbuMailTestWithHttpInfo($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input)
    {
        $request = $this->adjustControllerSendChargeJangbuMailTestRequest($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SendChargeJangbuMailTestOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SendChargeJangbuMailTestOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SendChargeJangbuMailTestOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SendChargeJangbuMailTestOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerSendChargeJangbuMailTestAsync
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\SendChagreJangbuMailTestInput $send_chagre_jangbu_mail_test_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSendChargeJangbuMailTestAsync($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input)
    {
        return $this->adjustControllerSendChargeJangbuMailTestAsyncWithHttpInfo($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerSendChargeJangbuMailTestAsyncWithHttpInfo
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\SendChagreJangbuMailTestInput $send_chagre_jangbu_mail_test_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerSendChargeJangbuMailTestAsyncWithHttpInfo($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input)
    {
        $returnType = '\OpenAPI\Client\Model\SendChargeJangbuMailTestOutput';
        $request = $this->adjustControllerSendChargeJangbuMailTestRequest($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerSendChargeJangbuMailTest'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\SendChagreJangbuMailTestInput $send_chagre_jangbu_mail_test_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerSendChargeJangbuMailTestRequest($jangbu_id, $year_month, $send_chagre_jangbu_mail_test_input)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerSendChargeJangbuMailTest'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerSendChargeJangbuMailTest'
            );
        }
        // verify the required parameter 'send_chagre_jangbu_mail_test_input' is set
        if ($send_chagre_jangbu_mail_test_input === null || (is_array($send_chagre_jangbu_mail_test_input) && count($send_chagre_jangbu_mail_test_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_chagre_jangbu_mail_test_input when calling adjustControllerSendChargeJangbuMailTest'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/testmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($send_chagre_jangbu_mail_test_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($send_chagre_jangbu_mail_test_input));
            } else {
                $httpBody = $send_chagre_jangbu_mail_test_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerUpdateAdjustJangbuService
     *
     * (해당연월) 장부사 특정 서비스 단가를 수정
     *
     * @param  float $jangbu_id jangbu_id (required)
     * @param  float $year_month year_month (required)
     * @param  float $service_id service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateAdjustJangbuServiceInput $update_adjust_jangbu_service_input update_adjust_jangbu_service_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdjustJangbuService|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerUpdateAdjustJangbuService($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input)
    {
        list($response) = $this->adjustControllerUpdateAdjustJangbuServiceWithHttpInfo($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input);
        return $response;
    }

    /**
     * Operation adjustControllerUpdateAdjustJangbuServiceWithHttpInfo
     *
     * (해당연월) 장부사 특정 서비스 단가를 수정
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     * @param  float $service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateAdjustJangbuServiceInput $update_adjust_jangbu_service_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdjustJangbuService|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerUpdateAdjustJangbuServiceWithHttpInfo($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input)
    {
        $request = $this->adjustControllerUpdateAdjustJangbuServiceRequest($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdjustJangbuService' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdjustJangbuService', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdjustJangbuService';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdjustJangbuService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerUpdateAdjustJangbuServiceAsync
     *
     * (해당연월) 장부사 특정 서비스 단가를 수정
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     * @param  float $service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateAdjustJangbuServiceInput $update_adjust_jangbu_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerUpdateAdjustJangbuServiceAsync($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input)
    {
        return $this->adjustControllerUpdateAdjustJangbuServiceAsyncWithHttpInfo($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerUpdateAdjustJangbuServiceAsyncWithHttpInfo
     *
     * (해당연월) 장부사 특정 서비스 단가를 수정
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     * @param  float $service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateAdjustJangbuServiceInput $update_adjust_jangbu_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerUpdateAdjustJangbuServiceAsyncWithHttpInfo($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input)
    {
        $returnType = '\OpenAPI\Client\Model\AdjustJangbuService';
        $request = $this->adjustControllerUpdateAdjustJangbuServiceRequest($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerUpdateAdjustJangbuService'
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     * @param  float $service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateAdjustJangbuServiceInput $update_adjust_jangbu_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerUpdateAdjustJangbuServiceRequest($jangbu_id, $year_month, $service_id, $update_adjust_jangbu_service_input)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerUpdateAdjustJangbuService'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerUpdateAdjustJangbuService'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling adjustControllerUpdateAdjustJangbuService'
            );
        }
        // verify the required parameter 'update_adjust_jangbu_service_input' is set
        if ($update_adjust_jangbu_service_input === null || (is_array($update_adjust_jangbu_service_input) && count($update_adjust_jangbu_service_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_adjust_jangbu_service_input when calling adjustControllerUpdateAdjustJangbuService'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/service/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_adjust_jangbu_service_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_adjust_jangbu_service_input));
            } else {
                $httpBody = $update_adjust_jangbu_service_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuPaid
     *
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPaidInput $update_charge_jangbu_paid_input update_charge_jangbu_paid_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChargeJangbu|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerUpdateChargeJangbuPaid($jangbu_id, $year_month, $update_charge_jangbu_paid_input)
    {
        list($response) = $this->adjustControllerUpdateChargeJangbuPaidWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_paid_input);
        return $response;
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuPaidWithHttpInfo
     *
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPaidInput $update_charge_jangbu_paid_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChargeJangbu|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerUpdateChargeJangbuPaidWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_paid_input)
    {
        $request = $this->adjustControllerUpdateChargeJangbuPaidRequest($jangbu_id, $year_month, $update_charge_jangbu_paid_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChargeJangbu' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChargeJangbu', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChargeJangbu';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChargeJangbu',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuPaidAsync
     *
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPaidInput $update_charge_jangbu_paid_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerUpdateChargeJangbuPaidAsync($jangbu_id, $year_month, $update_charge_jangbu_paid_input)
    {
        return $this->adjustControllerUpdateChargeJangbuPaidAsyncWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_paid_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuPaidAsyncWithHttpInfo
     *
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPaidInput $update_charge_jangbu_paid_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerUpdateChargeJangbuPaidAsyncWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_paid_input)
    {
        $returnType = '\OpenAPI\Client\Model\ChargeJangbu';
        $request = $this->adjustControllerUpdateChargeJangbuPaidRequest($jangbu_id, $year_month, $update_charge_jangbu_paid_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerUpdateChargeJangbuPaid'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPaidInput $update_charge_jangbu_paid_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerUpdateChargeJangbuPaidRequest($jangbu_id, $year_month, $update_charge_jangbu_paid_input)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerUpdateChargeJangbuPaid'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerUpdateChargeJangbuPaid'
            );
        }
        // verify the required parameter 'update_charge_jangbu_paid_input' is set
        if ($update_charge_jangbu_paid_input === null || (is_array($update_charge_jangbu_paid_input) && count($update_charge_jangbu_paid_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_charge_jangbu_paid_input when calling adjustControllerUpdateChargeJangbuPaid'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/paid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_charge_jangbu_paid_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_charge_jangbu_paid_input));
            } else {
                $httpBody = $update_charge_jangbu_paid_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuPartnership
     *
     * (해당연월) 장부사의 파트너쉽 금액 수정
     *
     * @param  float $jangbu_id jangbu_id (required)
     * @param  float $year_month year_month (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPartnershipInput $update_charge_jangbu_partnership_input update_charge_jangbu_partnership_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChargeJangbuPartnership|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerUpdateChargeJangbuPartnership($jangbu_id, $year_month, $update_charge_jangbu_partnership_input)
    {
        list($response) = $this->adjustControllerUpdateChargeJangbuPartnershipWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_partnership_input);
        return $response;
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuPartnershipWithHttpInfo
     *
     * (해당연월) 장부사의 파트너쉽 금액 수정
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPartnershipInput $update_charge_jangbu_partnership_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChargeJangbuPartnership|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerUpdateChargeJangbuPartnershipWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_partnership_input)
    {
        $request = $this->adjustControllerUpdateChargeJangbuPartnershipRequest($jangbu_id, $year_month, $update_charge_jangbu_partnership_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChargeJangbuPartnership' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChargeJangbuPartnership', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChargeJangbuPartnership';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChargeJangbuPartnership',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuPartnershipAsync
     *
     * (해당연월) 장부사의 파트너쉽 금액 수정
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPartnershipInput $update_charge_jangbu_partnership_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerUpdateChargeJangbuPartnershipAsync($jangbu_id, $year_month, $update_charge_jangbu_partnership_input)
    {
        return $this->adjustControllerUpdateChargeJangbuPartnershipAsyncWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_partnership_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuPartnershipAsyncWithHttpInfo
     *
     * (해당연월) 장부사의 파트너쉽 금액 수정
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPartnershipInput $update_charge_jangbu_partnership_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerUpdateChargeJangbuPartnershipAsyncWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_partnership_input)
    {
        $returnType = '\OpenAPI\Client\Model\ChargeJangbuPartnership';
        $request = $this->adjustControllerUpdateChargeJangbuPartnershipRequest($jangbu_id, $year_month, $update_charge_jangbu_partnership_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerUpdateChargeJangbuPartnership'
     *
     * @param  float $jangbu_id (required)
     * @param  float $year_month (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuPartnershipInput $update_charge_jangbu_partnership_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerUpdateChargeJangbuPartnershipRequest($jangbu_id, $year_month, $update_charge_jangbu_partnership_input)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerUpdateChargeJangbuPartnership'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerUpdateChargeJangbuPartnership'
            );
        }
        // verify the required parameter 'update_charge_jangbu_partnership_input' is set
        if ($update_charge_jangbu_partnership_input === null || (is_array($update_charge_jangbu_partnership_input) && count($update_charge_jangbu_partnership_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_charge_jangbu_partnership_input when calling adjustControllerUpdateChargeJangbuPartnership'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/partnership';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_charge_jangbu_partnership_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_charge_jangbu_partnership_input));
            } else {
                $httpBody = $update_charge_jangbu_partnership_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuStatus
     *
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuStatusInput $update_charge_jangbu_status_input update_charge_jangbu_status_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChargeJangbu|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function adjustControllerUpdateChargeJangbuStatus($jangbu_id, $year_month, $update_charge_jangbu_status_input)
    {
        list($response) = $this->adjustControllerUpdateChargeJangbuStatusWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_status_input);
        return $response;
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuStatusWithHttpInfo
     *
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuStatusInput $update_charge_jangbu_status_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChargeJangbu|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustControllerUpdateChargeJangbuStatusWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_status_input)
    {
        $request = $this->adjustControllerUpdateChargeJangbuStatusRequest($jangbu_id, $year_month, $update_charge_jangbu_status_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChargeJangbu' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChargeJangbu', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChargeJangbu';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChargeJangbu',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuStatusAsync
     *
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuStatusInput $update_charge_jangbu_status_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerUpdateChargeJangbuStatusAsync($jangbu_id, $year_month, $update_charge_jangbu_status_input)
    {
        return $this->adjustControllerUpdateChargeJangbuStatusAsyncWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_status_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustControllerUpdateChargeJangbuStatusAsyncWithHttpInfo
     *
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuStatusInput $update_charge_jangbu_status_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustControllerUpdateChargeJangbuStatusAsyncWithHttpInfo($jangbu_id, $year_month, $update_charge_jangbu_status_input)
    {
        $returnType = '\OpenAPI\Client\Model\ChargeJangbu';
        $request = $this->adjustControllerUpdateChargeJangbuStatusRequest($jangbu_id, $year_month, $update_charge_jangbu_status_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustControllerUpdateChargeJangbuStatus'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $year_month 해당연월 (YYYYMM) (required)
     * @param  \OpenAPI\Client\Model\UpdateChargeJangbuStatusInput $update_charge_jangbu_status_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adjustControllerUpdateChargeJangbuStatusRequest($jangbu_id, $year_month, $update_charge_jangbu_status_input)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling adjustControllerUpdateChargeJangbuStatus'
            );
        }
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling adjustControllerUpdateChargeJangbuStatus'
            );
        }
        // verify the required parameter 'update_charge_jangbu_status_input' is set
        if ($update_charge_jangbu_status_input === null || (is_array($update_charge_jangbu_status_input) && count($update_charge_jangbu_status_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_charge_jangbu_status_input when calling adjustControllerUpdateChargeJangbuStatus'
            );
        }

        $resourcePath = '/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_charge_jangbu_status_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_charge_jangbu_status_input));
            } else {
                $httpBody = $update_charge_jangbu_status_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authControllerDeleteToken
     *
     * 로그아웃 (토큰삭제)
     *
     * @param  string $refresh_token 리프레시 토큰 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function authControllerDeleteToken($refresh_token)
    {
        $this->authControllerDeleteTokenWithHttpInfo($refresh_token);
    }

    /**
     * Operation authControllerDeleteTokenWithHttpInfo
     *
     * 로그아웃 (토큰삭제)
     *
     * @param  string $refresh_token 리프레시 토큰 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function authControllerDeleteTokenWithHttpInfo($refresh_token)
    {
        $request = $this->authControllerDeleteTokenRequest($refresh_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authControllerDeleteTokenAsync
     *
     * 로그아웃 (토큰삭제)
     *
     * @param  string $refresh_token 리프레시 토큰 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authControllerDeleteTokenAsync($refresh_token)
    {
        return $this->authControllerDeleteTokenAsyncWithHttpInfo($refresh_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authControllerDeleteTokenAsyncWithHttpInfo
     *
     * 로그아웃 (토큰삭제)
     *
     * @param  string $refresh_token 리프레시 토큰 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authControllerDeleteTokenAsyncWithHttpInfo($refresh_token)
    {
        $returnType = '';
        $request = $this->authControllerDeleteTokenRequest($refresh_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authControllerDeleteToken'
     *
     * @param  string $refresh_token 리프레시 토큰 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authControllerDeleteTokenRequest($refresh_token)
    {
        // verify the required parameter 'refresh_token' is set
        if ($refresh_token === null || (is_array($refresh_token) && count($refresh_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refresh_token when calling authControllerDeleteToken'
            );
        }

        $resourcePath = '/public/api/auth/{refreshToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($refresh_token !== null) {
            $resourcePath = str_replace(
                '{' . 'refreshToken' . '}',
                ObjectSerializer::toPathValue($refresh_token),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authControllerLogin
     *
     * 토큰발급
     *
     * @param  \OpenAPI\Client\Model\LoginInput $login_input 로그인 요청 데이터 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoginOutput|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function authControllerLogin($login_input)
    {
        list($response) = $this->authControllerLoginWithHttpInfo($login_input);
        return $response;
    }

    /**
     * Operation authControllerLoginWithHttpInfo
     *
     * 토큰발급
     *
     * @param  \OpenAPI\Client\Model\LoginInput $login_input 로그인 요청 데이터 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoginOutput|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authControllerLoginWithHttpInfo($login_input)
    {
        $request = $this->authControllerLoginRequest($login_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LoginOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoginOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoginOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoginOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authControllerLoginAsync
     *
     * 토큰발급
     *
     * @param  \OpenAPI\Client\Model\LoginInput $login_input 로그인 요청 데이터 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authControllerLoginAsync($login_input)
    {
        return $this->authControllerLoginAsyncWithHttpInfo($login_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authControllerLoginAsyncWithHttpInfo
     *
     * 토큰발급
     *
     * @param  \OpenAPI\Client\Model\LoginInput $login_input 로그인 요청 데이터 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authControllerLoginAsyncWithHttpInfo($login_input)
    {
        $returnType = '\OpenAPI\Client\Model\LoginOutput';
        $request = $this->authControllerLoginRequest($login_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authControllerLogin'
     *
     * @param  \OpenAPI\Client\Model\LoginInput $login_input 로그인 요청 데이터 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authControllerLoginRequest($login_input)
    {
        // verify the required parameter 'login_input' is set
        if ($login_input === null || (is_array($login_input) && count($login_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login_input when calling authControllerLogin'
            );
        }

        $resourcePath = '/public/api/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($login_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($login_input));
            } else {
                $httpBody = $login_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authControllerRefresh
     *
     * 토큰갱신
     *
     * @param  \OpenAPI\Client\Model\RefreshInput $refresh_input 토큰갱신 요청 데이터 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RefreshOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function authControllerRefresh($refresh_input)
    {
        list($response) = $this->authControllerRefreshWithHttpInfo($refresh_input);
        return $response;
    }

    /**
     * Operation authControllerRefreshWithHttpInfo
     *
     * 토큰갱신
     *
     * @param  \OpenAPI\Client\Model\RefreshInput $refresh_input 토큰갱신 요청 데이터 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RefreshOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authControllerRefreshWithHttpInfo($refresh_input)
    {
        $request = $this->authControllerRefreshRequest($refresh_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RefreshOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RefreshOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RefreshOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RefreshOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authControllerRefreshAsync
     *
     * 토큰갱신
     *
     * @param  \OpenAPI\Client\Model\RefreshInput $refresh_input 토큰갱신 요청 데이터 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authControllerRefreshAsync($refresh_input)
    {
        return $this->authControllerRefreshAsyncWithHttpInfo($refresh_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authControllerRefreshAsyncWithHttpInfo
     *
     * 토큰갱신
     *
     * @param  \OpenAPI\Client\Model\RefreshInput $refresh_input 토큰갱신 요청 데이터 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authControllerRefreshAsyncWithHttpInfo($refresh_input)
    {
        $returnType = '\OpenAPI\Client\Model\RefreshOutput';
        $request = $this->authControllerRefreshRequest($refresh_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authControllerRefresh'
     *
     * @param  \OpenAPI\Client\Model\RefreshInput $refresh_input 토큰갱신 요청 데이터 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authControllerRefreshRequest($refresh_input)
    {
        // verify the required parameter 'refresh_input' is set
        if ($refresh_input === null || (is_array($refresh_input) && count($refresh_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refresh_input when calling authControllerRefresh'
            );
        }

        $resourcePath = '/public/api/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($refresh_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($refresh_input));
            } else {
                $httpBody = $refresh_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorControllerGetCert
     *
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $error_id 에러 순번 (required)
     * @param  float $connect_id 연결정보 순번 (required)
     * @param  string $path S3 경로 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetCertOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function errorControllerGetCert($error_id, $connect_id, $path)
    {
        list($response) = $this->errorControllerGetCertWithHttpInfo($error_id, $connect_id, $path);
        return $response;
    }

    /**
     * Operation errorControllerGetCertWithHttpInfo
     *
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $error_id 에러 순번 (required)
     * @param  float $connect_id 연결정보 순번 (required)
     * @param  string $path S3 경로 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetCertOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorControllerGetCertWithHttpInfo($error_id, $connect_id, $path)
    {
        $request = $this->errorControllerGetCertRequest($error_id, $connect_id, $path);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetCertOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetCertOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetCertOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetCertOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorControllerGetCertAsync
     *
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $error_id 에러 순번 (required)
     * @param  float $connect_id 연결정보 순번 (required)
     * @param  string $path S3 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorControllerGetCertAsync($error_id, $connect_id, $path)
    {
        return $this->errorControllerGetCertAsyncWithHttpInfo($error_id, $connect_id, $path)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorControllerGetCertAsyncWithHttpInfo
     *
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $error_id 에러 순번 (required)
     * @param  float $connect_id 연결정보 순번 (required)
     * @param  string $path S3 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorControllerGetCertAsyncWithHttpInfo($error_id, $connect_id, $path)
    {
        $returnType = '\OpenAPI\Client\Model\GetCertOutput';
        $request = $this->errorControllerGetCertRequest($error_id, $connect_id, $path);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorControllerGetCert'
     *
     * @param  float $error_id 에러 순번 (required)
     * @param  float $connect_id 연결정보 순번 (required)
     * @param  string $path S3 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function errorControllerGetCertRequest($error_id, $connect_id, $path)
    {
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorControllerGetCert'
            );
        }
        // verify the required parameter 'connect_id' is set
        if ($connect_id === null || (is_array($connect_id) && count($connect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connect_id when calling errorControllerGetCert'
            );
        }
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling errorControllerGetCert'
            );
        }

        $resourcePath = '/public/api/error/{errorId}/cert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($connect_id !== null) {
            if('form' === 'form' && is_array($connect_id)) {
                foreach($connect_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['connectId'] = $connect_id;
            }
        }
        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }


        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorControllerGetError
     *
     * 에러 조회 (관리자 전용)
     *
     * @param  float $error_id 에러 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PcClientError|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function errorControllerGetError($error_id)
    {
        list($response) = $this->errorControllerGetErrorWithHttpInfo($error_id);
        return $response;
    }

    /**
     * Operation errorControllerGetErrorWithHttpInfo
     *
     * 에러 조회 (관리자 전용)
     *
     * @param  float $error_id 에러 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PcClientError|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorControllerGetErrorWithHttpInfo($error_id)
    {
        $request = $this->errorControllerGetErrorRequest($error_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PcClientError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PcClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PcClientError';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PcClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorControllerGetErrorAsync
     *
     * 에러 조회 (관리자 전용)
     *
     * @param  float $error_id 에러 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorControllerGetErrorAsync($error_id)
    {
        return $this->errorControllerGetErrorAsyncWithHttpInfo($error_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorControllerGetErrorAsyncWithHttpInfo
     *
     * 에러 조회 (관리자 전용)
     *
     * @param  float $error_id 에러 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorControllerGetErrorAsyncWithHttpInfo($error_id)
    {
        $returnType = '\OpenAPI\Client\Model\PcClientError';
        $request = $this->errorControllerGetErrorRequest($error_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorControllerGetError'
     *
     * @param  float $error_id 에러 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function errorControllerGetErrorRequest($error_id)
    {
        // verify the required parameter 'error_id' is set
        if ($error_id === null || (is_array($error_id) && count($error_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $error_id when calling errorControllerGetError'
            );
        }

        $resourcePath = '/public/api/error/{errorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($error_id !== null) {
            $resourcePath = str_replace(
                '{' . 'errorId' . '}',
                ObjectSerializer::toPathValue($error_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation errorControllerGetErrors
     *
     * 에러 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $app_version 앱 버전 (optional)
     * @param  string $app_name 앱 이름 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  float $user_id 회원의 순번 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetErrorsResponse
     */
    public function errorControllerGetErrors($page, $limit, $start_at, $end_at, $route = null, $app_version = null, $app_name = null, $jangbu_name = null, $user_id = null)
    {
        list($response) = $this->errorControllerGetErrorsWithHttpInfo($page, $limit, $start_at, $end_at, $route, $app_version, $app_name, $jangbu_name, $user_id);
        return $response;
    }

    /**
     * Operation errorControllerGetErrorsWithHttpInfo
     *
     * 에러 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $app_version 앱 버전 (optional)
     * @param  string $app_name 앱 이름 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  float $user_id 회원의 순번 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetErrorsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function errorControllerGetErrorsWithHttpInfo($page, $limit, $start_at, $end_at, $route = null, $app_version = null, $app_name = null, $jangbu_name = null, $user_id = null)
    {
        $request = $this->errorControllerGetErrorsRequest($page, $limit, $start_at, $end_at, $route, $app_version, $app_name, $jangbu_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetErrorsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetErrorsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetErrorsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetErrorsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation errorControllerGetErrorsAsync
     *
     * 에러 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $app_version 앱 버전 (optional)
     * @param  string $app_name 앱 이름 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  float $user_id 회원의 순번 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorControllerGetErrorsAsync($page, $limit, $start_at, $end_at, $route = null, $app_version = null, $app_name = null, $jangbu_name = null, $user_id = null)
    {
        return $this->errorControllerGetErrorsAsyncWithHttpInfo($page, $limit, $start_at, $end_at, $route, $app_version, $app_name, $jangbu_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation errorControllerGetErrorsAsyncWithHttpInfo
     *
     * 에러 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $app_version 앱 버전 (optional)
     * @param  string $app_name 앱 이름 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  float $user_id 회원의 순번 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function errorControllerGetErrorsAsyncWithHttpInfo($page, $limit, $start_at, $end_at, $route = null, $app_version = null, $app_name = null, $jangbu_name = null, $user_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetErrorsResponse';
        $request = $this->errorControllerGetErrorsRequest($page, $limit, $start_at, $end_at, $route, $app_version, $app_name, $jangbu_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'errorControllerGetErrors'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $start_at 시작일시 (YYYYMMDDHHmm) (required)
     * @param  string $end_at 종료일시 (YYYYMMDDHHmm) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $app_version 앱 버전 (optional)
     * @param  string $app_name 앱 이름 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  float $user_id 회원의 순번 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function errorControllerGetErrorsRequest($page, $limit, $start_at, $end_at, $route = null, $app_version = null, $app_name = null, $jangbu_name = null, $user_id = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling errorControllerGetErrors'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling errorControllerGetErrors'
            );
        }
        // verify the required parameter 'start_at' is set
        if ($start_at === null || (is_array($start_at) && count($start_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_at when calling errorControllerGetErrors'
            );
        }
        // verify the required parameter 'end_at' is set
        if ($end_at === null || (is_array($end_at) && count($end_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_at when calling errorControllerGetErrors'
            );
        }

        $resourcePath = '/public/api/error';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($start_at !== null) {
            if('form' === 'form' && is_array($start_at)) {
                foreach($start_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startAt'] = $start_at;
            }
        }
        // query params
        if ($end_at !== null) {
            if('form' === 'form' && is_array($end_at)) {
                foreach($end_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endAt'] = $end_at;
            }
        }
        // query params
        if ($app_version !== null) {
            if('form' === 'form' && is_array($app_version)) {
                foreach($app_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['appVersion'] = $app_version;
            }
        }
        // query params
        if ($app_name !== null) {
            if('form' === 'form' && is_array($app_name)) {
                foreach($app_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['appName'] = $app_name;
            }
        }
        // query params
        if ($jangbu_name !== null) {
            if('form' === 'form' && is_array($jangbu_name)) {
                foreach($jangbu_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jangbuName'] = $jangbu_name;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jangbuControllerGetJangbu
     *
     * 장부사 조회 (관리자 전용)
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Jangbu|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function jangbuControllerGetJangbu($jangbu_id)
    {
        list($response) = $this->jangbuControllerGetJangbuWithHttpInfo($jangbu_id);
        return $response;
    }

    /**
     * Operation jangbuControllerGetJangbuWithHttpInfo
     *
     * 장부사 조회 (관리자 전용)
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Jangbu|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jangbuControllerGetJangbuWithHttpInfo($jangbu_id)
    {
        $request = $this->jangbuControllerGetJangbuRequest($jangbu_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Jangbu' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Jangbu', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Jangbu';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Jangbu',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jangbuControllerGetJangbuAsync
     *
     * 장부사 조회 (관리자 전용)
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerGetJangbuAsync($jangbu_id)
    {
        return $this->jangbuControllerGetJangbuAsyncWithHttpInfo($jangbu_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jangbuControllerGetJangbuAsyncWithHttpInfo
     *
     * 장부사 조회 (관리자 전용)
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerGetJangbuAsyncWithHttpInfo($jangbu_id)
    {
        $returnType = '\OpenAPI\Client\Model\Jangbu';
        $request = $this->jangbuControllerGetJangbuRequest($jangbu_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jangbuControllerGetJangbu'
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jangbuControllerGetJangbuRequest($jangbu_id)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling jangbuControllerGetJangbu'
            );
        }

        $resourcePath = '/public/api/jangbu/{jangbuId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jangbuControllerGetJangbus
     *
     * 장부사 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetJangbusOutput
     */
    public function jangbuControllerGetJangbus($page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        list($response) = $this->jangbuControllerGetJangbusWithHttpInfo($page, $limit, $route, $service_ids, $jangbu_name, $rep_id);
        return $response;
    }

    /**
     * Operation jangbuControllerGetJangbusWithHttpInfo
     *
     * 장부사 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetJangbusOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function jangbuControllerGetJangbusWithHttpInfo($page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        $request = $this->jangbuControllerGetJangbusRequest($page, $limit, $route, $service_ids, $jangbu_name, $rep_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetJangbusOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetJangbusOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetJangbusOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetJangbusOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jangbuControllerGetJangbusAsync
     *
     * 장부사 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerGetJangbusAsync($page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        return $this->jangbuControllerGetJangbusAsyncWithHttpInfo($page, $limit, $route, $service_ids, $jangbu_name, $rep_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jangbuControllerGetJangbusAsyncWithHttpInfo
     *
     * 장부사 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerGetJangbusAsyncWithHttpInfo($page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetJangbusOutput';
        $request = $this->jangbuControllerGetJangbusRequest($page, $limit, $route, $service_ids, $jangbu_name, $rep_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jangbuControllerGetJangbus'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jangbuControllerGetJangbusRequest($page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling jangbuControllerGetJangbus'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling jangbuControllerGetJangbus'
            );
        }

        $resourcePath = '/public/api/jangbu';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($service_ids !== null) {
            if('form' === 'form' && is_array($service_ids)) {
                foreach($service_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceIds'] = $service_ids;
            }
        }
        // query params
        if ($jangbu_name !== null) {
            if('form' === 'form' && is_array($jangbu_name)) {
                foreach($jangbu_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jangbuName'] = $jangbu_name;
            }
        }
        // query params
        if ($rep_id !== null) {
            if('form' === 'form' && is_array($rep_id)) {
                foreach($rep_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['repId'] = $rep_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jangbuControllerGetJangbusWithChargeJangbuPartnership
     *
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     *
     * @param  float $year_month 해당연월 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetJangbusOutput
     */
    public function jangbuControllerGetJangbusWithChargeJangbuPartnership($year_month, $page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        list($response) = $this->jangbuControllerGetJangbusWithChargeJangbuPartnershipWithHttpInfo($year_month, $page, $limit, $route, $service_ids, $jangbu_name, $rep_id);
        return $response;
    }

    /**
     * Operation jangbuControllerGetJangbusWithChargeJangbuPartnershipWithHttpInfo
     *
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     *
     * @param  float $year_month 해당연월 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetJangbusOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function jangbuControllerGetJangbusWithChargeJangbuPartnershipWithHttpInfo($year_month, $page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        $request = $this->jangbuControllerGetJangbusWithChargeJangbuPartnershipRequest($year_month, $page, $limit, $route, $service_ids, $jangbu_name, $rep_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetJangbusOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetJangbusOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetJangbusOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetJangbusOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jangbuControllerGetJangbusWithChargeJangbuPartnershipAsync
     *
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     *
     * @param  float $year_month 해당연월 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerGetJangbusWithChargeJangbuPartnershipAsync($year_month, $page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        return $this->jangbuControllerGetJangbusWithChargeJangbuPartnershipAsyncWithHttpInfo($year_month, $page, $limit, $route, $service_ids, $jangbu_name, $rep_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jangbuControllerGetJangbusWithChargeJangbuPartnershipAsyncWithHttpInfo
     *
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     *
     * @param  float $year_month 해당연월 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerGetJangbusWithChargeJangbuPartnershipAsyncWithHttpInfo($year_month, $page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetJangbusOutput';
        $request = $this->jangbuControllerGetJangbusWithChargeJangbuPartnershipRequest($year_month, $page, $limit, $route, $service_ids, $jangbu_name, $rep_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jangbuControllerGetJangbusWithChargeJangbuPartnership'
     *
     * @param  float $year_month 해당연월 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float[] $service_ids 서비스 순번 목록 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $rep_id 장부사 아이디 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jangbuControllerGetJangbusWithChargeJangbuPartnershipRequest($year_month, $page, $limit, $route = null, $service_ids = null, $jangbu_name = null, $rep_id = null)
    {
        // verify the required parameter 'year_month' is set
        if ($year_month === null || (is_array($year_month) && count($year_month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year_month when calling jangbuControllerGetJangbusWithChargeJangbuPartnership'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling jangbuControllerGetJangbusWithChargeJangbuPartnership'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling jangbuControllerGetJangbusWithChargeJangbuPartnership'
            );
        }

        $resourcePath = '/public/api/jangbu/yearMonth/{yearMonth}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($service_ids !== null) {
            if('form' === 'form' && is_array($service_ids)) {
                foreach($service_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceIds'] = $service_ids;
            }
        }
        // query params
        if ($jangbu_name !== null) {
            if('form' === 'form' && is_array($jangbu_name)) {
                foreach($jangbu_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jangbuName'] = $jangbu_name;
            }
        }
        // query params
        if ($rep_id !== null) {
            if('form' === 'form' && is_array($rep_id)) {
                foreach($rep_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['repId'] = $rep_id;
            }
        }


        // path params
        if ($year_month !== null) {
            $resourcePath = str_replace(
                '{' . 'yearMonth' . '}',
                ObjectSerializer::toPathValue($year_month),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jangbuControllerRegisterJangbu
     *
     * 장부사 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterJangbuInput $register_jangbu_input register_jangbu_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Jangbu|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function jangbuControllerRegisterJangbu($register_jangbu_input)
    {
        list($response) = $this->jangbuControllerRegisterJangbuWithHttpInfo($register_jangbu_input);
        return $response;
    }

    /**
     * Operation jangbuControllerRegisterJangbuWithHttpInfo
     *
     * 장부사 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterJangbuInput $register_jangbu_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Jangbu|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jangbuControllerRegisterJangbuWithHttpInfo($register_jangbu_input)
    {
        $request = $this->jangbuControllerRegisterJangbuRequest($register_jangbu_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Jangbu' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Jangbu', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Jangbu';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Jangbu',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jangbuControllerRegisterJangbuAsync
     *
     * 장부사 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterJangbuInput $register_jangbu_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerRegisterJangbuAsync($register_jangbu_input)
    {
        return $this->jangbuControllerRegisterJangbuAsyncWithHttpInfo($register_jangbu_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jangbuControllerRegisterJangbuAsyncWithHttpInfo
     *
     * 장부사 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterJangbuInput $register_jangbu_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerRegisterJangbuAsyncWithHttpInfo($register_jangbu_input)
    {
        $returnType = '\OpenAPI\Client\Model\Jangbu';
        $request = $this->jangbuControllerRegisterJangbuRequest($register_jangbu_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jangbuControllerRegisterJangbu'
     *
     * @param  \OpenAPI\Client\Model\RegisterJangbuInput $register_jangbu_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jangbuControllerRegisterJangbuRequest($register_jangbu_input)
    {
        // verify the required parameter 'register_jangbu_input' is set
        if ($register_jangbu_input === null || (is_array($register_jangbu_input) && count($register_jangbu_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_jangbu_input when calling jangbuControllerRegisterJangbu'
            );
        }

        $resourcePath = '/public/api/jangbu';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_jangbu_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_jangbu_input));
            } else {
                $httpBody = $register_jangbu_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation jangbuControllerUpdateJangbu
     *
     * 장부사 수정 (관리자 전용)
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateJangbuInput $update_jangbu_input update_jangbu_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Jangbu|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function jangbuControllerUpdateJangbu($jangbu_id, $update_jangbu_input)
    {
        list($response) = $this->jangbuControllerUpdateJangbuWithHttpInfo($jangbu_id, $update_jangbu_input);
        return $response;
    }

    /**
     * Operation jangbuControllerUpdateJangbuWithHttpInfo
     *
     * 장부사 수정 (관리자 전용)
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateJangbuInput $update_jangbu_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Jangbu|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function jangbuControllerUpdateJangbuWithHttpInfo($jangbu_id, $update_jangbu_input)
    {
        $request = $this->jangbuControllerUpdateJangbuRequest($jangbu_id, $update_jangbu_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Jangbu' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Jangbu', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Jangbu';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Jangbu',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation jangbuControllerUpdateJangbuAsync
     *
     * 장부사 수정 (관리자 전용)
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateJangbuInput $update_jangbu_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerUpdateJangbuAsync($jangbu_id, $update_jangbu_input)
    {
        return $this->jangbuControllerUpdateJangbuAsyncWithHttpInfo($jangbu_id, $update_jangbu_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation jangbuControllerUpdateJangbuAsyncWithHttpInfo
     *
     * 장부사 수정 (관리자 전용)
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateJangbuInput $update_jangbu_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function jangbuControllerUpdateJangbuAsyncWithHttpInfo($jangbu_id, $update_jangbu_input)
    {
        $returnType = '\OpenAPI\Client\Model\Jangbu';
        $request = $this->jangbuControllerUpdateJangbuRequest($jangbu_id, $update_jangbu_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'jangbuControllerUpdateJangbu'
     *
     * @param  float $jangbu_id 장부사의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateJangbuInput $update_jangbu_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function jangbuControllerUpdateJangbuRequest($jangbu_id, $update_jangbu_input)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling jangbuControllerUpdateJangbu'
            );
        }
        // verify the required parameter 'update_jangbu_input' is set
        if ($update_jangbu_input === null || (is_array($update_jangbu_input) && count($update_jangbu_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_jangbu_input when calling jangbuControllerUpdateJangbu'
            );
        }

        $resourcePath = '/public/api/jangbu/{jangbuId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_jangbu_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_jangbu_input));
            } else {
                $httpBody = $update_jangbu_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerFindMember
     *
     * 아이디 찾기 또는 패스워드 찾기
     *
     * @param  \OpenAPI\Client\Model\FindMemberInput $find_member_input find_member_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FindMemberOutput|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerFindMember($find_member_input)
    {
        list($response) = $this->memberControllerFindMemberWithHttpInfo($find_member_input);
        return $response;
    }

    /**
     * Operation memberControllerFindMemberWithHttpInfo
     *
     * 아이디 찾기 또는 패스워드 찾기
     *
     * @param  \OpenAPI\Client\Model\FindMemberInput $find_member_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FindMemberOutput|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerFindMemberWithHttpInfo($find_member_input)
    {
        $request = $this->memberControllerFindMemberRequest($find_member_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FindMemberOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FindMemberOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FindMemberOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FindMemberOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerFindMemberAsync
     *
     * 아이디 찾기 또는 패스워드 찾기
     *
     * @param  \OpenAPI\Client\Model\FindMemberInput $find_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerFindMemberAsync($find_member_input)
    {
        return $this->memberControllerFindMemberAsyncWithHttpInfo($find_member_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerFindMemberAsyncWithHttpInfo
     *
     * 아이디 찾기 또는 패스워드 찾기
     *
     * @param  \OpenAPI\Client\Model\FindMemberInput $find_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerFindMemberAsyncWithHttpInfo($find_member_input)
    {
        $returnType = '\OpenAPI\Client\Model\FindMemberOutput';
        $request = $this->memberControllerFindMemberRequest($find_member_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerFindMember'
     *
     * @param  \OpenAPI\Client\Model\FindMemberInput $find_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerFindMemberRequest($find_member_input)
    {
        // verify the required parameter 'find_member_input' is set
        if ($find_member_input === null || (is_array($find_member_input) && count($find_member_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $find_member_input when calling memberControllerFindMember'
            );
        }

        $resourcePath = '/public/api/member/find/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($find_member_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($find_member_input));
            } else {
                $httpBody = $find_member_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerGetMember
     *
     * 회원 조회
     *
     * @param  float $user_id 회원의 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerGetMember($user_id)
    {
        list($response) = $this->memberControllerGetMemberWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation memberControllerGetMemberWithHttpInfo
     *
     * 회원 조회
     *
     * @param  float $user_id 회원의 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerGetMemberWithHttpInfo($user_id)
    {
        $request = $this->memberControllerGetMemberRequest($user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerGetMemberAsync
     *
     * 회원 조회
     *
     * @param  float $user_id 회원의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerGetMemberAsync($user_id)
    {
        return $this->memberControllerGetMemberAsyncWithHttpInfo($user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerGetMemberAsyncWithHttpInfo
     *
     * 회원 조회
     *
     * @param  float $user_id 회원의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerGetMemberAsyncWithHttpInfo($user_id)
    {
        $returnType = '\OpenAPI\Client\Model\User';
        $request = $this->memberControllerGetMemberRequest($user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerGetMember'
     *
     * @param  float $user_id 회원의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerGetMemberRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling memberControllerGetMember'
            );
        }

        $resourcePath = '/public/api/member/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerGetMembers
     *
     * 회원 목록 검색
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param  string $user_name 회원명 (optional)
     * @param  string $ceo_name 대표자명 (optional)
     * @param  float $user_level 회원레벨 (고객,장부사,관리자) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetMembersOutput
     */
    public function memberControllerGetMembers($page, $limit, $route = null, $jangbu_id = null, $service_id = null, $active = null, $user_name = null, $ceo_name = null, $user_level = null)
    {
        list($response) = $this->memberControllerGetMembersWithHttpInfo($page, $limit, $route, $jangbu_id, $service_id, $active, $user_name, $ceo_name, $user_level);
        return $response;
    }

    /**
     * Operation memberControllerGetMembersWithHttpInfo
     *
     * 회원 목록 검색
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param  string $user_name 회원명 (optional)
     * @param  string $ceo_name 대표자명 (optional)
     * @param  float $user_level 회원레벨 (고객,장부사,관리자) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetMembersOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerGetMembersWithHttpInfo($page, $limit, $route = null, $jangbu_id = null, $service_id = null, $active = null, $user_name = null, $ceo_name = null, $user_level = null)
    {
        $request = $this->memberControllerGetMembersRequest($page, $limit, $route, $jangbu_id, $service_id, $active, $user_name, $ceo_name, $user_level);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetMembersOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetMembersOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetMembersOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetMembersOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerGetMembersAsync
     *
     * 회원 목록 검색
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param  string $user_name 회원명 (optional)
     * @param  string $ceo_name 대표자명 (optional)
     * @param  float $user_level 회원레벨 (고객,장부사,관리자) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerGetMembersAsync($page, $limit, $route = null, $jangbu_id = null, $service_id = null, $active = null, $user_name = null, $ceo_name = null, $user_level = null)
    {
        return $this->memberControllerGetMembersAsyncWithHttpInfo($page, $limit, $route, $jangbu_id, $service_id, $active, $user_name, $ceo_name, $user_level)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerGetMembersAsyncWithHttpInfo
     *
     * 회원 목록 검색
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param  string $user_name 회원명 (optional)
     * @param  string $ceo_name 대표자명 (optional)
     * @param  float $user_level 회원레벨 (고객,장부사,관리자) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerGetMembersAsyncWithHttpInfo($page, $limit, $route = null, $jangbu_id = null, $service_id = null, $active = null, $user_name = null, $ceo_name = null, $user_level = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetMembersOutput';
        $request = $this->memberControllerGetMembersRequest($page, $limit, $route, $jangbu_id, $service_id, $active, $user_name, $ceo_name, $user_level);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerGetMembers'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $jangbu_id 장부사 순번 (관리자의 경우에만 입력) (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 이용여부 (1:이용중, 0:이용중지) (optional)
     * @param  string $user_name 회원명 (optional)
     * @param  string $ceo_name 대표자명 (optional)
     * @param  float $user_level 회원레벨 (고객,장부사,관리자) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerGetMembersRequest($page, $limit, $route = null, $jangbu_id = null, $service_id = null, $active = null, $user_name = null, $ceo_name = null, $user_level = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling memberControllerGetMembers'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling memberControllerGetMembers'
            );
        }

        $resourcePath = '/public/api/member';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($jangbu_id !== null) {
            if('form' === 'form' && is_array($jangbu_id)) {
                foreach($jangbu_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jangbuId'] = $jangbu_id;
            }
        }
        // query params
        if ($service_id !== null) {
            if('form' === 'form' && is_array($service_id)) {
                foreach($service_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceId'] = $service_id;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($user_name !== null) {
            if('form' === 'form' && is_array($user_name)) {
                foreach($user_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userName'] = $user_name;
            }
        }
        // query params
        if ($ceo_name !== null) {
            if('form' === 'form' && is_array($ceo_name)) {
                foreach($ceo_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ceoName'] = $ceo_name;
            }
        }
        // query params
        if ($user_level !== null) {
            if('form' === 'form' && is_array($user_level)) {
                foreach($user_level as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userLevel'] = $user_level;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerGetResetPassword
     *
     * 패스워드 재설정 조회
     *
     * @param  string $recovery_key recovery_key (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Recovery|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerGetResetPassword($recovery_key)
    {
        list($response) = $this->memberControllerGetResetPasswordWithHttpInfo($recovery_key);
        return $response;
    }

    /**
     * Operation memberControllerGetResetPasswordWithHttpInfo
     *
     * 패스워드 재설정 조회
     *
     * @param  string $recovery_key (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Recovery|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerGetResetPasswordWithHttpInfo($recovery_key)
    {
        $request = $this->memberControllerGetResetPasswordRequest($recovery_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Recovery' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Recovery', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Recovery';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Recovery',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerGetResetPasswordAsync
     *
     * 패스워드 재설정 조회
     *
     * @param  string $recovery_key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerGetResetPasswordAsync($recovery_key)
    {
        return $this->memberControllerGetResetPasswordAsyncWithHttpInfo($recovery_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerGetResetPasswordAsyncWithHttpInfo
     *
     * 패스워드 재설정 조회
     *
     * @param  string $recovery_key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerGetResetPasswordAsyncWithHttpInfo($recovery_key)
    {
        $returnType = '\OpenAPI\Client\Model\Recovery';
        $request = $this->memberControllerGetResetPasswordRequest($recovery_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerGetResetPassword'
     *
     * @param  string $recovery_key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerGetResetPasswordRequest($recovery_key)
    {
        // verify the required parameter 'recovery_key' is set
        if ($recovery_key === null || (is_array($recovery_key) && count($recovery_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recovery_key when calling memberControllerGetResetPassword'
            );
        }

        $resourcePath = '/public/api/member/recover/{recoveryKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($recovery_key !== null) {
            $resourcePath = str_replace(
                '{' . 'recoveryKey' . '}',
                ObjectSerializer::toPathValue($recovery_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerRegisterCustomer
     *
     * (고객사) 계정 등록
     *
     * @param  \OpenAPI\Client\Model\RegisterCustomerInput $register_customer_input register_customer_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerRegisterCustomer($register_customer_input)
    {
        list($response) = $this->memberControllerRegisterCustomerWithHttpInfo($register_customer_input);
        return $response;
    }

    /**
     * Operation memberControllerRegisterCustomerWithHttpInfo
     *
     * (고객사) 계정 등록
     *
     * @param  \OpenAPI\Client\Model\RegisterCustomerInput $register_customer_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerRegisterCustomerWithHttpInfo($register_customer_input)
    {
        $request = $this->memberControllerRegisterCustomerRequest($register_customer_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerRegisterCustomerAsync
     *
     * (고객사) 계정 등록
     *
     * @param  \OpenAPI\Client\Model\RegisterCustomerInput $register_customer_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerRegisterCustomerAsync($register_customer_input)
    {
        return $this->memberControllerRegisterCustomerAsyncWithHttpInfo($register_customer_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerRegisterCustomerAsyncWithHttpInfo
     *
     * (고객사) 계정 등록
     *
     * @param  \OpenAPI\Client\Model\RegisterCustomerInput $register_customer_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerRegisterCustomerAsyncWithHttpInfo($register_customer_input)
    {
        $returnType = '\OpenAPI\Client\Model\User';
        $request = $this->memberControllerRegisterCustomerRequest($register_customer_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerRegisterCustomer'
     *
     * @param  \OpenAPI\Client\Model\RegisterCustomerInput $register_customer_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerRegisterCustomerRequest($register_customer_input)
    {
        // verify the required parameter 'register_customer_input' is set
        if ($register_customer_input === null || (is_array($register_customer_input) && count($register_customer_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_customer_input when calling memberControllerRegisterCustomer'
            );
        }

        $resourcePath = '/public/api/member/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_customer_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_customer_input));
            } else {
                $httpBody = $register_customer_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerRegisterMember
     *
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     *
     * @param  \OpenAPI\Client\Model\RegisterMemberInput $register_member_input register_member_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerRegisterMember($register_member_input)
    {
        list($response) = $this->memberControllerRegisterMemberWithHttpInfo($register_member_input);
        return $response;
    }

    /**
     * Operation memberControllerRegisterMemberWithHttpInfo
     *
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     *
     * @param  \OpenAPI\Client\Model\RegisterMemberInput $register_member_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerRegisterMemberWithHttpInfo($register_member_input)
    {
        $request = $this->memberControllerRegisterMemberRequest($register_member_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerRegisterMemberAsync
     *
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     *
     * @param  \OpenAPI\Client\Model\RegisterMemberInput $register_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerRegisterMemberAsync($register_member_input)
    {
        return $this->memberControllerRegisterMemberAsyncWithHttpInfo($register_member_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerRegisterMemberAsyncWithHttpInfo
     *
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     *
     * @param  \OpenAPI\Client\Model\RegisterMemberInput $register_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerRegisterMemberAsyncWithHttpInfo($register_member_input)
    {
        $returnType = '\OpenAPI\Client\Model\User';
        $request = $this->memberControllerRegisterMemberRequest($register_member_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerRegisterMember'
     *
     * @param  \OpenAPI\Client\Model\RegisterMemberInput $register_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerRegisterMemberRequest($register_member_input)
    {
        // verify the required parameter 'register_member_input' is set
        if ($register_member_input === null || (is_array($register_member_input) && count($register_member_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_member_input when calling memberControllerRegisterMember'
            );
        }

        $resourcePath = '/public/api/member';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_member_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_member_input));
            } else {
                $httpBody = $register_member_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerResetPassword
     *
     * (계정찾기진행시) 패스워드 재설정 처리
     *
     * @param  string $recovery_key 키값 (required)
     * @param  \OpenAPI\Client\Model\ResetPasswordInput $reset_password_input reset_password_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ResetPasswordOutput|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerResetPassword($recovery_key, $reset_password_input)
    {
        list($response) = $this->memberControllerResetPasswordWithHttpInfo($recovery_key, $reset_password_input);
        return $response;
    }

    /**
     * Operation memberControllerResetPasswordWithHttpInfo
     *
     * (계정찾기진행시) 패스워드 재설정 처리
     *
     * @param  string $recovery_key 키값 (required)
     * @param  \OpenAPI\Client\Model\ResetPasswordInput $reset_password_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ResetPasswordOutput|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerResetPasswordWithHttpInfo($recovery_key, $reset_password_input)
    {
        $request = $this->memberControllerResetPasswordRequest($recovery_key, $reset_password_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ResetPasswordOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ResetPasswordOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ResetPasswordOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ResetPasswordOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerResetPasswordAsync
     *
     * (계정찾기진행시) 패스워드 재설정 처리
     *
     * @param  string $recovery_key 키값 (required)
     * @param  \OpenAPI\Client\Model\ResetPasswordInput $reset_password_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerResetPasswordAsync($recovery_key, $reset_password_input)
    {
        return $this->memberControllerResetPasswordAsyncWithHttpInfo($recovery_key, $reset_password_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerResetPasswordAsyncWithHttpInfo
     *
     * (계정찾기진행시) 패스워드 재설정 처리
     *
     * @param  string $recovery_key 키값 (required)
     * @param  \OpenAPI\Client\Model\ResetPasswordInput $reset_password_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerResetPasswordAsyncWithHttpInfo($recovery_key, $reset_password_input)
    {
        $returnType = '\OpenAPI\Client\Model\ResetPasswordOutput';
        $request = $this->memberControllerResetPasswordRequest($recovery_key, $reset_password_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerResetPassword'
     *
     * @param  string $recovery_key 키값 (required)
     * @param  \OpenAPI\Client\Model\ResetPasswordInput $reset_password_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerResetPasswordRequest($recovery_key, $reset_password_input)
    {
        // verify the required parameter 'recovery_key' is set
        if ($recovery_key === null || (is_array($recovery_key) && count($recovery_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recovery_key when calling memberControllerResetPassword'
            );
        }
        // verify the required parameter 'reset_password_input' is set
        if ($reset_password_input === null || (is_array($reset_password_input) && count($reset_password_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reset_password_input when calling memberControllerResetPassword'
            );
        }

        $resourcePath = '/public/api/member/recover/{recoveryKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($recovery_key !== null) {
            $resourcePath = str_replace(
                '{' . 'recoveryKey' . '}',
                ObjectSerializer::toPathValue($recovery_key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($reset_password_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($reset_password_input));
            } else {
                $httpBody = $reset_password_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerResetPasswordWithIdEmail
     *
     * 로그인 패스워드 초기화
     *
     * @param  float $member_id 회원의 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerResetPasswordWithIdEmail($member_id)
    {
        list($response) = $this->memberControllerResetPasswordWithIdEmailWithHttpInfo($member_id);
        return $response;
    }

    /**
     * Operation memberControllerResetPasswordWithIdEmailWithHttpInfo
     *
     * 로그인 패스워드 초기화
     *
     * @param  float $member_id 회원의 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerResetPasswordWithIdEmailWithHttpInfo($member_id)
    {
        $request = $this->memberControllerResetPasswordWithIdEmailRequest($member_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerResetPasswordWithIdEmailAsync
     *
     * 로그인 패스워드 초기화
     *
     * @param  float $member_id 회원의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerResetPasswordWithIdEmailAsync($member_id)
    {
        return $this->memberControllerResetPasswordWithIdEmailAsyncWithHttpInfo($member_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerResetPasswordWithIdEmailAsyncWithHttpInfo
     *
     * 로그인 패스워드 초기화
     *
     * @param  float $member_id 회원의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerResetPasswordWithIdEmailAsyncWithHttpInfo($member_id)
    {
        $returnType = '\OpenAPI\Client\Model\User';
        $request = $this->memberControllerResetPasswordWithIdEmailRequest($member_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerResetPasswordWithIdEmail'
     *
     * @param  float $member_id 회원의 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerResetPasswordWithIdEmailRequest($member_id)
    {
        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member_id when calling memberControllerResetPasswordWithIdEmail'
            );
        }

        $resourcePath = '/public/api/member/{memberId}/reset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerSaveUserRoleGroup
     *
     * 계정의 권한그룹 저장
     *
     * @param  float $user_id 계정의 순번 (required)
     * @param  string $role_group_code 계좌코드 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerSaveUserRoleGroup($user_id, $role_group_code)
    {
        list($response) = $this->memberControllerSaveUserRoleGroupWithHttpInfo($user_id, $role_group_code);
        return $response;
    }

    /**
     * Operation memberControllerSaveUserRoleGroupWithHttpInfo
     *
     * 계정의 권한그룹 저장
     *
     * @param  float $user_id 계정의 순번 (required)
     * @param  string $role_group_code 계좌코드 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerSaveUserRoleGroupWithHttpInfo($user_id, $role_group_code)
    {
        $request = $this->memberControllerSaveUserRoleGroupRequest($user_id, $role_group_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerSaveUserRoleGroupAsync
     *
     * 계정의 권한그룹 저장
     *
     * @param  float $user_id 계정의 순번 (required)
     * @param  string $role_group_code 계좌코드 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerSaveUserRoleGroupAsync($user_id, $role_group_code)
    {
        return $this->memberControllerSaveUserRoleGroupAsyncWithHttpInfo($user_id, $role_group_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerSaveUserRoleGroupAsyncWithHttpInfo
     *
     * 계정의 권한그룹 저장
     *
     * @param  float $user_id 계정의 순번 (required)
     * @param  string $role_group_code 계좌코드 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerSaveUserRoleGroupAsyncWithHttpInfo($user_id, $role_group_code)
    {
        $returnType = '\OpenAPI\Client\Model\User';
        $request = $this->memberControllerSaveUserRoleGroupRequest($user_id, $role_group_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerSaveUserRoleGroup'
     *
     * @param  float $user_id 계정의 순번 (required)
     * @param  string $role_group_code 계좌코드 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerSaveUserRoleGroupRequest($user_id, $role_group_code)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling memberControllerSaveUserRoleGroup'
            );
        }
        // verify the required parameter 'role_group_code' is set
        if ($role_group_code === null || (is_array($role_group_code) && count($role_group_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_group_code when calling memberControllerSaveUserRoleGroup'
            );
        }

        $resourcePath = '/public/api/member/{userId}/role/{roleGroupCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($role_group_code !== null) {
            $resourcePath = str_replace(
                '{' . 'roleGroupCode' . '}',
                ObjectSerializer::toPathValue($role_group_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation memberControllerUpdateMember
     *
     * 계정 수정
     *
     * @param  float $user_id 회원의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateMemberInput $update_member_input update_member_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function memberControllerUpdateMember($user_id, $update_member_input)
    {
        list($response) = $this->memberControllerUpdateMemberWithHttpInfo($user_id, $update_member_input);
        return $response;
    }

    /**
     * Operation memberControllerUpdateMemberWithHttpInfo
     *
     * 계정 수정
     *
     * @param  float $user_id 회원의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateMemberInput $update_member_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function memberControllerUpdateMemberWithHttpInfo($user_id, $update_member_input)
    {
        $request = $this->memberControllerUpdateMemberRequest($user_id, $update_member_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\User' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\User', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\User';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation memberControllerUpdateMemberAsync
     *
     * 계정 수정
     *
     * @param  float $user_id 회원의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateMemberInput $update_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerUpdateMemberAsync($user_id, $update_member_input)
    {
        return $this->memberControllerUpdateMemberAsyncWithHttpInfo($user_id, $update_member_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation memberControllerUpdateMemberAsyncWithHttpInfo
     *
     * 계정 수정
     *
     * @param  float $user_id 회원의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateMemberInput $update_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function memberControllerUpdateMemberAsyncWithHttpInfo($user_id, $update_member_input)
    {
        $returnType = '\OpenAPI\Client\Model\User';
        $request = $this->memberControllerUpdateMemberRequest($user_id, $update_member_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'memberControllerUpdateMember'
     *
     * @param  float $user_id 회원의 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateMemberInput $update_member_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function memberControllerUpdateMemberRequest($user_id, $update_member_input)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling memberControllerUpdateMember'
            );
        }
        // verify the required parameter 'update_member_input' is set
        if ($update_member_input === null || (is_array($update_member_input) && count($update_member_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_member_input when calling memberControllerUpdateMember'
            );
        }

        $resourcePath = '/public/api/member/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_member_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_member_input));
            } else {
                $httpBody = $update_member_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileAppControllerGetAppVersions
     *
     * 앱 버전 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetAppVersionsOutput
     */
    public function mobileAppControllerGetAppVersions($page, $limit, $route = null, $active = null, $os_type = null)
    {
        list($response) = $this->mobileAppControllerGetAppVersionsWithHttpInfo($page, $limit, $route, $active, $os_type);
        return $response;
    }

    /**
     * Operation mobileAppControllerGetAppVersionsWithHttpInfo
     *
     * 앱 버전 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetAppVersionsOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileAppControllerGetAppVersionsWithHttpInfo($page, $limit, $route = null, $active = null, $os_type = null)
    {
        $request = $this->mobileAppControllerGetAppVersionsRequest($page, $limit, $route, $active, $os_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetAppVersionsOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetAppVersionsOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetAppVersionsOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetAppVersionsOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileAppControllerGetAppVersionsAsync
     *
     * 앱 버전 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerGetAppVersionsAsync($page, $limit, $route = null, $active = null, $os_type = null)
    {
        return $this->mobileAppControllerGetAppVersionsAsyncWithHttpInfo($page, $limit, $route, $active, $os_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileAppControllerGetAppVersionsAsyncWithHttpInfo
     *
     * 앱 버전 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerGetAppVersionsAsyncWithHttpInfo($page, $limit, $route = null, $active = null, $os_type = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetAppVersionsOutput';
        $request = $this->mobileAppControllerGetAppVersionsRequest($page, $limit, $route, $active, $os_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileAppControllerGetAppVersions'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mobileAppControllerGetAppVersionsRequest($page, $limit, $route = null, $active = null, $os_type = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling mobileAppControllerGetAppVersions'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling mobileAppControllerGetAppVersions'
            );
        }

        $resourcePath = '/public/api/app/version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($os_type !== null) {
            if('form' === 'form' && is_array($os_type)) {
                foreach($os_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['osType'] = $os_type;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileAppControllerGetJangbuMessage
     *
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     *
     * @param  float $jangbu_id jangbu_id (required)
     * @param  float $message_id 메시지 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Message|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function mobileAppControllerGetJangbuMessage($jangbu_id, $message_id)
    {
        list($response) = $this->mobileAppControllerGetJangbuMessageWithHttpInfo($jangbu_id, $message_id);
        return $response;
    }

    /**
     * Operation mobileAppControllerGetJangbuMessageWithHttpInfo
     *
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     *
     * @param  float $jangbu_id (required)
     * @param  float $message_id 메시지 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Message|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileAppControllerGetJangbuMessageWithHttpInfo($jangbu_id, $message_id)
    {
        $request = $this->mobileAppControllerGetJangbuMessageRequest($jangbu_id, $message_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Message' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Message', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Message';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Message',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileAppControllerGetJangbuMessageAsync
     *
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     *
     * @param  float $jangbu_id (required)
     * @param  float $message_id 메시지 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerGetJangbuMessageAsync($jangbu_id, $message_id)
    {
        return $this->mobileAppControllerGetJangbuMessageAsyncWithHttpInfo($jangbu_id, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileAppControllerGetJangbuMessageAsyncWithHttpInfo
     *
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     *
     * @param  float $jangbu_id (required)
     * @param  float $message_id 메시지 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerGetJangbuMessageAsyncWithHttpInfo($jangbu_id, $message_id)
    {
        $returnType = '\OpenAPI\Client\Model\Message';
        $request = $this->mobileAppControllerGetJangbuMessageRequest($jangbu_id, $message_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileAppControllerGetJangbuMessage'
     *
     * @param  float $jangbu_id (required)
     * @param  float $message_id 메시지 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mobileAppControllerGetJangbuMessageRequest($jangbu_id, $message_id)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling mobileAppControllerGetJangbuMessage'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling mobileAppControllerGetJangbuMessage'
            );
        }

        $resourcePath = '/public/api/app/jangbu/{jangbuId}/message/{messageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageId' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileAppControllerGetJangbuMessages
     *
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     *
     * @param  float $jangbu_id jangbu_id (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 기간 시작일자(YYYYMMDD) (required)
     * @param  float $end_at 기간 종료일자(YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetJangbuMessagesOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function mobileAppControllerGetJangbuMessages($jangbu_id, $page, $limit, $start_at, $end_at, $route = null)
    {
        list($response) = $this->mobileAppControllerGetJangbuMessagesWithHttpInfo($jangbu_id, $page, $limit, $start_at, $end_at, $route);
        return $response;
    }

    /**
     * Operation mobileAppControllerGetJangbuMessagesWithHttpInfo
     *
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     *
     * @param  float $jangbu_id (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 기간 시작일자(YYYYMMDD) (required)
     * @param  float $end_at 기간 종료일자(YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetJangbuMessagesOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileAppControllerGetJangbuMessagesWithHttpInfo($jangbu_id, $page, $limit, $start_at, $end_at, $route = null)
    {
        $request = $this->mobileAppControllerGetJangbuMessagesRequest($jangbu_id, $page, $limit, $start_at, $end_at, $route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetJangbuMessagesOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetJangbuMessagesOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetJangbuMessagesOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetJangbuMessagesOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileAppControllerGetJangbuMessagesAsync
     *
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     *
     * @param  float $jangbu_id (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 기간 시작일자(YYYYMMDD) (required)
     * @param  float $end_at 기간 종료일자(YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerGetJangbuMessagesAsync($jangbu_id, $page, $limit, $start_at, $end_at, $route = null)
    {
        return $this->mobileAppControllerGetJangbuMessagesAsyncWithHttpInfo($jangbu_id, $page, $limit, $start_at, $end_at, $route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileAppControllerGetJangbuMessagesAsyncWithHttpInfo
     *
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     *
     * @param  float $jangbu_id (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 기간 시작일자(YYYYMMDD) (required)
     * @param  float $end_at 기간 종료일자(YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerGetJangbuMessagesAsyncWithHttpInfo($jangbu_id, $page, $limit, $start_at, $end_at, $route = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetJangbuMessagesOutput';
        $request = $this->mobileAppControllerGetJangbuMessagesRequest($jangbu_id, $page, $limit, $start_at, $end_at, $route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileAppControllerGetJangbuMessages'
     *
     * @param  float $jangbu_id (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 기간 시작일자(YYYYMMDD) (required)
     * @param  float $end_at 기간 종료일자(YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mobileAppControllerGetJangbuMessagesRequest($jangbu_id, $page, $limit, $start_at, $end_at, $route = null)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling mobileAppControllerGetJangbuMessages'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling mobileAppControllerGetJangbuMessages'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling mobileAppControllerGetJangbuMessages'
            );
        }
        // verify the required parameter 'start_at' is set
        if ($start_at === null || (is_array($start_at) && count($start_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_at when calling mobileAppControllerGetJangbuMessages'
            );
        }
        // verify the required parameter 'end_at' is set
        if ($end_at === null || (is_array($end_at) && count($end_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_at when calling mobileAppControllerGetJangbuMessages'
            );
        }

        $resourcePath = '/public/api/app/jangbu/{jangbuId}/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($start_at !== null) {
            if('form' === 'form' && is_array($start_at)) {
                foreach($start_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startAt'] = $start_at;
            }
        }
        // query params
        if ($end_at !== null) {
            if('form' === 'form' && is_array($end_at)) {
                foreach($end_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endAt'] = $end_at;
            }
        }


        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileAppControllerGetUsingAppUsers
     *
     * 앱 사용자 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function mobileAppControllerGetUsingAppUsers($page, $limit, $route = null, $active = null, $os_type = null)
    {
        list($response) = $this->mobileAppControllerGetUsingAppUsersWithHttpInfo($page, $limit, $route, $active, $os_type);
        return $response;
    }

    /**
     * Operation mobileAppControllerGetUsingAppUsersWithHttpInfo
     *
     * 앱 사용자 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileAppControllerGetUsingAppUsersWithHttpInfo($page, $limit, $route = null, $active = null, $os_type = null)
    {
        $request = $this->mobileAppControllerGetUsingAppUsersRequest($page, $limit, $route, $active, $os_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileAppControllerGetUsingAppUsersAsync
     *
     * 앱 사용자 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerGetUsingAppUsersAsync($page, $limit, $route = null, $active = null, $os_type = null)
    {
        return $this->mobileAppControllerGetUsingAppUsersAsyncWithHttpInfo($page, $limit, $route, $active, $os_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileAppControllerGetUsingAppUsersAsyncWithHttpInfo
     *
     * 앱 사용자 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerGetUsingAppUsersAsyncWithHttpInfo($page, $limit, $route = null, $active = null, $os_type = null)
    {
        $returnType = 'object';
        $request = $this->mobileAppControllerGetUsingAppUsersRequest($page, $limit, $route, $active, $os_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileAppControllerGetUsingAppUsers'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $active 앱의 활성여부 (T:활성,F:비활성) (optional)
     * @param  \OpenAPI\Client\Model\OsType $os_type OS유형 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mobileAppControllerGetUsingAppUsersRequest($page, $limit, $route = null, $active = null, $os_type = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling mobileAppControllerGetUsingAppUsers'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling mobileAppControllerGetUsingAppUsers'
            );
        }

        $resourcePath = '/public/api/app/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($os_type !== null) {
            if('form' === 'form' && is_array($os_type)) {
                foreach($os_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['osType'] = $os_type;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileAppControllerRegisterAppVersion
     *
     * 앱 버전 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterAppVersionInput $register_app_version_input register_app_version_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AppVersion|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function mobileAppControllerRegisterAppVersion($register_app_version_input)
    {
        list($response) = $this->mobileAppControllerRegisterAppVersionWithHttpInfo($register_app_version_input);
        return $response;
    }

    /**
     * Operation mobileAppControllerRegisterAppVersionWithHttpInfo
     *
     * 앱 버전 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterAppVersionInput $register_app_version_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AppVersion|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileAppControllerRegisterAppVersionWithHttpInfo($register_app_version_input)
    {
        $request = $this->mobileAppControllerRegisterAppVersionRequest($register_app_version_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AppVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppVersion';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileAppControllerRegisterAppVersionAsync
     *
     * 앱 버전 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterAppVersionInput $register_app_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerRegisterAppVersionAsync($register_app_version_input)
    {
        return $this->mobileAppControllerRegisterAppVersionAsyncWithHttpInfo($register_app_version_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileAppControllerRegisterAppVersionAsyncWithHttpInfo
     *
     * 앱 버전 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterAppVersionInput $register_app_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerRegisterAppVersionAsyncWithHttpInfo($register_app_version_input)
    {
        $returnType = '\OpenAPI\Client\Model\AppVersion';
        $request = $this->mobileAppControllerRegisterAppVersionRequest($register_app_version_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileAppControllerRegisterAppVersion'
     *
     * @param  \OpenAPI\Client\Model\RegisterAppVersionInput $register_app_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mobileAppControllerRegisterAppVersionRequest($register_app_version_input)
    {
        // verify the required parameter 'register_app_version_input' is set
        if ($register_app_version_input === null || (is_array($register_app_version_input) && count($register_app_version_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_app_version_input when calling mobileAppControllerRegisterAppVersion'
            );
        }

        $resourcePath = '/public/api/app/version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_app_version_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_app_version_input));
            } else {
                $httpBody = $register_app_version_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mobileAppControllerUpdateAppVersion
     *
     * 앱 버전 수정 (관리자 전용)
     *
     * @param  float $version_id 버전 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateAppVersionInput $update_app_version_input update_app_version_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AppVersion|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function mobileAppControllerUpdateAppVersion($version_id, $update_app_version_input)
    {
        list($response) = $this->mobileAppControllerUpdateAppVersionWithHttpInfo($version_id, $update_app_version_input);
        return $response;
    }

    /**
     * Operation mobileAppControllerUpdateAppVersionWithHttpInfo
     *
     * 앱 버전 수정 (관리자 전용)
     *
     * @param  float $version_id 버전 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateAppVersionInput $update_app_version_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AppVersion|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mobileAppControllerUpdateAppVersionWithHttpInfo($version_id, $update_app_version_input)
    {
        $request = $this->mobileAppControllerUpdateAppVersionRequest($version_id, $update_app_version_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AppVersion' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AppVersion', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AppVersion';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AppVersion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mobileAppControllerUpdateAppVersionAsync
     *
     * 앱 버전 수정 (관리자 전용)
     *
     * @param  float $version_id 버전 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateAppVersionInput $update_app_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerUpdateAppVersionAsync($version_id, $update_app_version_input)
    {
        return $this->mobileAppControllerUpdateAppVersionAsyncWithHttpInfo($version_id, $update_app_version_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mobileAppControllerUpdateAppVersionAsyncWithHttpInfo
     *
     * 앱 버전 수정 (관리자 전용)
     *
     * @param  float $version_id 버전 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateAppVersionInput $update_app_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mobileAppControllerUpdateAppVersionAsyncWithHttpInfo($version_id, $update_app_version_input)
    {
        $returnType = '\OpenAPI\Client\Model\AppVersion';
        $request = $this->mobileAppControllerUpdateAppVersionRequest($version_id, $update_app_version_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mobileAppControllerUpdateAppVersion'
     *
     * @param  float $version_id 버전 순번 (required)
     * @param  \OpenAPI\Client\Model\UpdateAppVersionInput $update_app_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mobileAppControllerUpdateAppVersionRequest($version_id, $update_app_version_input)
    {
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling mobileAppControllerUpdateAppVersion'
            );
        }
        // verify the required parameter 'update_app_version_input' is set
        if ($update_app_version_input === null || (is_array($update_app_version_input) && count($update_app_version_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_app_version_input when calling mobileAppControllerUpdateAppVersion'
            );
        }

        $resourcePath = '/public/api/app/version/{versionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'versionId' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_app_version_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_app_version_input));
            } else {
                $httpBody = $update_app_version_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation noticeControllerDeleteNotice
     *
     * 공지사항 삭제 (관리자 전용)
     *
     * @param  float $notice_id notice_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Notice|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function noticeControllerDeleteNotice($notice_id)
    {
        list($response) = $this->noticeControllerDeleteNoticeWithHttpInfo($notice_id);
        return $response;
    }

    /**
     * Operation noticeControllerDeleteNoticeWithHttpInfo
     *
     * 공지사항 삭제 (관리자 전용)
     *
     * @param  float $notice_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Notice|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function noticeControllerDeleteNoticeWithHttpInfo($notice_id)
    {
        $request = $this->noticeControllerDeleteNoticeRequest($notice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Notice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Notice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Notice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation noticeControllerDeleteNoticeAsync
     *
     * 공지사항 삭제 (관리자 전용)
     *
     * @param  float $notice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerDeleteNoticeAsync($notice_id)
    {
        return $this->noticeControllerDeleteNoticeAsyncWithHttpInfo($notice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation noticeControllerDeleteNoticeAsyncWithHttpInfo
     *
     * 공지사항 삭제 (관리자 전용)
     *
     * @param  float $notice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerDeleteNoticeAsyncWithHttpInfo($notice_id)
    {
        $returnType = '\OpenAPI\Client\Model\Notice';
        $request = $this->noticeControllerDeleteNoticeRequest($notice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'noticeControllerDeleteNotice'
     *
     * @param  float $notice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function noticeControllerDeleteNoticeRequest($notice_id)
    {
        // verify the required parameter 'notice_id' is set
        if ($notice_id === null || (is_array($notice_id) && count($notice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notice_id when calling noticeControllerDeleteNotice'
            );
        }

        $resourcePath = '/public/api/notice/{noticeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($notice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noticeId' . '}',
                ObjectSerializer::toPathValue($notice_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation noticeControllerGetNotice
     *
     * 공지사항 조회 (관리자, 장부사 전용)
     *
     * @param  float $notice_id 공지사항 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Notice|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function noticeControllerGetNotice($notice_id)
    {
        list($response) = $this->noticeControllerGetNoticeWithHttpInfo($notice_id);
        return $response;
    }

    /**
     * Operation noticeControllerGetNoticeWithHttpInfo
     *
     * 공지사항 조회 (관리자, 장부사 전용)
     *
     * @param  float $notice_id 공지사항 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Notice|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function noticeControllerGetNoticeWithHttpInfo($notice_id)
    {
        $request = $this->noticeControllerGetNoticeRequest($notice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Notice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Notice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Notice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation noticeControllerGetNoticeAsync
     *
     * 공지사항 조회 (관리자, 장부사 전용)
     *
     * @param  float $notice_id 공지사항 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerGetNoticeAsync($notice_id)
    {
        return $this->noticeControllerGetNoticeAsyncWithHttpInfo($notice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation noticeControllerGetNoticeAsyncWithHttpInfo
     *
     * 공지사항 조회 (관리자, 장부사 전용)
     *
     * @param  float $notice_id 공지사항 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerGetNoticeAsyncWithHttpInfo($notice_id)
    {
        $returnType = '\OpenAPI\Client\Model\Notice';
        $request = $this->noticeControllerGetNoticeRequest($notice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'noticeControllerGetNotice'
     *
     * @param  float $notice_id 공지사항 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function noticeControllerGetNoticeRequest($notice_id)
    {
        // verify the required parameter 'notice_id' is set
        if ($notice_id === null || (is_array($notice_id) && count($notice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notice_id when calling noticeControllerGetNotice'
            );
        }

        $resourcePath = '/public/api/notice/{noticeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($notice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noticeId' . '}',
                ObjectSerializer::toPathValue($notice_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation noticeControllerGetNotices
     *
     * 공지사항 검색 (관리자, 장부사 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetNotices|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function noticeControllerGetNotices($page, $limit, $route = null)
    {
        list($response) = $this->noticeControllerGetNoticesWithHttpInfo($page, $limit, $route);
        return $response;
    }

    /**
     * Operation noticeControllerGetNoticesWithHttpInfo
     *
     * 공지사항 검색 (관리자, 장부사 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetNotices|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function noticeControllerGetNoticesWithHttpInfo($page, $limit, $route = null)
    {
        $request = $this->noticeControllerGetNoticesRequest($page, $limit, $route);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetNotices' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetNotices', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetNotices';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetNotices',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation noticeControllerGetNoticesAsync
     *
     * 공지사항 검색 (관리자, 장부사 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerGetNoticesAsync($page, $limit, $route = null)
    {
        return $this->noticeControllerGetNoticesAsyncWithHttpInfo($page, $limit, $route)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation noticeControllerGetNoticesAsyncWithHttpInfo
     *
     * 공지사항 검색 (관리자, 장부사 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerGetNoticesAsyncWithHttpInfo($page, $limit, $route = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetNotices';
        $request = $this->noticeControllerGetNoticesRequest($page, $limit, $route);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'noticeControllerGetNotices'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function noticeControllerGetNoticesRequest($page, $limit, $route = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling noticeControllerGetNotices'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling noticeControllerGetNotices'
            );
        }

        $resourcePath = '/public/api/notice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation noticeControllerRegisterNotice
     *
     * 공지사항 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input register_notice_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Notice|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function noticeControllerRegisterNotice($register_notice_input)
    {
        list($response) = $this->noticeControllerRegisterNoticeWithHttpInfo($register_notice_input);
        return $response;
    }

    /**
     * Operation noticeControllerRegisterNoticeWithHttpInfo
     *
     * 공지사항 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Notice|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function noticeControllerRegisterNoticeWithHttpInfo($register_notice_input)
    {
        $request = $this->noticeControllerRegisterNoticeRequest($register_notice_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Notice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Notice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Notice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation noticeControllerRegisterNoticeAsync
     *
     * 공지사항 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerRegisterNoticeAsync($register_notice_input)
    {
        return $this->noticeControllerRegisterNoticeAsyncWithHttpInfo($register_notice_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation noticeControllerRegisterNoticeAsyncWithHttpInfo
     *
     * 공지사항 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerRegisterNoticeAsyncWithHttpInfo($register_notice_input)
    {
        $returnType = '\OpenAPI\Client\Model\Notice';
        $request = $this->noticeControllerRegisterNoticeRequest($register_notice_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'noticeControllerRegisterNotice'
     *
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function noticeControllerRegisterNoticeRequest($register_notice_input)
    {
        // verify the required parameter 'register_notice_input' is set
        if ($register_notice_input === null || (is_array($register_notice_input) && count($register_notice_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_notice_input when calling noticeControllerRegisterNotice'
            );
        }

        $resourcePath = '/public/api/notice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_notice_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_notice_input));
            } else {
                $httpBody = $register_notice_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation noticeControllerUpdateNotice
     *
     * 공지사항 수정 (관리자 전용)
     *
     * @param  float $notice_id 공지사항 순번 (required)
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input register_notice_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Notice|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function noticeControllerUpdateNotice($notice_id, $register_notice_input)
    {
        list($response) = $this->noticeControllerUpdateNoticeWithHttpInfo($notice_id, $register_notice_input);
        return $response;
    }

    /**
     * Operation noticeControllerUpdateNoticeWithHttpInfo
     *
     * 공지사항 수정 (관리자 전용)
     *
     * @param  float $notice_id 공지사항 순번 (required)
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Notice|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function noticeControllerUpdateNoticeWithHttpInfo($notice_id, $register_notice_input)
    {
        $request = $this->noticeControllerUpdateNoticeRequest($notice_id, $register_notice_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Notice' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Notice', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Notice';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Notice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation noticeControllerUpdateNoticeAsync
     *
     * 공지사항 수정 (관리자 전용)
     *
     * @param  float $notice_id 공지사항 순번 (required)
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerUpdateNoticeAsync($notice_id, $register_notice_input)
    {
        return $this->noticeControllerUpdateNoticeAsyncWithHttpInfo($notice_id, $register_notice_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation noticeControllerUpdateNoticeAsyncWithHttpInfo
     *
     * 공지사항 수정 (관리자 전용)
     *
     * @param  float $notice_id 공지사항 순번 (required)
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function noticeControllerUpdateNoticeAsyncWithHttpInfo($notice_id, $register_notice_input)
    {
        $returnType = '\OpenAPI\Client\Model\Notice';
        $request = $this->noticeControllerUpdateNoticeRequest($notice_id, $register_notice_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'noticeControllerUpdateNotice'
     *
     * @param  float $notice_id 공지사항 순번 (required)
     * @param  \OpenAPI\Client\Model\RegisterNoticeInput $register_notice_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function noticeControllerUpdateNoticeRequest($notice_id, $register_notice_input)
    {
        // verify the required parameter 'notice_id' is set
        if ($notice_id === null || (is_array($notice_id) && count($notice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notice_id when calling noticeControllerUpdateNotice'
            );
        }
        // verify the required parameter 'register_notice_input' is set
        if ($register_notice_input === null || (is_array($register_notice_input) && count($register_notice_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_notice_input when calling noticeControllerUpdateNotice'
            );
        }

        $resourcePath = '/public/api/notice/{noticeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($notice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'noticeId' . '}',
                ObjectSerializer::toPathValue($notice_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_notice_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_notice_input));
            } else {
                $httpBody = $register_notice_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation roleControllerGetRoles
     *
     * 권한 목록 검색 (관리자, 장부사 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $user_level 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param  string $active 활성 여부(0: 비활성, 1: 활성) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchRoleGroupOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function roleControllerGetRoles($page, $limit, $route = null, $user_level = null, $active = null)
    {
        list($response) = $this->roleControllerGetRolesWithHttpInfo($page, $limit, $route, $user_level, $active);
        return $response;
    }

    /**
     * Operation roleControllerGetRolesWithHttpInfo
     *
     * 권한 목록 검색 (관리자, 장부사 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $user_level 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param  string $active 활성 여부(0: 비활성, 1: 활성) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchRoleGroupOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleControllerGetRolesWithHttpInfo($page, $limit, $route = null, $user_level = null, $active = null)
    {
        $request = $this->roleControllerGetRolesRequest($page, $limit, $route, $user_level, $active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchRoleGroupOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchRoleGroupOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchRoleGroupOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchRoleGroupOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation roleControllerGetRolesAsync
     *
     * 권한 목록 검색 (관리자, 장부사 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $user_level 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param  string $active 활성 여부(0: 비활성, 1: 활성) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function roleControllerGetRolesAsync($page, $limit, $route = null, $user_level = null, $active = null)
    {
        return $this->roleControllerGetRolesAsyncWithHttpInfo($page, $limit, $route, $user_level, $active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation roleControllerGetRolesAsyncWithHttpInfo
     *
     * 권한 목록 검색 (관리자, 장부사 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $user_level 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param  string $active 활성 여부(0: 비활성, 1: 활성) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function roleControllerGetRolesAsyncWithHttpInfo($page, $limit, $route = null, $user_level = null, $active = null)
    {
        $returnType = '\OpenAPI\Client\Model\SearchRoleGroupOutput';
        $request = $this->roleControllerGetRolesRequest($page, $limit, $route, $user_level, $active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'roleControllerGetRoles'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $user_level 회원 레벨(1: 고객, 2: 장부사, 3: 관리자) (optional)
     * @param  string $active 활성 여부(0: 비활성, 1: 활성) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function roleControllerGetRolesRequest($page, $limit, $route = null, $user_level = null, $active = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling roleControllerGetRoles'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling roleControllerGetRoles'
            );
        }

        $resourcePath = '/public/api/role';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($user_level !== null) {
            if('form' === 'form' && is_array($user_level)) {
                foreach($user_level as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userLevel'] = $user_level;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation roleControllerRegisterRole
     *
     * 권한 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\CreateRoleGroupInput $create_role_group_input create_role_group_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RoleGroup|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function roleControllerRegisterRole($create_role_group_input)
    {
        list($response) = $this->roleControllerRegisterRoleWithHttpInfo($create_role_group_input);
        return $response;
    }

    /**
     * Operation roleControllerRegisterRoleWithHttpInfo
     *
     * 권한 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\CreateRoleGroupInput $create_role_group_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RoleGroup|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleControllerRegisterRoleWithHttpInfo($create_role_group_input)
    {
        $request = $this->roleControllerRegisterRoleRequest($create_role_group_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RoleGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RoleGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RoleGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RoleGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation roleControllerRegisterRoleAsync
     *
     * 권한 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\CreateRoleGroupInput $create_role_group_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function roleControllerRegisterRoleAsync($create_role_group_input)
    {
        return $this->roleControllerRegisterRoleAsyncWithHttpInfo($create_role_group_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation roleControllerRegisterRoleAsyncWithHttpInfo
     *
     * 권한 등록 (관리자 전용)
     *
     * @param  \OpenAPI\Client\Model\CreateRoleGroupInput $create_role_group_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function roleControllerRegisterRoleAsyncWithHttpInfo($create_role_group_input)
    {
        $returnType = '\OpenAPI\Client\Model\RoleGroup';
        $request = $this->roleControllerRegisterRoleRequest($create_role_group_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'roleControllerRegisterRole'
     *
     * @param  \OpenAPI\Client\Model\CreateRoleGroupInput $create_role_group_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function roleControllerRegisterRoleRequest($create_role_group_input)
    {
        // verify the required parameter 'create_role_group_input' is set
        if ($create_role_group_input === null || (is_array($create_role_group_input) && count($create_role_group_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_role_group_input when calling roleControllerRegisterRole'
            );
        }

        $resourcePath = '/public/api/role';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_role_group_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_role_group_input));
            } else {
                $httpBody = $create_role_group_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation roleControllerUpdateRole
     *
     * 권한 수정 (관리자 전용)
     *
     * @param  string $role_group_code 그룹코드명 (required)
     * @param  \OpenAPI\Client\Model\UpdateRoleGroupInput $update_role_group_input update_role_group_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RoleGroup|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function roleControllerUpdateRole($role_group_code, $update_role_group_input)
    {
        list($response) = $this->roleControllerUpdateRoleWithHttpInfo($role_group_code, $update_role_group_input);
        return $response;
    }

    /**
     * Operation roleControllerUpdateRoleWithHttpInfo
     *
     * 권한 수정 (관리자 전용)
     *
     * @param  string $role_group_code 그룹코드명 (required)
     * @param  \OpenAPI\Client\Model\UpdateRoleGroupInput $update_role_group_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RoleGroup|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function roleControllerUpdateRoleWithHttpInfo($role_group_code, $update_role_group_input)
    {
        $request = $this->roleControllerUpdateRoleRequest($role_group_code, $update_role_group_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RoleGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RoleGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RoleGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RoleGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation roleControllerUpdateRoleAsync
     *
     * 권한 수정 (관리자 전용)
     *
     * @param  string $role_group_code 그룹코드명 (required)
     * @param  \OpenAPI\Client\Model\UpdateRoleGroupInput $update_role_group_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function roleControllerUpdateRoleAsync($role_group_code, $update_role_group_input)
    {
        return $this->roleControllerUpdateRoleAsyncWithHttpInfo($role_group_code, $update_role_group_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation roleControllerUpdateRoleAsyncWithHttpInfo
     *
     * 권한 수정 (관리자 전용)
     *
     * @param  string $role_group_code 그룹코드명 (required)
     * @param  \OpenAPI\Client\Model\UpdateRoleGroupInput $update_role_group_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function roleControllerUpdateRoleAsyncWithHttpInfo($role_group_code, $update_role_group_input)
    {
        $returnType = '\OpenAPI\Client\Model\RoleGroup';
        $request = $this->roleControllerUpdateRoleRequest($role_group_code, $update_role_group_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'roleControllerUpdateRole'
     *
     * @param  string $role_group_code 그룹코드명 (required)
     * @param  \OpenAPI\Client\Model\UpdateRoleGroupInput $update_role_group_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function roleControllerUpdateRoleRequest($role_group_code, $update_role_group_input)
    {
        // verify the required parameter 'role_group_code' is set
        if ($role_group_code === null || (is_array($role_group_code) && count($role_group_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_group_code when calling roleControllerUpdateRole'
            );
        }
        // verify the required parameter 'update_role_group_input' is set
        if ($update_role_group_input === null || (is_array($update_role_group_input) && count($update_role_group_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_role_group_input when calling roleControllerUpdateRole'
            );
        }

        $resourcePath = '/public/api/role/{roleGroupCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($role_group_code !== null) {
            $resourcePath = str_replace(
                '{' . 'roleGroupCode' . '}',
                ObjectSerializer::toPathValue($role_group_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_role_group_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_role_group_input));
            } else {
                $httpBody = $update_role_group_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scrapingCodeControllerActivateScrapingCode
     *
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $service_id 서비스 순번 (required)
     * @param  string $version 버전 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ScrapingCode|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function scrapingCodeControllerActivateScrapingCode($service_id, $version)
    {
        list($response) = $this->scrapingCodeControllerActivateScrapingCodeWithHttpInfo($service_id, $version);
        return $response;
    }

    /**
     * Operation scrapingCodeControllerActivateScrapingCodeWithHttpInfo
     *
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $service_id 서비스 순번 (required)
     * @param  string $version 버전 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ScrapingCode|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scrapingCodeControllerActivateScrapingCodeWithHttpInfo($service_id, $version)
    {
        $request = $this->scrapingCodeControllerActivateScrapingCodeRequest($service_id, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ScrapingCode' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ScrapingCode', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ScrapingCode';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ScrapingCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scrapingCodeControllerActivateScrapingCodeAsync
     *
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $service_id 서비스 순번 (required)
     * @param  string $version 버전 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scrapingCodeControllerActivateScrapingCodeAsync($service_id, $version)
    {
        return $this->scrapingCodeControllerActivateScrapingCodeAsyncWithHttpInfo($service_id, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scrapingCodeControllerActivateScrapingCodeAsyncWithHttpInfo
     *
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $service_id 서비스 순번 (required)
     * @param  string $version 버전 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scrapingCodeControllerActivateScrapingCodeAsyncWithHttpInfo($service_id, $version)
    {
        $returnType = '\OpenAPI\Client\Model\ScrapingCode';
        $request = $this->scrapingCodeControllerActivateScrapingCodeRequest($service_id, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scrapingCodeControllerActivateScrapingCode'
     *
     * @param  float $service_id 서비스 순번 (required)
     * @param  string $version 버전 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scrapingCodeControllerActivateScrapingCodeRequest($service_id, $version)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling scrapingCodeControllerActivateScrapingCode'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling scrapingCodeControllerActivateScrapingCode'
            );
        }

        $resourcePath = '/public/api/scraping-code/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }


        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scrapingCodeControllerGetScrapingCodes
     *
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetScrapingCodesOutput
     */
    public function scrapingCodeControllerGetScrapingCodes($page, $limit, $route = null, $service_id = null, $active = null)
    {
        list($response) = $this->scrapingCodeControllerGetScrapingCodesWithHttpInfo($page, $limit, $route, $service_id, $active);
        return $response;
    }

    /**
     * Operation scrapingCodeControllerGetScrapingCodesWithHttpInfo
     *
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetScrapingCodesOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function scrapingCodeControllerGetScrapingCodesWithHttpInfo($page, $limit, $route = null, $service_id = null, $active = null)
    {
        $request = $this->scrapingCodeControllerGetScrapingCodesRequest($page, $limit, $route, $service_id, $active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetScrapingCodesOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetScrapingCodesOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetScrapingCodesOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetScrapingCodesOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scrapingCodeControllerGetScrapingCodesAsync
     *
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scrapingCodeControllerGetScrapingCodesAsync($page, $limit, $route = null, $service_id = null, $active = null)
    {
        return $this->scrapingCodeControllerGetScrapingCodesAsyncWithHttpInfo($page, $limit, $route, $service_id, $active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scrapingCodeControllerGetScrapingCodesAsyncWithHttpInfo
     *
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scrapingCodeControllerGetScrapingCodesAsyncWithHttpInfo($page, $limit, $route = null, $service_id = null, $active = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetScrapingCodesOutput';
        $request = $this->scrapingCodeControllerGetScrapingCodesRequest($page, $limit, $route, $service_id, $active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scrapingCodeControllerGetScrapingCodes'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  string $active 활성화 여부 (1: 활성, 0: 비활성) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scrapingCodeControllerGetScrapingCodesRequest($page, $limit, $route = null, $service_id = null, $active = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling scrapingCodeControllerGetScrapingCodes'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling scrapingCodeControllerGetScrapingCodes'
            );
        }

        $resourcePath = '/public/api/scraping-code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($service_id !== null) {
            if('form' === 'form' && is_array($service_id)) {
                foreach($service_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceId'] = $service_id;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scrapingCodeControllerRegisterScrapingCodeVersion
     *
     * 스크래핑 코드 버전 등록 (Github Action &gt;&gt; Amazon SNS)
     *
     * @param  \OpenAPI\Client\Model\RegisterScrapingCodeVersionInput $register_scraping_code_version_input register_scraping_code_version_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ScrapingCode|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function scrapingCodeControllerRegisterScrapingCodeVersion($register_scraping_code_version_input)
    {
        list($response) = $this->scrapingCodeControllerRegisterScrapingCodeVersionWithHttpInfo($register_scraping_code_version_input);
        return $response;
    }

    /**
     * Operation scrapingCodeControllerRegisterScrapingCodeVersionWithHttpInfo
     *
     * 스크래핑 코드 버전 등록 (Github Action &gt;&gt; Amazon SNS)
     *
     * @param  \OpenAPI\Client\Model\RegisterScrapingCodeVersionInput $register_scraping_code_version_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ScrapingCode|\OpenAPI\Client\Model\ExceptionResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scrapingCodeControllerRegisterScrapingCodeVersionWithHttpInfo($register_scraping_code_version_input)
    {
        $request = $this->scrapingCodeControllerRegisterScrapingCodeVersionRequest($register_scraping_code_version_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ScrapingCode' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ScrapingCode', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ScrapingCode';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ScrapingCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scrapingCodeControllerRegisterScrapingCodeVersionAsync
     *
     * 스크래핑 코드 버전 등록 (Github Action &gt;&gt; Amazon SNS)
     *
     * @param  \OpenAPI\Client\Model\RegisterScrapingCodeVersionInput $register_scraping_code_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scrapingCodeControllerRegisterScrapingCodeVersionAsync($register_scraping_code_version_input)
    {
        return $this->scrapingCodeControllerRegisterScrapingCodeVersionAsyncWithHttpInfo($register_scraping_code_version_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scrapingCodeControllerRegisterScrapingCodeVersionAsyncWithHttpInfo
     *
     * 스크래핑 코드 버전 등록 (Github Action &gt;&gt; Amazon SNS)
     *
     * @param  \OpenAPI\Client\Model\RegisterScrapingCodeVersionInput $register_scraping_code_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scrapingCodeControllerRegisterScrapingCodeVersionAsyncWithHttpInfo($register_scraping_code_version_input)
    {
        $returnType = '\OpenAPI\Client\Model\ScrapingCode';
        $request = $this->scrapingCodeControllerRegisterScrapingCodeVersionRequest($register_scraping_code_version_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scrapingCodeControllerRegisterScrapingCodeVersion'
     *
     * @param  \OpenAPI\Client\Model\RegisterScrapingCodeVersionInput $register_scraping_code_version_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scrapingCodeControllerRegisterScrapingCodeVersionRequest($register_scraping_code_version_input)
    {
        // verify the required parameter 'register_scraping_code_version_input' is set
        if ($register_scraping_code_version_input === null || (is_array($register_scraping_code_version_input) && count($register_scraping_code_version_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_scraping_code_version_input when calling scrapingCodeControllerRegisterScrapingCodeVersion'
            );
        }

        $resourcePath = '/public/api/scraping-code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_scraping_code_version_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_scraping_code_version_input));
            } else {
                $httpBody = $register_scraping_code_version_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceControllerGetService
     *
     * 서비스 조회 (관리자전용)
     *
     * @param  float $service_id service_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Service|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function serviceControllerGetService($service_id)
    {
        list($response) = $this->serviceControllerGetServiceWithHttpInfo($service_id);
        return $response;
    }

    /**
     * Operation serviceControllerGetServiceWithHttpInfo
     *
     * 서비스 조회 (관리자전용)
     *
     * @param  float $service_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Service|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceControllerGetServiceWithHttpInfo($service_id)
    {
        $request = $this->serviceControllerGetServiceRequest($service_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Service' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Service', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Service';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Service',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceControllerGetServiceAsync
     *
     * 서비스 조회 (관리자전용)
     *
     * @param  float $service_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceControllerGetServiceAsync($service_id)
    {
        return $this->serviceControllerGetServiceAsyncWithHttpInfo($service_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceControllerGetServiceAsyncWithHttpInfo
     *
     * 서비스 조회 (관리자전용)
     *
     * @param  float $service_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceControllerGetServiceAsyncWithHttpInfo($service_id)
    {
        $returnType = '\OpenAPI\Client\Model\Service';
        $request = $this->serviceControllerGetServiceRequest($service_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceControllerGetService'
     *
     * @param  float $service_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceControllerGetServiceRequest($service_id)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling serviceControllerGetService'
            );
        }

        $resourcePath = '/public/api/service/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceControllerGetServices
     *
     * 서비스 목록 검색
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $category 서비스 카테고리 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetServicesOutput
     */
    public function serviceControllerGetServices($page, $limit, $route = null, $category = null, $jangbu_id = null)
    {
        list($response) = $this->serviceControllerGetServicesWithHttpInfo($page, $limit, $route, $category, $jangbu_id);
        return $response;
    }

    /**
     * Operation serviceControllerGetServicesWithHttpInfo
     *
     * 서비스 목록 검색
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $category 서비스 카테고리 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetServicesOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceControllerGetServicesWithHttpInfo($page, $limit, $route = null, $category = null, $jangbu_id = null)
    {
        $request = $this->serviceControllerGetServicesRequest($page, $limit, $route, $category, $jangbu_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetServicesOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetServicesOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetServicesOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetServicesOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceControllerGetServicesAsync
     *
     * 서비스 목록 검색
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $category 서비스 카테고리 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceControllerGetServicesAsync($page, $limit, $route = null, $category = null, $jangbu_id = null)
    {
        return $this->serviceControllerGetServicesAsyncWithHttpInfo($page, $limit, $route, $category, $jangbu_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceControllerGetServicesAsyncWithHttpInfo
     *
     * 서비스 목록 검색
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $category 서비스 카테고리 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceControllerGetServicesAsyncWithHttpInfo($page, $limit, $route = null, $category = null, $jangbu_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetServicesOutput';
        $request = $this->serviceControllerGetServicesRequest($page, $limit, $route, $category, $jangbu_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceControllerGetServices'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  string $category 서비스 카테고리 (optional)
     * @param  float $jangbu_id 장부사 순번 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceControllerGetServicesRequest($page, $limit, $route = null, $category = null, $jangbu_id = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling serviceControllerGetServices'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling serviceControllerGetServices'
            );
        }

        $resourcePath = '/public/api/service';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }
        // query params
        if ($jangbu_id !== null) {
            if('form' === 'form' && is_array($jangbu_id)) {
                foreach($jangbu_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jangbuId'] = $jangbu_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceControllerRegisterService
     *
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     *
     * @param  \OpenAPI\Client\Model\RegisterServiceInput $register_service_input register_service_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Service|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function serviceControllerRegisterService($register_service_input)
    {
        list($response) = $this->serviceControllerRegisterServiceWithHttpInfo($register_service_input);
        return $response;
    }

    /**
     * Operation serviceControllerRegisterServiceWithHttpInfo
     *
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     *
     * @param  \OpenAPI\Client\Model\RegisterServiceInput $register_service_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Service|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceControllerRegisterServiceWithHttpInfo($register_service_input)
    {
        $request = $this->serviceControllerRegisterServiceRequest($register_service_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Service' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Service', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Service';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Service',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceControllerRegisterServiceAsync
     *
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     *
     * @param  \OpenAPI\Client\Model\RegisterServiceInput $register_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceControllerRegisterServiceAsync($register_service_input)
    {
        return $this->serviceControllerRegisterServiceAsyncWithHttpInfo($register_service_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceControllerRegisterServiceAsyncWithHttpInfo
     *
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     *
     * @param  \OpenAPI\Client\Model\RegisterServiceInput $register_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceControllerRegisterServiceAsyncWithHttpInfo($register_service_input)
    {
        $returnType = '\OpenAPI\Client\Model\Service';
        $request = $this->serviceControllerRegisterServiceRequest($register_service_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceControllerRegisterService'
     *
     * @param  \OpenAPI\Client\Model\RegisterServiceInput $register_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceControllerRegisterServiceRequest($register_service_input)
    {
        // verify the required parameter 'register_service_input' is set
        if ($register_service_input === null || (is_array($register_service_input) && count($register_service_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $register_service_input when calling serviceControllerRegisterService'
            );
        }

        $resourcePath = '/public/api/service';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($register_service_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_service_input));
            } else {
                $httpBody = $register_service_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceControllerUpdateService
     *
     * 서비스 수정 (관리자전용: 일부사용자)
     *
     * @param  float $service_id service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceInput $update_service_input update_service_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Service|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function serviceControllerUpdateService($service_id, $update_service_input)
    {
        list($response) = $this->serviceControllerUpdateServiceWithHttpInfo($service_id, $update_service_input);
        return $response;
    }

    /**
     * Operation serviceControllerUpdateServiceWithHttpInfo
     *
     * 서비스 수정 (관리자전용: 일부사용자)
     *
     * @param  float $service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceInput $update_service_input (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Service|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceControllerUpdateServiceWithHttpInfo($service_id, $update_service_input)
    {
        $request = $this->serviceControllerUpdateServiceRequest($service_id, $update_service_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Service' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Service', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Service';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Service',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceControllerUpdateServiceAsync
     *
     * 서비스 수정 (관리자전용: 일부사용자)
     *
     * @param  float $service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceInput $update_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceControllerUpdateServiceAsync($service_id, $update_service_input)
    {
        return $this->serviceControllerUpdateServiceAsyncWithHttpInfo($service_id, $update_service_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceControllerUpdateServiceAsyncWithHttpInfo
     *
     * 서비스 수정 (관리자전용: 일부사용자)
     *
     * @param  float $service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceInput $update_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceControllerUpdateServiceAsyncWithHttpInfo($service_id, $update_service_input)
    {
        $returnType = '\OpenAPI\Client\Model\Service';
        $request = $this->serviceControllerUpdateServiceRequest($service_id, $update_service_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceControllerUpdateService'
     *
     * @param  float $service_id (required)
     * @param  \OpenAPI\Client\Model\UpdateServiceInput $update_service_input (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceControllerUpdateServiceRequest($service_id, $update_service_input)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling serviceControllerUpdateService'
            );
        }
        // verify the required parameter 'update_service_input' is set
        if ($update_service_input === null || (is_array($update_service_input) && count($update_service_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_service_input when calling serviceControllerUpdateService'
            );
        }

        $resourcePath = '/public/api/service/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_service_input)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_service_input));
            } else {
                $httpBody = $update_service_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workControllerGetWork
     *
     * 업무 조회
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Work|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function workControllerGetWork($jangbu_id, $user_id, $work_id)
    {
        list($response) = $this->workControllerGetWorkWithHttpInfo($jangbu_id, $user_id, $work_id);
        return $response;
    }

    /**
     * Operation workControllerGetWorkWithHttpInfo
     *
     * 업무 조회
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Work|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function workControllerGetWorkWithHttpInfo($jangbu_id, $user_id, $work_id)
    {
        $request = $this->workControllerGetWorkRequest($jangbu_id, $user_id, $work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Work' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Work', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Work';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Work',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workControllerGetWorkAsync
     *
     * 업무 조회
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorkAsync($jangbu_id, $user_id, $work_id)
    {
        return $this->workControllerGetWorkAsyncWithHttpInfo($jangbu_id, $user_id, $work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workControllerGetWorkAsyncWithHttpInfo
     *
     * 업무 조회
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorkAsyncWithHttpInfo($jangbu_id, $user_id, $work_id)
    {
        $returnType = '\OpenAPI\Client\Model\Work';
        $request = $this->workControllerGetWorkRequest($jangbu_id, $user_id, $work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workControllerGetWork'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function workControllerGetWorkRequest($jangbu_id, $user_id, $work_id)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling workControllerGetWork'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling workControllerGetWork'
            );
        }
        // verify the required parameter 'work_id' is set
        if ($work_id === null || (is_array($work_id) && count($work_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $work_id when calling workControllerGetWork'
            );
        }

        $resourcePath = '/public/api/jangbu/{jangbuId}/user/{userId}/work/{workId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workId' . '}',
                ObjectSerializer::toPathValue($work_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workControllerGetWorkS3Data
     *
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     *
     * @param  string $path S3저장 경로 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetWorkS3DataResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function workControllerGetWorkS3Data($path)
    {
        list($response) = $this->workControllerGetWorkS3DataWithHttpInfo($path);
        return $response;
    }

    /**
     * Operation workControllerGetWorkS3DataWithHttpInfo
     *
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     *
     * @param  string $path S3저장 경로 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetWorkS3DataResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function workControllerGetWorkS3DataWithHttpInfo($path)
    {
        $request = $this->workControllerGetWorkS3DataRequest($path);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetWorkS3DataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetWorkS3DataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetWorkS3DataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetWorkS3DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workControllerGetWorkS3DataAsync
     *
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     *
     * @param  string $path S3저장 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorkS3DataAsync($path)
    {
        return $this->workControllerGetWorkS3DataAsyncWithHttpInfo($path)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workControllerGetWorkS3DataAsyncWithHttpInfo
     *
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     *
     * @param  string $path S3저장 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorkS3DataAsyncWithHttpInfo($path)
    {
        $returnType = '\OpenAPI\Client\Model\GetWorkS3DataResponse';
        $request = $this->workControllerGetWorkS3DataRequest($path);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workControllerGetWorkS3Data'
     *
     * @param  string $path S3저장 경로 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function workControllerGetWorkS3DataRequest($path)
    {
        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling workControllerGetWorkS3Data'
            );
        }

        $resourcePath = '/public/api/work/log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($path !== null) {
            if('form' === 'form' && is_array($path)) {
                foreach($path as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['path'] = $path;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workControllerGetWorkS3DetailLog
     *
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     *
     * @param  float $work_id 업무순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetWorkS3DetailLogResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function workControllerGetWorkS3DetailLog($work_id)
    {
        list($response) = $this->workControllerGetWorkS3DetailLogWithHttpInfo($work_id);
        return $response;
    }

    /**
     * Operation workControllerGetWorkS3DetailLogWithHttpInfo
     *
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     *
     * @param  float $work_id 업무순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetWorkS3DetailLogResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function workControllerGetWorkS3DetailLogWithHttpInfo($work_id)
    {
        $request = $this->workControllerGetWorkS3DetailLogRequest($work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetWorkS3DetailLogResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetWorkS3DetailLogResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetWorkS3DetailLogResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetWorkS3DetailLogResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workControllerGetWorkS3DetailLogAsync
     *
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     *
     * @param  float $work_id 업무순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorkS3DetailLogAsync($work_id)
    {
        return $this->workControllerGetWorkS3DetailLogAsyncWithHttpInfo($work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workControllerGetWorkS3DetailLogAsyncWithHttpInfo
     *
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     *
     * @param  float $work_id 업무순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorkS3DetailLogAsyncWithHttpInfo($work_id)
    {
        $returnType = '\OpenAPI\Client\Model\GetWorkS3DetailLogResponse';
        $request = $this->workControllerGetWorkS3DetailLogRequest($work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workControllerGetWorkS3DetailLog'
     *
     * @param  float $work_id 업무순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function workControllerGetWorkS3DetailLogRequest($work_id)
    {
        // verify the required parameter 'work_id' is set
        if ($work_id === null || (is_array($work_id) && count($work_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $work_id when calling workControllerGetWorkS3DetailLog'
            );
        }

        $resourcePath = '/public/api/work/log-detail/{workId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workId' . '}',
                ObjectSerializer::toPathValue($work_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workControllerGetWorks
     *
     * 업무 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 접수 건수 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetWorksOutput
     */
    public function workControllerGetWorks($page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $jangbu_name = null, $memo = null, $count = null)
    {
        list($response) = $this->workControllerGetWorksWithHttpInfo($page, $limit, $start_at, $end_at, $route, $service_id, $status, $type, $login_id, $user_name, $jangbu_name, $memo, $count);
        return $response;
    }

    /**
     * Operation workControllerGetWorksWithHttpInfo
     *
     * 업무 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 접수 건수 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetWorksOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function workControllerGetWorksWithHttpInfo($page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $jangbu_name = null, $memo = null, $count = null)
    {
        $request = $this->workControllerGetWorksRequest($page, $limit, $start_at, $end_at, $route, $service_id, $status, $type, $login_id, $user_name, $jangbu_name, $memo, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetWorksOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetWorksOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetWorksOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetWorksOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workControllerGetWorksAsync
     *
     * 업무 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 접수 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorksAsync($page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $jangbu_name = null, $memo = null, $count = null)
    {
        return $this->workControllerGetWorksAsyncWithHttpInfo($page, $limit, $start_at, $end_at, $route, $service_id, $status, $type, $login_id, $user_name, $jangbu_name, $memo, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workControllerGetWorksAsyncWithHttpInfo
     *
     * 업무 목록 검색 (관리자 전용)
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 접수 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorksAsyncWithHttpInfo($page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $jangbu_name = null, $memo = null, $count = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetWorksOutput';
        $request = $this->workControllerGetWorksRequest($page, $limit, $start_at, $end_at, $route, $service_id, $status, $type, $login_id, $user_name, $jangbu_name, $memo, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workControllerGetWorks'
     *
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $jangbu_name 장부사명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 접수 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function workControllerGetWorksRequest($page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $jangbu_name = null, $memo = null, $count = null)
    {
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling workControllerGetWorks'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling workControllerGetWorks'
            );
        }
        // verify the required parameter 'start_at' is set
        if ($start_at === null || (is_array($start_at) && count($start_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_at when calling workControllerGetWorks'
            );
        }
        // verify the required parameter 'end_at' is set
        if ($end_at === null || (is_array($end_at) && count($end_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_at when calling workControllerGetWorks'
            );
        }

        $resourcePath = '/public/api/work';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($service_id !== null) {
            if('form' === 'form' && is_array($service_id)) {
                foreach($service_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceId'] = $service_id;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($login_id !== null) {
            if('form' === 'form' && is_array($login_id)) {
                foreach($login_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loginId'] = $login_id;
            }
        }
        // query params
        if ($user_name !== null) {
            if('form' === 'form' && is_array($user_name)) {
                foreach($user_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userName'] = $user_name;
            }
        }
        // query params
        if ($jangbu_name !== null) {
            if('form' === 'form' && is_array($jangbu_name)) {
                foreach($jangbu_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jangbuName'] = $jangbu_name;
            }
        }
        // query params
        if ($memo !== null) {
            if('form' === 'form' && is_array($memo)) {
                foreach($memo as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['memo'] = $memo;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_at !== null) {
            if('form' === 'form' && is_array($start_at)) {
                foreach($start_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startAt'] = $start_at;
            }
        }
        // query params
        if ($end_at !== null) {
            if('form' === 'form' && is_array($end_at)) {
                foreach($end_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endAt'] = $end_at;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workControllerGetWorksByJangbu
     *
     * 장부사별 업무 목록 검색 (장부사 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetWorksOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function workControllerGetWorksByJangbu($jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $memo = null, $count = null)
    {
        list($response) = $this->workControllerGetWorksByJangbuWithHttpInfo($jangbu_id, $page, $limit, $start_at, $end_at, $route, $service_id, $status, $type, $login_id, $user_name, $memo, $count);
        return $response;
    }

    /**
     * Operation workControllerGetWorksByJangbuWithHttpInfo
     *
     * 장부사별 업무 목록 검색 (장부사 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetWorksOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function workControllerGetWorksByJangbuWithHttpInfo($jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $memo = null, $count = null)
    {
        $request = $this->workControllerGetWorksByJangbuRequest($jangbu_id, $page, $limit, $start_at, $end_at, $route, $service_id, $status, $type, $login_id, $user_name, $memo, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetWorksOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetWorksOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetWorksOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetWorksOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workControllerGetWorksByJangbuAsync
     *
     * 장부사별 업무 목록 검색 (장부사 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorksByJangbuAsync($jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $memo = null, $count = null)
    {
        return $this->workControllerGetWorksByJangbuAsyncWithHttpInfo($jangbu_id, $page, $limit, $start_at, $end_at, $route, $service_id, $status, $type, $login_id, $user_name, $memo, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workControllerGetWorksByJangbuAsyncWithHttpInfo
     *
     * 장부사별 업무 목록 검색 (장부사 전용)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorksByJangbuAsyncWithHttpInfo($jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $memo = null, $count = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetWorksOutput';
        $request = $this->workControllerGetWorksByJangbuRequest($jangbu_id, $page, $limit, $start_at, $end_at, $route, $service_id, $status, $type, $login_id, $user_name, $memo, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workControllerGetWorksByJangbu'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  float $service_id 서비스 순번 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  \OpenAPI\Client\Model\WorkRequestType $type (업무)요청 타입 (optional)
     * @param  string $login_id (로그인) 아이디 (optional)
     * @param  string $user_name 상호명 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function workControllerGetWorksByJangbuRequest($jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $service_id = null, $status = null, $type = null, $login_id = null, $user_name = null, $memo = null, $count = null)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling workControllerGetWorksByJangbu'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling workControllerGetWorksByJangbu'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling workControllerGetWorksByJangbu'
            );
        }
        // verify the required parameter 'start_at' is set
        if ($start_at === null || (is_array($start_at) && count($start_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_at when calling workControllerGetWorksByJangbu'
            );
        }
        // verify the required parameter 'end_at' is set
        if ($end_at === null || (is_array($end_at) && count($end_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_at when calling workControllerGetWorksByJangbu'
            );
        }

        $resourcePath = '/public/api/jangbu/{jangbuId}/work';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($service_id !== null) {
            if('form' === 'form' && is_array($service_id)) {
                foreach($service_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serviceId'] = $service_id;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($type !== null) {
            if('form' === 'form' && is_array($type)) {
                foreach($type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type'] = $type;
            }
        }
        // query params
        if ($login_id !== null) {
            if('form' === 'form' && is_array($login_id)) {
                foreach($login_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['loginId'] = $login_id;
            }
        }
        // query params
        if ($user_name !== null) {
            if('form' === 'form' && is_array($user_name)) {
                foreach($user_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userName'] = $user_name;
            }
        }
        // query params
        if ($memo !== null) {
            if('form' === 'form' && is_array($memo)) {
                foreach($memo as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['memo'] = $memo;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_at !== null) {
            if('form' === 'form' && is_array($start_at)) {
                foreach($start_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startAt'] = $start_at;
            }
        }
        // query params
        if ($end_at !== null) {
            if('form' === 'form' && is_array($end_at)) {
                foreach($end_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endAt'] = $end_at;
            }
        }


        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workControllerGetWorksByUser
     *
     * 사용자별 업무 목록 검색 (고객 전용)
     *
     * @param  float $user_id 회원 순번 (required)
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetWorksOutput|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function workControllerGetWorksByUser($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $status = null, $memo = null, $count = null)
    {
        list($response) = $this->workControllerGetWorksByUserWithHttpInfo($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route, $status, $memo, $count);
        return $response;
    }

    /**
     * Operation workControllerGetWorksByUserWithHttpInfo
     *
     * 사용자별 업무 목록 검색 (고객 전용)
     *
     * @param  float $user_id 회원 순번 (required)
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetWorksOutput|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function workControllerGetWorksByUserWithHttpInfo($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $status = null, $memo = null, $count = null)
    {
        $request = $this->workControllerGetWorksByUserRequest($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route, $status, $memo, $count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetWorksOutput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetWorksOutput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetWorksOutput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetWorksOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workControllerGetWorksByUserAsync
     *
     * 사용자별 업무 목록 검색 (고객 전용)
     *
     * @param  float $user_id 회원 순번 (required)
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorksByUserAsync($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $status = null, $memo = null, $count = null)
    {
        return $this->workControllerGetWorksByUserAsyncWithHttpInfo($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route, $status, $memo, $count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workControllerGetWorksByUserAsyncWithHttpInfo
     *
     * 사용자별 업무 목록 검색 (고객 전용)
     *
     * @param  float $user_id 회원 순번 (required)
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerGetWorksByUserAsyncWithHttpInfo($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $status = null, $memo = null, $count = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetWorksOutput';
        $request = $this->workControllerGetWorksByUserRequest($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route, $status, $memo, $count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workControllerGetWorksByUser'
     *
     * @param  float $user_id 회원 순번 (required)
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $page 페이징 페이지 정보 (required)
     * @param  float $limit 페이징 페이지당 목록 수 (required)
     * @param  float $start_at 검색시작일자 (YYYYMMDD) (required)
     * @param  float $end_at 검색종료일자 (YYYYMMDD) (required)
     * @param  string $route 페이징 링크 경로 (optional)
     * @param  \OpenAPI\Client\Model\ProcessFlag $status 상태별 (optional)
     * @param  string $memo 메모내용 (optional)
     * @param  float $count 데이터 건수 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function workControllerGetWorksByUserRequest($user_id, $jangbu_id, $page, $limit, $start_at, $end_at, $route = null, $status = null, $memo = null, $count = null)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling workControllerGetWorksByUser'
            );
        }
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling workControllerGetWorksByUser'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling workControllerGetWorksByUser'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling workControllerGetWorksByUser'
            );
        }
        // verify the required parameter 'start_at' is set
        if ($start_at === null || (is_array($start_at) && count($start_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_at when calling workControllerGetWorksByUser'
            );
        }
        // verify the required parameter 'end_at' is set
        if ($end_at === null || (is_array($end_at) && count($end_at) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_at when calling workControllerGetWorksByUser'
            );
        }

        $resourcePath = '/public/api/jangbu/{jangbuId}/user/{userId}/work';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($route !== null) {
            if('form' === 'form' && is_array($route)) {
                foreach($route as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['route'] = $route;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($memo !== null) {
            if('form' === 'form' && is_array($memo)) {
                foreach($memo as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['memo'] = $memo;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($start_at !== null) {
            if('form' === 'form' && is_array($start_at)) {
                foreach($start_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startAt'] = $start_at;
            }
        }
        // query params
        if ($end_at !== null) {
            if('form' === 'form' && is_array($end_at)) {
                foreach($end_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endAt'] = $end_at;
            }
        }


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation workControllerUpdateWork
     *
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Work
     */
    public function workControllerUpdateWork($jangbu_id, $user_id, $work_id)
    {
        list($response) = $this->workControllerUpdateWorkWithHttpInfo($jangbu_id, $user_id, $work_id);
        return $response;
    }

    /**
     * Operation workControllerUpdateWorkWithHttpInfo
     *
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Work, HTTP status code, HTTP response headers (array of strings)
     */
    public function workControllerUpdateWorkWithHttpInfo($jangbu_id, $user_id, $work_id)
    {
        $request = $this->workControllerUpdateWorkRequest($jangbu_id, $user_id, $work_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Work' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Work', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Work';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Work',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation workControllerUpdateWorkAsync
     *
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerUpdateWorkAsync($jangbu_id, $user_id, $work_id)
    {
        return $this->workControllerUpdateWorkAsyncWithHttpInfo($jangbu_id, $user_id, $work_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation workControllerUpdateWorkAsyncWithHttpInfo
     *
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function workControllerUpdateWorkAsyncWithHttpInfo($jangbu_id, $user_id, $work_id)
    {
        $returnType = '\OpenAPI\Client\Model\Work';
        $request = $this->workControllerUpdateWorkRequest($jangbu_id, $user_id, $work_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'workControllerUpdateWork'
     *
     * @param  float $jangbu_id 장부사 순번 (required)
     * @param  float $user_id 회원 순번 (required)
     * @param  float $work_id 업무 순번 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function workControllerUpdateWorkRequest($jangbu_id, $user_id, $work_id)
    {
        // verify the required parameter 'jangbu_id' is set
        if ($jangbu_id === null || (is_array($jangbu_id) && count($jangbu_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jangbu_id when calling workControllerUpdateWork'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling workControllerUpdateWork'
            );
        }
        // verify the required parameter 'work_id' is set
        if ($work_id === null || (is_array($work_id) && count($work_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $work_id when calling workControllerUpdateWork'
            );
        }

        $resourcePath = '/public/api/jangbu/{jangbuId}/user/{userId}/work/{workId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($jangbu_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jangbuId' . '}',
                ObjectSerializer::toPathValue($jangbu_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($work_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workId' . '}',
                ObjectSerializer::toPathValue($work_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
