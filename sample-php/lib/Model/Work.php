<?php
/**
 * Work
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 뱅크다K 웹앱 REST API
 *
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Work Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Work implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Work';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'service_id' => 'float',
        'user_id' => 'float',
        'jangbu_id' => 'float',
        'status' => '\OpenAPI\Client\Model\ProcessFlag',
        'api_id' => 'float',
        'created_at' => '\DateTime',
        'work_detail' => 'WorkDetail',
        'user' => 'User',
        'jangbu' => 'Jangbu',
        'work_result' => 'WorkResult'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'service_id' => null,
        'user_id' => null,
        'jangbu_id' => null,
        'status' => null,
        'api_id' => null,
        'created_at' => 'date-time',
        'work_detail' => null,
        'user' => null,
        'jangbu' => null,
        'work_result' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'service_id' => 'serviceId',
        'user_id' => 'userId',
        'jangbu_id' => 'jangbuId',
        'status' => 'status',
        'api_id' => 'apiId',
        'created_at' => 'createdAt',
        'work_detail' => 'workDetail',
        'user' => 'user',
        'jangbu' => 'jangbu',
        'work_result' => 'workResult'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'service_id' => 'setServiceId',
        'user_id' => 'setUserId',
        'jangbu_id' => 'setJangbuId',
        'status' => 'setStatus',
        'api_id' => 'setApiId',
        'created_at' => 'setCreatedAt',
        'work_detail' => 'setWorkDetail',
        'user' => 'setUser',
        'jangbu' => 'setJangbu',
        'work_result' => 'setWorkResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'service_id' => 'getServiceId',
        'user_id' => 'getUserId',
        'jangbu_id' => 'getJangbuId',
        'status' => 'getStatus',
        'api_id' => 'getApiId',
        'created_at' => 'getCreatedAt',
        'work_detail' => 'getWorkDetail',
        'user' => 'getUser',
        'jangbu' => 'getJangbu',
        'work_result' => 'getWorkResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['service_id'] = $data['service_id'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['jangbu_id'] = $data['jangbu_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['api_id'] = $data['api_id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['work_detail'] = $data['work_detail'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
        $this->container['jangbu'] = $data['jangbu'] ?? null;
        $this->container['work_result'] = $data['work_result'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['service_id'] === null) {
            $invalidProperties[] = "'service_id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['jangbu_id'] === null) {
            $invalidProperties[] = "'jangbu_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id 업무 순번
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return float
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param float $service_id 서비스 순번
     *
     * @return self
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return float
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param float $user_id 회원 순번
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets jangbu_id
     *
     * @return float
     */
    public function getJangbuId()
    {
        return $this->container['jangbu_id'];
    }

    /**
     * Sets jangbu_id
     *
     * @param float $jangbu_id 장부사 순번
     *
     * @return self
     */
    public function setJangbuId($jangbu_id)
    {
        $this->container['jangbu_id'] = $jangbu_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ProcessFlag
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ProcessFlag $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets api_id
     *
     * @return float|null
     */
    public function getApiId()
    {
        return $this->container['api_id'];
    }

    /**
     * Sets api_id
     *
     * @param float|null $api_id api 순번
     *
     * @return self
     */
    public function setApiId($api_id)
    {
        $this->container['api_id'] = $api_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at 생성일
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets work_detail
     *
     * @return WorkDetail|null
     */
    public function getWorkDetail()
    {
        return $this->container['work_detail'];
    }

    /**
     * Sets work_detail
     *
     * @param WorkDetail|null $work_detail 업무 상세정보
     *
     * @return self
     */
    public function setWorkDetail($work_detail)
    {
        $this->container['work_detail'] = $work_detail;

        return $this;
    }

    /**
     * Gets user
     *
     * @return User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param User|null $user 회원정보
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets jangbu
     *
     * @return Jangbu|null
     */
    public function getJangbu()
    {
        return $this->container['jangbu'];
    }

    /**
     * Sets jangbu
     *
     * @param Jangbu|null $jangbu 장부사정보
     *
     * @return self
     */
    public function setJangbu($jangbu)
    {
        $this->container['jangbu'] = $jangbu;

        return $this;
    }

    /**
     * Gets work_result
     *
     * @return WorkResult|null
     */
    public function getWorkResult()
    {
        return $this->container['work_result'];
    }

    /**
     * Sets work_result
     *
     * @param WorkResult|null $work_result 스크래핑 결과
     *
     * @return self
     */
    public function setWorkResult($work_result)
    {
        $this->container['work_result'] = $work_result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


