<?php
/**
 * SlipSplitDeleteUploadBank
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 뱅크다K 웹앱 REST API
 *
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SlipSplitDeleteUploadBank Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SlipSplitDeleteUploadBank implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SlipSplitDeleteUploadBank';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'trans_datetime' => 'object',
        'trans_date' => 'object',
        'trans_gb' => 'object',
        'trans_money' => 'object',
        'trans_money_in' => 'object',
        'trans_money_out' => 'object',
        'trans_remain' => 'object',
        'trans_memo' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'trans_datetime' => null,
        'trans_date' => null,
        'trans_gb' => null,
        'trans_money' => null,
        'trans_money_in' => null,
        'trans_money_out' => null,
        'trans_remain' => null,
        'trans_memo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trans_datetime' => 'TRANS_DATETIME',
        'trans_date' => 'TRANS_DATE',
        'trans_gb' => 'TRANS_GB',
        'trans_money' => 'TRANS_MONEY',
        'trans_money_in' => 'TRANS_MONEY_IN',
        'trans_money_out' => 'TRANS_MONEY_OUT',
        'trans_remain' => 'TRANS_REMAIN',
        'trans_memo' => 'TRANS_MEMO'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trans_datetime' => 'setTransDatetime',
        'trans_date' => 'setTransDate',
        'trans_gb' => 'setTransGb',
        'trans_money' => 'setTransMoney',
        'trans_money_in' => 'setTransMoneyIn',
        'trans_money_out' => 'setTransMoneyOut',
        'trans_remain' => 'setTransRemain',
        'trans_memo' => 'setTransMemo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trans_datetime' => 'getTransDatetime',
        'trans_date' => 'getTransDate',
        'trans_gb' => 'getTransGb',
        'trans_money' => 'getTransMoney',
        'trans_money_in' => 'getTransMoneyIn',
        'trans_money_out' => 'getTransMoneyOut',
        'trans_remain' => 'getTransRemain',
        'trans_memo' => 'getTransMemo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trans_datetime'] = $data['trans_datetime'] ?? null;
        $this->container['trans_date'] = $data['trans_date'] ?? null;
        $this->container['trans_gb'] = $data['trans_gb'] ?? null;
        $this->container['trans_money'] = $data['trans_money'] ?? null;
        $this->container['trans_money_in'] = $data['trans_money_in'] ?? null;
        $this->container['trans_money_out'] = $data['trans_money_out'] ?? null;
        $this->container['trans_remain'] = $data['trans_remain'] ?? null;
        $this->container['trans_memo'] = $data['trans_memo'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trans_datetime
     *
     * @return object|null
     */
    public function getTransDatetime()
    {
        return $this->container['trans_datetime'];
    }

    /**
     * Sets trans_datetime
     *
     * @param object|null $trans_datetime 거래일시(YYYYMMDD)
     *
     * @return self
     */
    public function setTransDatetime($trans_datetime)
    {
        $this->container['trans_datetime'] = $trans_datetime;

        return $this;
    }

    /**
     * Gets trans_date
     *
     * @return object|null
     */
    public function getTransDate()
    {
        return $this->container['trans_date'];
    }

    /**
     * Sets trans_date
     *
     * @param object|null $trans_date 일자(YYYYMMDD)
     *
     * @return self
     */
    public function setTransDate($trans_date)
    {
        $this->container['trans_date'] = $trans_date;

        return $this;
    }

    /**
     * Gets trans_gb
     *
     * @return object|null
     */
    public function getTransGb()
    {
        return $this->container['trans_gb'];
    }

    /**
     * Sets trans_gb
     *
     * @param object|null $trans_gb 거래내역 입출구분 (I/O)
     *
     * @return self
     */
    public function setTransGb($trans_gb)
    {
        $this->container['trans_gb'] = $trans_gb;

        return $this;
    }

    /**
     * Gets trans_money
     *
     * @return object|null
     */
    public function getTransMoney()
    {
        return $this->container['trans_money'];
    }

    /**
     * Sets trans_money
     *
     * @param object|null $trans_money 거래금액
     *
     * @return self
     */
    public function setTransMoney($trans_money)
    {
        $this->container['trans_money'] = $trans_money;

        return $this;
    }

    /**
     * Gets trans_money_in
     *
     * @return object|null
     */
    public function getTransMoneyIn()
    {
        return $this->container['trans_money_in'];
    }

    /**
     * Sets trans_money_in
     *
     * @param object|null $trans_money_in 입금액(출금거래시 0)
     *
     * @return self
     */
    public function setTransMoneyIn($trans_money_in)
    {
        $this->container['trans_money_in'] = $trans_money_in;

        return $this;
    }

    /**
     * Gets trans_money_out
     *
     * @return object|null
     */
    public function getTransMoneyOut()
    {
        return $this->container['trans_money_out'];
    }

    /**
     * Sets trans_money_out
     *
     * @param object|null $trans_money_out 출금액(입금거래시 0)
     *
     * @return self
     */
    public function setTransMoneyOut($trans_money_out)
    {
        $this->container['trans_money_out'] = $trans_money_out;

        return $this;
    }

    /**
     * Gets trans_remain
     *
     * @return object|null
     */
    public function getTransRemain()
    {
        return $this->container['trans_remain'];
    }

    /**
     * Sets trans_remain
     *
     * @param object|null $trans_remain 거래후 잔액
     *
     * @return self
     */
    public function setTransRemain($trans_remain)
    {
        $this->container['trans_remain'] = $trans_remain;

        return $this;
    }

    /**
     * Gets trans_memo
     *
     * @return object|null
     */
    public function getTransMemo()
    {
        return $this->container['trans_memo'];
    }

    /**
     * Sets trans_memo
     *
     * @param object|null $trans_memo 거래내용(적요)
     *
     * @return self
     */
    public function setTransMemo($trans_memo)
    {
        $this->container['trans_memo'] = $trans_memo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


