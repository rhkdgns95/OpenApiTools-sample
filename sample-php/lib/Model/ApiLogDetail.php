<?php
/**
 * ApiLogDetail
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 뱅크다K 웹앱 REST API
 *
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiLogDetail Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ApiLogDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiLogDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_id' => 'float',
        'version' => 'string',
        'method' => 'string',
        'service_name' => 'string',
        'user_type' => 'string',
        'work_request_type' => 'string',
        'description' => 'string',
        'in_data' => 'string',
        'out_data' => 'string',
        'in_data_path' => 'string',
        'out_data_path' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_id' => null,
        'version' => null,
        'method' => null,
        'service_name' => null,
        'user_type' => null,
        'work_request_type' => null,
        'description' => null,
        'in_data' => null,
        'out_data' => null,
        'in_data_path' => null,
        'out_data_path' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_id' => 'apiId',
        'version' => 'version',
        'method' => 'method',
        'service_name' => 'serviceName',
        'user_type' => 'userType',
        'work_request_type' => 'workRequestType',
        'description' => 'description',
        'in_data' => 'inData',
        'out_data' => 'outData',
        'in_data_path' => 'inDataPath',
        'out_data_path' => 'outDataPath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_id' => 'setApiId',
        'version' => 'setVersion',
        'method' => 'setMethod',
        'service_name' => 'setServiceName',
        'user_type' => 'setUserType',
        'work_request_type' => 'setWorkRequestType',
        'description' => 'setDescription',
        'in_data' => 'setInData',
        'out_data' => 'setOutData',
        'in_data_path' => 'setInDataPath',
        'out_data_path' => 'setOutDataPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_id' => 'getApiId',
        'version' => 'getVersion',
        'method' => 'getMethod',
        'service_name' => 'getServiceName',
        'user_type' => 'getUserType',
        'work_request_type' => 'getWorkRequestType',
        'description' => 'getDescription',
        'in_data' => 'getInData',
        'out_data' => 'getOutData',
        'in_data_path' => 'getInDataPath',
        'out_data_path' => 'getOutDataPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_id'] = $data['api_id'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['service_name'] = $data['service_name'] ?? null;
        $this->container['user_type'] = $data['user_type'] ?? null;
        $this->container['work_request_type'] = $data['work_request_type'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['in_data'] = $data['in_data'] ?? null;
        $this->container['out_data'] = $data['out_data'] ?? null;
        $this->container['in_data_path'] = $data['in_data_path'] ?? null;
        $this->container['out_data_path'] = $data['out_data_path'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_id'] === null) {
            $invalidProperties[] = "'api_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_id
     *
     * @return float
     */
    public function getApiId()
    {
        return $this->container['api_id'];
    }

    /**
     * Sets api_id
     *
     * @param float $api_id api로그 번호
     *
     * @return self
     */
    public function setApiId($api_id)
    {
        $this->container['api_id'] = $api_id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version api 버전
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method api 요청 method
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string|null
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string|null $service_name api 요청 서비스
     *
     * @return self
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string|null
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string|null $user_type api 요청 주체
     *
     * @return self
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets work_request_type
     *
     * @return string|null
     */
    public function getWorkRequestType()
    {
        return $this->container['work_request_type'];
    }

    /**
     * Sets work_request_type
     *
     * @param string|null $work_request_type 데이터등록요청 타입
     *
     * @return self
     */
    public function setWorkRequestType($work_request_type)
    {
        $this->container['work_request_type'] = $work_request_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description api 요청 결과
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets in_data
     *
     * @return string|null
     */
    public function getInData()
    {
        return $this->container['in_data'];
    }

    /**
     * Sets in_data
     *
     * @param string|null $in_data In data
     *
     * @return self
     */
    public function setInData($in_data)
    {
        $this->container['in_data'] = $in_data;

        return $this;
    }

    /**
     * Gets out_data
     *
     * @return string|null
     */
    public function getOutData()
    {
        return $this->container['out_data'];
    }

    /**
     * Sets out_data
     *
     * @param string|null $out_data Out data
     *
     * @return self
     */
    public function setOutData($out_data)
    {
        $this->container['out_data'] = $out_data;

        return $this;
    }

    /**
     * Gets in_data_path
     *
     * @return string|null
     */
    public function getInDataPath()
    {
        return $this->container['in_data_path'];
    }

    /**
     * Sets in_data_path
     *
     * @param string|null $in_data_path In data s3 데이터
     *
     * @return self
     */
    public function setInDataPath($in_data_path)
    {
        $this->container['in_data_path'] = $in_data_path;

        return $this;
    }

    /**
     * Gets out_data_path
     *
     * @return string|null
     */
    public function getOutDataPath()
    {
        return $this->container['out_data_path'];
    }

    /**
     * Sets out_data_path
     *
     * @param string|null $out_data_path Out data s3 데이터
     *
     * @return self
     */
    public function setOutDataPath($out_data_path)
    {
        $this->container['out_data_path'] = $out_data_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


