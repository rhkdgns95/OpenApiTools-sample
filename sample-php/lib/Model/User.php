<?php
/**
 * User
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 뱅크다K 웹앱 REST API
 *
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'jangbu_id' => 'float',
        'login_id' => 'string',
        'name' => 'string',
        'ceo_name' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'created_at' => '\DateTime',
        'active' => 'bool',
        'user_level' => 'float',
        'jangbu' => 'Jangbu',
        'role_group' => 'RoleGroup'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'jangbu_id' => null,
        'login_id' => null,
        'name' => null,
        'ceo_name' => null,
        'email' => null,
        'phone' => null,
        'created_at' => 'date-time',
        'active' => null,
        'user_level' => null,
        'jangbu' => null,
        'role_group' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'jangbu_id' => 'jangbuId',
        'login_id' => 'loginId',
        'name' => 'name',
        'ceo_name' => 'ceoName',
        'email' => 'email',
        'phone' => 'phone',
        'created_at' => 'createdAt',
        'active' => 'active',
        'user_level' => 'userLevel',
        'jangbu' => 'jangbu',
        'role_group' => 'roleGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'jangbu_id' => 'setJangbuId',
        'login_id' => 'setLoginId',
        'name' => 'setName',
        'ceo_name' => 'setCeoName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'created_at' => 'setCreatedAt',
        'active' => 'setActive',
        'user_level' => 'setUserLevel',
        'jangbu' => 'setJangbu',
        'role_group' => 'setRoleGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'jangbu_id' => 'getJangbuId',
        'login_id' => 'getLoginId',
        'name' => 'getName',
        'ceo_name' => 'getCeoName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'created_at' => 'getCreatedAt',
        'active' => 'getActive',
        'user_level' => 'getUserLevel',
        'jangbu' => 'getJangbu',
        'role_group' => 'getRoleGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['jangbu_id'] = $data['jangbu_id'] ?? null;
        $this->container['login_id'] = $data['login_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['ceo_name'] = $data['ceo_name'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['user_level'] = $data['user_level'] ?? null;
        $this->container['jangbu'] = $data['jangbu'] ?? null;
        $this->container['role_group'] = $data['role_group'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['login_id'] === null) {
            $invalidProperties[] = "'login_id' can't be null";
        }
        if ((mb_strlen($this->container['login_id']) > 45)) {
            $invalidProperties[] = "invalid value for 'login_id', the character length must be smaller than or equal to 45.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['user_level'] === null) {
            $invalidProperties[] = "'user_level' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id 회원순번
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets jangbu_id
     *
     * @return float|null
     */
    public function getJangbuId()
    {
        return $this->container['jangbu_id'];
    }

    /**
     * Sets jangbu_id
     *
     * @param float|null $jangbu_id 장부사 순번 (관리자의 경우 없음)
     *
     * @return self
     */
    public function setJangbuId($jangbu_id)
    {
        $this->container['jangbu_id'] = $jangbu_id;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return string
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param string $login_id 로그인아이디
     *
     * @return self
     */
    public function setLoginId($login_id)
    {
        if ((mb_strlen($login_id) > 45)) {
            throw new \InvalidArgumentException('invalid length for $login_id when calling User., must be smaller than or equal to 45.');
        }

        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 회원명
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ceo_name
     *
     * @return string|null
     */
    public function getCeoName()
    {
        return $this->container['ceo_name'];
    }

    /**
     * Sets ceo_name
     *
     * @param string|null $ceo_name 대표자명
     *
     * @return self
     */
    public function setCeoName($ceo_name)
    {
        $this->container['ceo_name'] = $ceo_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email 이메일
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone 핸드폰
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at 생성일시
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active 이용여부
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets user_level
     *
     * @return float
     */
    public function getUserLevel()
    {
        return $this->container['user_level'];
    }

    /**
     * Sets user_level
     *
     * @param float $user_level 회원레벨 (1:고객, 2:장부사, 3:관리자)
     *
     * @return self
     */
    public function setUserLevel($user_level)
    {
        $this->container['user_level'] = $user_level;

        return $this;
    }

    /**
     * Gets jangbu
     *
     * @return Jangbu|null
     */
    public function getJangbu()
    {
        return $this->container['jangbu'];
    }

    /**
     * Sets jangbu
     *
     * @param Jangbu|null $jangbu 장부사
     *
     * @return self
     */
    public function setJangbu($jangbu)
    {
        $this->container['jangbu'] = $jangbu;

        return $this;
    }

    /**
     * Gets role_group
     *
     * @return RoleGroup|null
     */
    public function getRoleGroup()
    {
        return $this->container['role_group'];
    }

    /**
     * Sets role_group
     *
     * @param RoleGroup|null $role_group 권한그룹
     *
     * @return self
     */
    public function setRoleGroup($role_group)
    {
        $this->container['role_group'] = $role_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


