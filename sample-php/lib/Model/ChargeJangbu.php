<?php
/**
 * ChargeJangbu
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 뱅크다K 웹앱 REST API
 *
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ChargeJangbu Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ChargeJangbu implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChargeJangbu';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'jangbu_id' => 'float',
        'year_month' => 'float',
        'total_price' => 'float',
        'discount_price' => 'float',
        'min_billing_price' => 'float',
        'billing_price' => 'float',
        'vat_price' => 'float',
        'status' => '\OpenAPI\Client\Model\ChargeJangbuStatus',
        'paid' => '\OpenAPI\Client\Model\ChargeJangbuPaid',
        'memo' => 'string',
        'paid_memo' => 'string',
        'charge_jangbu_partnership' => 'ChargeJangbuPartnership',
        'jangbu' => 'Jangbu'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'jangbu_id' => null,
        'year_month' => null,
        'total_price' => null,
        'discount_price' => null,
        'min_billing_price' => null,
        'billing_price' => null,
        'vat_price' => null,
        'status' => null,
        'paid' => null,
        'memo' => null,
        'paid_memo' => null,
        'charge_jangbu_partnership' => null,
        'jangbu' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jangbu_id' => 'jangbuId',
        'year_month' => 'yearMonth',
        'total_price' => 'totalPrice',
        'discount_price' => 'discountPrice',
        'min_billing_price' => 'minBillingPrice',
        'billing_price' => 'billingPrice',
        'vat_price' => 'vatPrice',
        'status' => 'status',
        'paid' => 'paid',
        'memo' => 'memo',
        'paid_memo' => 'paidMemo',
        'charge_jangbu_partnership' => 'chargeJangbuPartnership',
        'jangbu' => 'jangbu'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jangbu_id' => 'setJangbuId',
        'year_month' => 'setYearMonth',
        'total_price' => 'setTotalPrice',
        'discount_price' => 'setDiscountPrice',
        'min_billing_price' => 'setMinBillingPrice',
        'billing_price' => 'setBillingPrice',
        'vat_price' => 'setVatPrice',
        'status' => 'setStatus',
        'paid' => 'setPaid',
        'memo' => 'setMemo',
        'paid_memo' => 'setPaidMemo',
        'charge_jangbu_partnership' => 'setChargeJangbuPartnership',
        'jangbu' => 'setJangbu'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jangbu_id' => 'getJangbuId',
        'year_month' => 'getYearMonth',
        'total_price' => 'getTotalPrice',
        'discount_price' => 'getDiscountPrice',
        'min_billing_price' => 'getMinBillingPrice',
        'billing_price' => 'getBillingPrice',
        'vat_price' => 'getVatPrice',
        'status' => 'getStatus',
        'paid' => 'getPaid',
        'memo' => 'getMemo',
        'paid_memo' => 'getPaidMemo',
        'charge_jangbu_partnership' => 'getChargeJangbuPartnership',
        'jangbu' => 'getJangbu'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jangbu_id'] = $data['jangbu_id'] ?? null;
        $this->container['year_month'] = $data['year_month'] ?? null;
        $this->container['total_price'] = $data['total_price'] ?? null;
        $this->container['discount_price'] = $data['discount_price'] ?? null;
        $this->container['min_billing_price'] = $data['min_billing_price'] ?? null;
        $this->container['billing_price'] = $data['billing_price'] ?? null;
        $this->container['vat_price'] = $data['vat_price'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['paid'] = $data['paid'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['paid_memo'] = $data['paid_memo'] ?? null;
        $this->container['charge_jangbu_partnership'] = $data['charge_jangbu_partnership'] ?? null;
        $this->container['jangbu'] = $data['jangbu'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['jangbu_id'] === null) {
            $invalidProperties[] = "'jangbu_id' can't be null";
        }
        if ($this->container['year_month'] === null) {
            $invalidProperties[] = "'year_month' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['discount_price'] === null) {
            $invalidProperties[] = "'discount_price' can't be null";
        }
        if ($this->container['min_billing_price'] === null) {
            $invalidProperties[] = "'min_billing_price' can't be null";
        }
        if ($this->container['billing_price'] === null) {
            $invalidProperties[] = "'billing_price' can't be null";
        }
        if ($this->container['vat_price'] === null) {
            $invalidProperties[] = "'vat_price' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['paid'] === null) {
            $invalidProperties[] = "'paid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jangbu_id
     *
     * @return float
     */
    public function getJangbuId()
    {
        return $this->container['jangbu_id'];
    }

    /**
     * Sets jangbu_id
     *
     * @param float $jangbu_id 장부사 순번
     *
     * @return self
     */
    public function setJangbuId($jangbu_id)
    {
        $this->container['jangbu_id'] = $jangbu_id;

        return $this;
    }

    /**
     * Gets year_month
     *
     * @return float
     */
    public function getYearMonth()
    {
        return $this->container['year_month'];
    }

    /**
     * Sets year_month
     *
     * @param float $year_month 해당연월
     *
     * @return self
     */
    public function setYearMonth($year_month)
    {
        $this->container['year_month'] = $year_month;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price 정산합계금액
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets discount_price
     *
     * @return float
     */
    public function getDiscountPrice()
    {
        return $this->container['discount_price'];
    }

    /**
     * Sets discount_price
     *
     * @param float $discount_price 할인된 금액
     *
     * @return self
     */
    public function setDiscountPrice($discount_price)
    {
        $this->container['discount_price'] = $discount_price;

        return $this;
    }

    /**
     * Gets min_billing_price
     *
     * @return float
     */
    public function getMinBillingPrice()
    {
        return $this->container['min_billing_price'];
    }

    /**
     * Sets min_billing_price
     *
     * @param float $min_billing_price 최저이용금액
     *
     * @return self
     */
    public function setMinBillingPrice($min_billing_price)
    {
        $this->container['min_billing_price'] = $min_billing_price;

        return $this;
    }

    /**
     * Gets billing_price
     *
     * @return float
     */
    public function getBillingPrice()
    {
        return $this->container['billing_price'];
    }

    /**
     * Sets billing_price
     *
     * @param float $billing_price 청구금액
     *
     * @return self
     */
    public function setBillingPrice($billing_price)
    {
        $this->container['billing_price'] = $billing_price;

        return $this;
    }

    /**
     * Gets vat_price
     *
     * @return float
     */
    public function getVatPrice()
    {
        return $this->container['vat_price'];
    }

    /**
     * Sets vat_price
     *
     * @param float $vat_price 부가세 포함금액
     *
     * @return self
     */
    public function setVatPrice($vat_price)
    {
        $this->container['vat_price'] = $vat_price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ChargeJangbuStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ChargeJangbuStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return \OpenAPI\Client\Model\ChargeJangbuPaid
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param \OpenAPI\Client\Model\ChargeJangbuPaid $paid paid
     *
     * @return self
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo 메모 (합계산정이유 등)
     *
     * @return self
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets paid_memo
     *
     * @return string|null
     */
    public function getPaidMemo()
    {
        return $this->container['paid_memo'];
    }

    /**
     * Sets paid_memo
     *
     * @param string|null $paid_memo 정산관련메모 (미납사유 등)
     *
     * @return self
     */
    public function setPaidMemo($paid_memo)
    {
        $this->container['paid_memo'] = $paid_memo;

        return $this;
    }

    /**
     * Gets charge_jangbu_partnership
     *
     * @return ChargeJangbuPartnership|null
     */
    public function getChargeJangbuPartnership()
    {
        return $this->container['charge_jangbu_partnership'];
    }

    /**
     * Sets charge_jangbu_partnership
     *
     * @param ChargeJangbuPartnership|null $charge_jangbu_partnership 계좌통합서비스
     *
     * @return self
     */
    public function setChargeJangbuPartnership($charge_jangbu_partnership)
    {
        $this->container['charge_jangbu_partnership'] = $charge_jangbu_partnership;

        return $this;
    }

    /**
     * Gets jangbu
     *
     * @return Jangbu|null
     */
    public function getJangbu()
    {
        return $this->container['jangbu'];
    }

    /**
     * Sets jangbu
     *
     * @param Jangbu|null $jangbu 장부사
     *
     * @return self
     */
    public function setJangbu($jangbu)
    {
        $this->container['jangbu'] = $jangbu;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


