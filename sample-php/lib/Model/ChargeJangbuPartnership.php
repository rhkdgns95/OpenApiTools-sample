<?php
/**
 * ChargeJangbuPartnership
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 뱅크다K 웹앱 REST API
 *
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ChargeJangbuPartnership Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ChargeJangbuPartnership implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChargeJangbuPartnership';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'jangbu_id' => 'float',
        'year_month' => 'float',
        'apply_count' => 'float',
        'unit_price' => 'float',
        'supply_price' => 'float',
        'vat_price' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'jangbu_id' => null,
        'year_month' => null,
        'apply_count' => null,
        'unit_price' => null,
        'supply_price' => null,
        'vat_price' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jangbu_id' => 'jangbuId',
        'year_month' => 'yearMonth',
        'apply_count' => 'applyCount',
        'unit_price' => 'unitPrice',
        'supply_price' => 'supplyPrice',
        'vat_price' => 'vatPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jangbu_id' => 'setJangbuId',
        'year_month' => 'setYearMonth',
        'apply_count' => 'setApplyCount',
        'unit_price' => 'setUnitPrice',
        'supply_price' => 'setSupplyPrice',
        'vat_price' => 'setVatPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jangbu_id' => 'getJangbuId',
        'year_month' => 'getYearMonth',
        'apply_count' => 'getApplyCount',
        'unit_price' => 'getUnitPrice',
        'supply_price' => 'getSupplyPrice',
        'vat_price' => 'getVatPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jangbu_id'] = $data['jangbu_id'] ?? null;
        $this->container['year_month'] = $data['year_month'] ?? null;
        $this->container['apply_count'] = $data['apply_count'] ?? null;
        $this->container['unit_price'] = $data['unit_price'] ?? null;
        $this->container['supply_price'] = $data['supply_price'] ?? null;
        $this->container['vat_price'] = $data['vat_price'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['jangbu_id'] === null) {
            $invalidProperties[] = "'jangbu_id' can't be null";
        }
        if ($this->container['year_month'] === null) {
            $invalidProperties[] = "'year_month' can't be null";
        }
        if ($this->container['apply_count'] === null) {
            $invalidProperties[] = "'apply_count' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['supply_price'] === null) {
            $invalidProperties[] = "'supply_price' can't be null";
        }
        if ($this->container['vat_price'] === null) {
            $invalidProperties[] = "'vat_price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jangbu_id
     *
     * @return float
     */
    public function getJangbuId()
    {
        return $this->container['jangbu_id'];
    }

    /**
     * Sets jangbu_id
     *
     * @param float $jangbu_id 장부사 순번
     *
     * @return self
     */
    public function setJangbuId($jangbu_id)
    {
        $this->container['jangbu_id'] = $jangbu_id;

        return $this;
    }

    /**
     * Gets year_month
     *
     * @return float
     */
    public function getYearMonth()
    {
        return $this->container['year_month'];
    }

    /**
     * Sets year_month
     *
     * @param float $year_month 정산연월
     *
     * @return self
     */
    public function setYearMonth($year_month)
    {
        $this->container['year_month'] = $year_month;

        return $this;
    }

    /**
     * Gets apply_count
     *
     * @return float
     */
    public function getApplyCount()
    {
        return $this->container['apply_count'];
    }

    /**
     * Sets apply_count
     *
     * @param float $apply_count 계좌수
     *
     * @return self
     */
    public function setApplyCount($apply_count)
    {
        $this->container['apply_count'] = $apply_count;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float $unit_price 단가
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets supply_price
     *
     * @return float
     */
    public function getSupplyPrice()
    {
        return $this->container['supply_price'];
    }

    /**
     * Sets supply_price
     *
     * @param float $supply_price 총 금액
     *
     * @return self
     */
    public function setSupplyPrice($supply_price)
    {
        $this->container['supply_price'] = $supply_price;

        return $this;
    }

    /**
     * Gets vat_price
     *
     * @return float
     */
    public function getVatPrice()
    {
        return $this->container['vat_price'];
    }

    /**
     * Sets vat_price
     *
     * @param float $vat_price (부가세포함된) 총 금액
     *
     * @return self
     */
    public function setVatPrice($vat_price)
    {
        $this->container['vat_price'] = $vat_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


