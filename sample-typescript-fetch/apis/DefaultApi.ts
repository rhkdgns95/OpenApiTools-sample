/* tslint:disable */
/* eslint-disable */
/**
 * 뱅크다K 웹앱 REST API
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdjustJangbuService,
    AdjustJangbuServiceFromJSON,
    AdjustJangbuServiceToJSON,
    AppVersion,
    AppVersionFromJSON,
    AppVersionToJSON,
    ChargeJangbu,
    ChargeJangbuFromJSON,
    ChargeJangbuToJSON,
    ChargeJangbuPartnership,
    ChargeJangbuPartnershipFromJSON,
    ChargeJangbuPartnershipToJSON,
    CreateRoleGroupInput,
    CreateRoleGroupInputFromJSON,
    CreateRoleGroupInputToJSON,
    ExceptionResponse,
    ExceptionResponseFromJSON,
    ExceptionResponseToJSON,
    FindMemberInput,
    FindMemberInputFromJSON,
    FindMemberInputToJSON,
    FindMemberOutput,
    FindMemberOutputFromJSON,
    FindMemberOutputToJSON,
    GetAppVersionsOutput,
    GetAppVersionsOutputFromJSON,
    GetAppVersionsOutputToJSON,
    GetCertOutput,
    GetCertOutputFromJSON,
    GetCertOutputToJSON,
    GetChargeJangbuPreviewOutput,
    GetChargeJangbuPreviewOutputFromJSON,
    GetChargeJangbuPreviewOutputToJSON,
    GetErrorsResponse,
    GetErrorsResponseFromJSON,
    GetErrorsResponseToJSON,
    GetJangbuMessagesOutput,
    GetJangbuMessagesOutputFromJSON,
    GetJangbuMessagesOutputToJSON,
    GetJangbusOutput,
    GetJangbusOutputFromJSON,
    GetJangbusOutputToJSON,
    GetMembersOutput,
    GetMembersOutputFromJSON,
    GetMembersOutputToJSON,
    GetNotices,
    GetNoticesFromJSON,
    GetNoticesToJSON,
    GetScrapingCodesOutput,
    GetScrapingCodesOutputFromJSON,
    GetScrapingCodesOutputToJSON,
    GetServicesOutput,
    GetServicesOutputFromJSON,
    GetServicesOutputToJSON,
    GetWorkS3DataResponse,
    GetWorkS3DataResponseFromJSON,
    GetWorkS3DataResponseToJSON,
    GetWorkS3DetailLogResponse,
    GetWorkS3DetailLogResponseFromJSON,
    GetWorkS3DetailLogResponseToJSON,
    GetWorksOutput,
    GetWorksOutputFromJSON,
    GetWorksOutputToJSON,
    Jangbu,
    JangbuFromJSON,
    JangbuToJSON,
    LoginInput,
    LoginInputFromJSON,
    LoginInputToJSON,
    LoginOutput,
    LoginOutputFromJSON,
    LoginOutputToJSON,
    Message,
    MessageFromJSON,
    MessageToJSON,
    Notice,
    NoticeFromJSON,
    NoticeToJSON,
    OsType,
    OsTypeFromJSON,
    OsTypeToJSON,
    PcClientError,
    PcClientErrorFromJSON,
    PcClientErrorToJSON,
    ProcessFlag,
    ProcessFlagFromJSON,
    ProcessFlagToJSON,
    Recovery,
    RecoveryFromJSON,
    RecoveryToJSON,
    RefreshInput,
    RefreshInputFromJSON,
    RefreshInputToJSON,
    RefreshOutput,
    RefreshOutputFromJSON,
    RefreshOutputToJSON,
    RegisterAdjustOutput,
    RegisterAdjustOutputFromJSON,
    RegisterAdjustOutputToJSON,
    RegisterAppVersionInput,
    RegisterAppVersionInputFromJSON,
    RegisterAppVersionInputToJSON,
    RegisterCustomerInput,
    RegisterCustomerInputFromJSON,
    RegisterCustomerInputToJSON,
    RegisterJangbuInput,
    RegisterJangbuInputFromJSON,
    RegisterJangbuInputToJSON,
    RegisterMemberInput,
    RegisterMemberInputFromJSON,
    RegisterMemberInputToJSON,
    RegisterNoticeInput,
    RegisterNoticeInputFromJSON,
    RegisterNoticeInputToJSON,
    RegisterScrapingCodeVersionInput,
    RegisterScrapingCodeVersionInputFromJSON,
    RegisterScrapingCodeVersionInputToJSON,
    RegisterServiceInput,
    RegisterServiceInputFromJSON,
    RegisterServiceInputToJSON,
    ResetPasswordInput,
    ResetPasswordInputFromJSON,
    ResetPasswordInputToJSON,
    ResetPasswordOutput,
    ResetPasswordOutputFromJSON,
    ResetPasswordOutputToJSON,
    RoleGroup,
    RoleGroupFromJSON,
    RoleGroupToJSON,
    ScrapingCode,
    ScrapingCodeFromJSON,
    ScrapingCodeToJSON,
    SearchAdjustJangbuServicesOutput,
    SearchAdjustJangbuServicesOutputFromJSON,
    SearchAdjustJangbuServicesOutputToJSON,
    SearchChargeJangbuUserServicesOutput,
    SearchChargeJangbuUserServicesOutputFromJSON,
    SearchChargeJangbuUserServicesOutputToJSON,
    SearchChargeJangbusOutput,
    SearchChargeJangbusOutputFromJSON,
    SearchChargeJangbusOutputToJSON,
    SearchRoleGroupOutput,
    SearchRoleGroupOutputFromJSON,
    SearchRoleGroupOutputToJSON,
    SendChagreJangbuMailTestInput,
    SendChagreJangbuMailTestInputFromJSON,
    SendChagreJangbuMailTestInputToJSON,
    SendChargeJangbuMailTestOutput,
    SendChargeJangbuMailTestOutputFromJSON,
    SendChargeJangbuMailTestOutputToJSON,
    Service,
    ServiceFromJSON,
    ServiceToJSON,
    UpdateAdjustJangbuServiceInput,
    UpdateAdjustJangbuServiceInputFromJSON,
    UpdateAdjustJangbuServiceInputToJSON,
    UpdateAppVersionInput,
    UpdateAppVersionInputFromJSON,
    UpdateAppVersionInputToJSON,
    UpdateChargeJangbuPaidInput,
    UpdateChargeJangbuPaidInputFromJSON,
    UpdateChargeJangbuPaidInputToJSON,
    UpdateChargeJangbuPartnershipInput,
    UpdateChargeJangbuPartnershipInputFromJSON,
    UpdateChargeJangbuPartnershipInputToJSON,
    UpdateChargeJangbuStatusInput,
    UpdateChargeJangbuStatusInputFromJSON,
    UpdateChargeJangbuStatusInputToJSON,
    UpdateJangbuInput,
    UpdateJangbuInputFromJSON,
    UpdateJangbuInputToJSON,
    UpdateMemberInput,
    UpdateMemberInputFromJSON,
    UpdateMemberInputToJSON,
    UpdateRoleGroupInput,
    UpdateRoleGroupInputFromJSON,
    UpdateRoleGroupInputToJSON,
    UpdateServiceInput,
    UpdateServiceInputFromJSON,
    UpdateServiceInputToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    Work,
    WorkFromJSON,
    WorkToJSON,
    WorkRequestType,
    WorkRequestTypeFromJSON,
    WorkRequestTypeToJSON,
} from '../models';

export interface AdjustControllerGetChargeJangbuPartnershipRequest {
    jangbuId: number;
    yearMonth: number;
}

export interface AdjustControllerGetChargeJangbuPreviewRequest {
    jangbuId: number;
    yearMonth: number;
}

export interface AdjustControllerRegisterAdjustRequest {
    jangbuId: number;
    yearMonth: number;
    step: number;
}

export interface AdjustControllerSearchAdjustJangbuServicesRequest {
    jangbuId: number;
    yearMonth: number;
    page: number;
    limit: number;
    route?: string;
}

export interface AdjustControllerSearchChargeJangbuFromJangbuRequest {
    jangbuId: number;
    page: number;
    limit: number;
    route?: string;
    yearMonth?: number;
}

export interface AdjustControllerSearchChargeJangbuUserServicesRequest {
    jangbuId: number;
    yearMonth: number;
    serviceId: number;
    page: number;
    limit: number;
    route?: string;
}

export interface AdjustControllerSearchChargeJangbusRequest {
    page: number;
    limit: number;
    route?: string;
    jangbuId?: number;
    yearMonth?: number;
}

export interface AdjustControllerSendChargeJangbuMailTestRequest {
    jangbuId: number;
    yearMonth: number;
    sendChagreJangbuMailTestInput: SendChagreJangbuMailTestInput;
}

export interface AdjustControllerUpdateAdjustJangbuServiceRequest {
    jangbuId: number;
    yearMonth: number;
    serviceId: number;
    updateAdjustJangbuServiceInput: UpdateAdjustJangbuServiceInput;
}

export interface AdjustControllerUpdateChargeJangbuPaidRequest {
    jangbuId: number;
    yearMonth: number;
    updateChargeJangbuPaidInput: UpdateChargeJangbuPaidInput;
}

export interface AdjustControllerUpdateChargeJangbuPartnershipRequest {
    jangbuId: number;
    yearMonth: number;
    updateChargeJangbuPartnershipInput: UpdateChargeJangbuPartnershipInput;
}

export interface AdjustControllerUpdateChargeJangbuStatusRequest {
    jangbuId: number;
    yearMonth: number;
    updateChargeJangbuStatusInput: UpdateChargeJangbuStatusInput;
}

export interface AuthControllerDeleteTokenRequest {
    refreshToken: string;
}

export interface AuthControllerLoginRequest {
    loginInput: LoginInput;
}

export interface AuthControllerRefreshRequest {
    refreshInput: RefreshInput;
}

export interface ErrorControllerGetCertRequest {
    errorId: number;
    connectId: number;
    path: string;
}

export interface ErrorControllerGetErrorRequest {
    errorId: number;
}

export interface ErrorControllerGetErrorsRequest {
    page: number;
    limit: number;
    startAt: string;
    endAt: string;
    route?: string;
    appVersion?: string;
    appName?: string;
    jangbuName?: string;
    userId?: number;
}

export interface JangbuControllerGetJangbuRequest {
    jangbuId: number;
}

export interface JangbuControllerGetJangbusRequest {
    page: number;
    limit: number;
    route?: string;
    serviceIds?: Array<number>;
    jangbuName?: string;
    repId?: string;
}

export interface JangbuControllerGetJangbusWithChargeJangbuPartnershipRequest {
    yearMonth: number;
    page: number;
    limit: number;
    route?: string;
    serviceIds?: Array<number>;
    jangbuName?: string;
    repId?: string;
}

export interface JangbuControllerRegisterJangbuRequest {
    registerJangbuInput: RegisterJangbuInput;
}

export interface JangbuControllerUpdateJangbuRequest {
    jangbuId: number;
    updateJangbuInput: UpdateJangbuInput;
}

export interface MemberControllerFindMemberRequest {
    findMemberInput: FindMemberInput;
}

export interface MemberControllerGetMemberRequest {
    userId: number;
}

export interface MemberControllerGetMembersRequest {
    page: number;
    limit: number;
    route?: string;
    jangbuId?: number;
    serviceId?: number;
    active?: MemberControllerGetMembersActiveEnum;
    userName?: string;
    ceoName?: string;
    userLevel?: MemberControllerGetMembersUserLevelEnum;
}

export interface MemberControllerGetResetPasswordRequest {
    recoveryKey: string;
}

export interface MemberControllerRegisterCustomerRequest {
    registerCustomerInput: RegisterCustomerInput;
}

export interface MemberControllerRegisterMemberRequest {
    registerMemberInput: RegisterMemberInput;
}

export interface MemberControllerResetPasswordRequest {
    recoveryKey: string;
    resetPasswordInput: ResetPasswordInput;
}

export interface MemberControllerResetPasswordWithIdEmailRequest {
    memberId: number;
}

export interface MemberControllerSaveUserRoleGroupRequest {
    userId: number;
    roleGroupCode: string;
}

export interface MemberControllerUpdateMemberRequest {
    userId: number;
    updateMemberInput: UpdateMemberInput;
}

export interface MobileAppControllerGetAppVersionsRequest {
    page: number;
    limit: number;
    route?: string;
    active?: MobileAppControllerGetAppVersionsActiveEnum;
    osType?: OsType;
}

export interface MobileAppControllerGetJangbuMessageRequest {
    jangbuId: number;
    messageId: number;
}

export interface MobileAppControllerGetJangbuMessagesRequest {
    jangbuId: number;
    page: number;
    limit: number;
    startAt: number;
    endAt: number;
    route?: string;
}

export interface MobileAppControllerGetUsingAppUsersRequest {
    page: number;
    limit: number;
    route?: string;
    active?: MobileAppControllerGetUsingAppUsersActiveEnum;
    osType?: OsType;
}

export interface MobileAppControllerRegisterAppVersionRequest {
    registerAppVersionInput: RegisterAppVersionInput;
}

export interface MobileAppControllerUpdateAppVersionRequest {
    versionId: number;
    updateAppVersionInput: UpdateAppVersionInput;
}

export interface NoticeControllerDeleteNoticeRequest {
    noticeId: number;
}

export interface NoticeControllerGetNoticeRequest {
    noticeId: number;
}

export interface NoticeControllerGetNoticesRequest {
    page: number;
    limit: number;
    route?: string;
}

export interface NoticeControllerRegisterNoticeRequest {
    registerNoticeInput: RegisterNoticeInput;
}

export interface NoticeControllerUpdateNoticeRequest {
    noticeId: number;
    registerNoticeInput: RegisterNoticeInput;
}

export interface RoleControllerGetRolesRequest {
    page: number;
    limit: number;
    route?: string;
    userLevel?: RoleControllerGetRolesUserLevelEnum;
    active?: RoleControllerGetRolesActiveEnum;
}

export interface RoleControllerRegisterRoleRequest {
    createRoleGroupInput: CreateRoleGroupInput;
}

export interface RoleControllerUpdateRoleRequest {
    roleGroupCode: string;
    updateRoleGroupInput: UpdateRoleGroupInput;
}

export interface ScrapingCodeControllerActivateScrapingCodeRequest {
    serviceId: number;
    version: string;
}

export interface ScrapingCodeControllerGetScrapingCodesRequest {
    page: number;
    limit: number;
    route?: string;
    serviceId?: number;
    active?: ScrapingCodeControllerGetScrapingCodesActiveEnum;
}

export interface ScrapingCodeControllerRegisterScrapingCodeVersionRequest {
    registerScrapingCodeVersionInput: RegisterScrapingCodeVersionInput;
}

export interface ServiceControllerGetServiceRequest {
    serviceId: number;
}

export interface ServiceControllerGetServicesRequest {
    page: number;
    limit: number;
    route?: string;
    category?: ServiceControllerGetServicesCategoryEnum;
    jangbuId?: number;
}

export interface ServiceControllerRegisterServiceRequest {
    registerServiceInput: RegisterServiceInput;
}

export interface ServiceControllerUpdateServiceRequest {
    serviceId: number;
    updateServiceInput: UpdateServiceInput;
}

export interface WorkControllerGetWorkRequest {
    jangbuId: number;
    userId: number;
    workId: number;
}

export interface WorkControllerGetWorkS3DataRequest {
    path: string;
}

export interface WorkControllerGetWorkS3DetailLogRequest {
    workId: number;
}

export interface WorkControllerGetWorksRequest {
    page: number;
    limit: number;
    startAt: number;
    endAt: number;
    route?: string;
    serviceId?: number;
    status?: ProcessFlag;
    type?: WorkRequestType;
    loginId?: string;
    userName?: string;
    jangbuName?: string;
    memo?: string;
    count?: number;
}

export interface WorkControllerGetWorksByJangbuRequest {
    jangbuId: number;
    page: number;
    limit: number;
    startAt: number;
    endAt: number;
    route?: string;
    serviceId?: number;
    status?: ProcessFlag;
    type?: WorkRequestType;
    loginId?: string;
    userName?: string;
    memo?: string;
    count?: number;
}

export interface WorkControllerGetWorksByUserRequest {
    userId: number;
    jangbuId: number;
    page: number;
    limit: number;
    startAt: number;
    endAt: number;
    route?: string;
    status?: ProcessFlag;
    memo?: string;
    count?: number;
}

export interface WorkControllerUpdateWorkRequest {
    jangbuId: number;
    userId: number;
    workId: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * (해당연월) 장부사의 파트너쉽 금액을 조회한다.
     * (해당연월) 장부사의 파트너쉽 금액 조회
     */
    async adjustControllerGetChargeJangbuPartnershipRaw(requestParameters: AdjustControllerGetChargeJangbuPartnershipRequest): Promise<runtime.ApiResponse<ChargeJangbuPartnership>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerGetChargeJangbuPartnership.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerGetChargeJangbuPartnership.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/partnership`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChargeJangbuPartnershipFromJSON(jsonValue));
    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액을 조회한다.
     * (해당연월) 장부사의 파트너쉽 금액 조회
     */
    async adjustControllerGetChargeJangbuPartnership(requestParameters: AdjustControllerGetChargeJangbuPartnershipRequest): Promise<ChargeJangbuPartnership> {
        const response = await this.adjustControllerGetChargeJangbuPartnershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * 해당연월의 장부사 정산내역 결과 미리보기
     */
    async adjustControllerGetChargeJangbuPreviewRaw(requestParameters: AdjustControllerGetChargeJangbuPreviewRequest): Promise<runtime.ApiResponse<GetChargeJangbuPreviewOutput>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerGetChargeJangbuPreview.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerGetChargeJangbuPreview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/preview`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChargeJangbuPreviewOutputFromJSON(jsonValue));
    }

    /**
     * 해당연월의 장부사 정산내역 결과 미리보기
     */
    async adjustControllerGetChargeJangbuPreview(requestParameters: AdjustControllerGetChargeJangbuPreviewRequest): Promise<GetChargeJangbuPreviewOutput> {
        const response = await this.adjustControllerGetChargeJangbuPreviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * 정산을 등록한다 (1,2 단계 순차적으로 진행)
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     */
    async adjustControllerRegisterAdjustRaw(requestParameters: AdjustControllerRegisterAdjustRequest): Promise<runtime.ApiResponse<RegisterAdjustOutput>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerRegisterAdjust.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerRegisterAdjust.');
        }

        if (requestParameters.step === null || requestParameters.step === undefined) {
            throw new runtime.RequiredError('step','Required parameter requestParameters.step was null or undefined when calling adjustControllerRegisterAdjust.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/step/{step}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))).replace(`{${"step"}}`, encodeURIComponent(String(requestParameters.step))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterAdjustOutputFromJSON(jsonValue));
    }

    /**
     * 정산을 등록한다 (1,2 단계 순차적으로 진행)
     * 정산 등록 (관리자 전용: 극히 일부사용자만)
     */
    async adjustControllerRegisterAdjust(requestParameters: AdjustControllerRegisterAdjustRequest): Promise<RegisterAdjustOutput> {
        const response = await this.adjustControllerRegisterAdjustRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 장부사의 특정연월에 해당하는 서비스별 단가를 검색한다
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     */
    async adjustControllerSearchAdjustJangbuServicesRaw(requestParameters: AdjustControllerSearchAdjustJangbuServicesRequest): Promise<runtime.ApiResponse<SearchAdjustJangbuServicesOutput>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerSearchAdjustJangbuServices.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerSearchAdjustJangbuServices.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling adjustControllerSearchAdjustJangbuServices.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling adjustControllerSearchAdjustJangbuServices.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchAdjustJangbuServicesOutputFromJSON(jsonValue));
    }

    /**
     * 특정 장부사의 특정연월에 해당하는 서비스별 단가를 검색한다
     * 장부사 서비스별 단가 검색 (장부사,관리자 전용)
     */
    async adjustControllerSearchAdjustJangbuServices(requestParameters: AdjustControllerSearchAdjustJangbuServicesRequest): Promise<SearchAdjustJangbuServicesOutput> {
        const response = await this.adjustControllerSearchAdjustJangbuServicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * (특정 장부사의) 특정 정산목록을 검색한다
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     */
    async adjustControllerSearchChargeJangbuFromJangbuRaw(requestParameters: AdjustControllerSearchChargeJangbuFromJangbuRequest): Promise<runtime.ApiResponse<SearchChargeJangbusOutput>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerSearchChargeJangbuFromJangbu.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling adjustControllerSearchChargeJangbuFromJangbu.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling adjustControllerSearchChargeJangbuFromJangbu.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.yearMonth !== undefined) {
            queryParameters['yearMonth'] = requestParameters.yearMonth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchChargeJangbusOutputFromJSON(jsonValue));
    }

    /**
     * (특정 장부사의) 특정 정산목록을 검색한다
     * (특정 장부사의) 정산목록 검색 (장부사 전용)
     */
    async adjustControllerSearchChargeJangbuFromJangbu(requestParameters: AdjustControllerSearchChargeJangbuFromJangbuRequest): Promise<SearchChargeJangbusOutput> {
        const response = await this.adjustControllerSearchChargeJangbuFromJangbuRaw(requestParameters);
        return await response.value();
    }

    /**
     * 장부사 특정 서비스 회원별 요금목록을 검색한다
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     */
    async adjustControllerSearchChargeJangbuUserServicesRaw(requestParameters: AdjustControllerSearchChargeJangbuUserServicesRequest): Promise<runtime.ApiResponse<SearchChargeJangbuUserServicesOutput>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerSearchChargeJangbuUserServices.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerSearchChargeJangbuUserServices.');
        }

        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling adjustControllerSearchChargeJangbuUserServices.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling adjustControllerSearchChargeJangbuUserServices.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling adjustControllerSearchChargeJangbuUserServices.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/service/{serviceId}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))).replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchChargeJangbuUserServicesOutputFromJSON(jsonValue));
    }

    /**
     * 장부사 특정 서비스 회원별 요금목록을 검색한다
     * 장부사 특정 서비스 회원별 요금목록 검색 (장부사,관리자 전용)
     */
    async adjustControllerSearchChargeJangbuUserServices(requestParameters: AdjustControllerSearchChargeJangbuUserServicesRequest): Promise<SearchChargeJangbuUserServicesOutput> {
        const response = await this.adjustControllerSearchChargeJangbuUserServicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * 정산내역 목록을 검색한다
     * 정산내역 목록 검색 (관리자 전용)
     */
    async adjustControllerSearchChargeJangbusRaw(requestParameters: AdjustControllerSearchChargeJangbusRequest): Promise<runtime.ApiResponse<SearchChargeJangbusOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling adjustControllerSearchChargeJangbus.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling adjustControllerSearchChargeJangbus.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.jangbuId !== undefined) {
            queryParameters['jangbuId'] = requestParameters.jangbuId;
        }

        if (requestParameters.yearMonth !== undefined) {
            queryParameters['yearMonth'] = requestParameters.yearMonth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchChargeJangbusOutputFromJSON(jsonValue));
    }

    /**
     * 정산내역 목록을 검색한다
     * 정산내역 목록 검색 (관리자 전용)
     */
    async adjustControllerSearchChargeJangbus(requestParameters: AdjustControllerSearchChargeJangbusRequest): Promise<SearchChargeJangbusOutput> {
        const response = await this.adjustControllerSearchChargeJangbusRaw(requestParameters);
        return await response.value();
    }

    /**
     * 해당연월의 정산내역 결과 테스트 메일 전송
     */
    async adjustControllerSendChargeJangbuMailTestRaw(requestParameters: AdjustControllerSendChargeJangbuMailTestRequest): Promise<runtime.ApiResponse<SendChargeJangbuMailTestOutput>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerSendChargeJangbuMailTest.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerSendChargeJangbuMailTest.');
        }

        if (requestParameters.sendChagreJangbuMailTestInput === null || requestParameters.sendChagreJangbuMailTestInput === undefined) {
            throw new runtime.RequiredError('sendChagreJangbuMailTestInput','Required parameter requestParameters.sendChagreJangbuMailTestInput was null or undefined when calling adjustControllerSendChargeJangbuMailTest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/testmail`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendChagreJangbuMailTestInputToJSON(requestParameters.sendChagreJangbuMailTestInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SendChargeJangbuMailTestOutputFromJSON(jsonValue));
    }

    /**
     * 해당연월의 정산내역 결과 테스트 메일 전송
     */
    async adjustControllerSendChargeJangbuMailTest(requestParameters: AdjustControllerSendChargeJangbuMailTestRequest): Promise<SendChargeJangbuMailTestOutput> {
        const response = await this.adjustControllerSendChargeJangbuMailTestRaw(requestParameters);
        return await response.value();
    }

    /**
     * (해당연월) 장부사 특정 서비스 단가를 수정한다.
     * (해당연월) 장부사 특정 서비스 단가를 수정
     */
    async adjustControllerUpdateAdjustJangbuServiceRaw(requestParameters: AdjustControllerUpdateAdjustJangbuServiceRequest): Promise<runtime.ApiResponse<AdjustJangbuService>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerUpdateAdjustJangbuService.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerUpdateAdjustJangbuService.');
        }

        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling adjustControllerUpdateAdjustJangbuService.');
        }

        if (requestParameters.updateAdjustJangbuServiceInput === null || requestParameters.updateAdjustJangbuServiceInput === undefined) {
            throw new runtime.RequiredError('updateAdjustJangbuServiceInput','Required parameter requestParameters.updateAdjustJangbuServiceInput was null or undefined when calling adjustControllerUpdateAdjustJangbuService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/service/{serviceId}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))).replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAdjustJangbuServiceInputToJSON(requestParameters.updateAdjustJangbuServiceInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustJangbuServiceFromJSON(jsonValue));
    }

    /**
     * (해당연월) 장부사 특정 서비스 단가를 수정한다.
     * (해당연월) 장부사 특정 서비스 단가를 수정
     */
    async adjustControllerUpdateAdjustJangbuService(requestParameters: AdjustControllerUpdateAdjustJangbuServiceRequest): Promise<AdjustJangbuService> {
        const response = await this.adjustControllerUpdateAdjustJangbuServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * 정산내역의 수납여부를 업데이트 한다
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     */
    async adjustControllerUpdateChargeJangbuPaidRaw(requestParameters: AdjustControllerUpdateChargeJangbuPaidRequest): Promise<runtime.ApiResponse<ChargeJangbu>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerUpdateChargeJangbuPaid.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerUpdateChargeJangbuPaid.');
        }

        if (requestParameters.updateChargeJangbuPaidInput === null || requestParameters.updateChargeJangbuPaidInput === undefined) {
            throw new runtime.RequiredError('updateChargeJangbuPaidInput','Required parameter requestParameters.updateChargeJangbuPaidInput was null or undefined when calling adjustControllerUpdateChargeJangbuPaid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/paid`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChargeJangbuPaidInputToJSON(requestParameters.updateChargeJangbuPaidInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChargeJangbuFromJSON(jsonValue));
    }

    /**
     * 정산내역의 수납여부를 업데이트 한다
     * 정산내역 수납여부 업데이트 (관리자 전용: 극히 일부사용자만)
     */
    async adjustControllerUpdateChargeJangbuPaid(requestParameters: AdjustControllerUpdateChargeJangbuPaidRequest): Promise<ChargeJangbu> {
        const response = await this.adjustControllerUpdateChargeJangbuPaidRaw(requestParameters);
        return await response.value();
    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액을 수정한다.
     * (해당연월) 장부사의 파트너쉽 금액 수정
     */
    async adjustControllerUpdateChargeJangbuPartnershipRaw(requestParameters: AdjustControllerUpdateChargeJangbuPartnershipRequest): Promise<runtime.ApiResponse<ChargeJangbuPartnership>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerUpdateChargeJangbuPartnership.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerUpdateChargeJangbuPartnership.');
        }

        if (requestParameters.updateChargeJangbuPartnershipInput === null || requestParameters.updateChargeJangbuPartnershipInput === undefined) {
            throw new runtime.RequiredError('updateChargeJangbuPartnershipInput','Required parameter requestParameters.updateChargeJangbuPartnershipInput was null or undefined when calling adjustControllerUpdateChargeJangbuPartnership.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/partnership`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChargeJangbuPartnershipInputToJSON(requestParameters.updateChargeJangbuPartnershipInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChargeJangbuPartnershipFromJSON(jsonValue));
    }

    /**
     * (해당연월) 장부사의 파트너쉽 금액을 수정한다.
     * (해당연월) 장부사의 파트너쉽 금액 수정
     */
    async adjustControllerUpdateChargeJangbuPartnership(requestParameters: AdjustControllerUpdateChargeJangbuPartnershipRequest): Promise<ChargeJangbuPartnership> {
        const response = await this.adjustControllerUpdateChargeJangbuPartnershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * 정산내역의 비공개 → 공개 상태값을 업데이트 및 정산내역의 메일을 발송한다
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     */
    async adjustControllerUpdateChargeJangbuStatusRaw(requestParameters: AdjustControllerUpdateChargeJangbuStatusRequest): Promise<runtime.ApiResponse<ChargeJangbu>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling adjustControllerUpdateChargeJangbuStatus.');
        }

        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling adjustControllerUpdateChargeJangbuStatus.');
        }

        if (requestParameters.updateChargeJangbuStatusInput === null || requestParameters.updateChargeJangbuStatusInput === undefined) {
            throw new runtime.RequiredError('updateChargeJangbuStatusInput','Required parameter requestParameters.updateChargeJangbuStatusInput was null or undefined when calling adjustControllerUpdateChargeJangbuStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/adjust/jangbu/{jangbuId}/yearMonth/{yearMonth}/status`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChargeJangbuStatusInputToJSON(requestParameters.updateChargeJangbuStatusInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChargeJangbuFromJSON(jsonValue));
    }

    /**
     * 정산내역의 비공개 → 공개 상태값을 업데이트 및 정산내역의 메일을 발송한다
     * 정산내역 비공개 → 공개 상태값 업데이트 및 정산내역 메일 발송 (관리자 전용: 극히 일부사용자만)
     */
    async adjustControllerUpdateChargeJangbuStatus(requestParameters: AdjustControllerUpdateChargeJangbuStatusRequest): Promise<ChargeJangbu> {
        const response = await this.adjustControllerUpdateChargeJangbuStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * 토큰을 삭제한다 (로그아웃시)
     * 로그아웃 (토큰삭제)
     */
    async authControllerDeleteTokenRaw(requestParameters: AuthControllerDeleteTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.refreshToken === null || requestParameters.refreshToken === undefined) {
            throw new runtime.RequiredError('refreshToken','Required parameter requestParameters.refreshToken was null or undefined when calling authControllerDeleteToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/api/auth/{refreshToken}`.replace(`{${"refreshToken"}}`, encodeURIComponent(String(requestParameters.refreshToken))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 토큰을 삭제한다 (로그아웃시)
     * 로그아웃 (토큰삭제)
     */
    async authControllerDeleteToken(requestParameters: AuthControllerDeleteTokenRequest): Promise<void> {
        await this.authControllerDeleteTokenRaw(requestParameters);
    }

    /**
     * 새로운 토큰을 발급한다
     * 토큰발급
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest): Promise<runtime.ApiResponse<LoginOutput>> {
        if (requestParameters.loginInput === null || requestParameters.loginInput === undefined) {
            throw new runtime.RequiredError('loginInput','Required parameter requestParameters.loginInput was null or undefined when calling authControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public/api/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputToJSON(requestParameters.loginInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginOutputFromJSON(jsonValue));
    }

    /**
     * 새로운 토큰을 발급한다
     * 토큰발급
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest): Promise<LoginOutput> {
        const response = await this.authControllerLoginRaw(requestParameters);
        return await response.value();
    }

    /**
     * 토큰을 갱신한다
     * 토큰갱신
     */
    async authControllerRefreshRaw(requestParameters: AuthControllerRefreshRequest): Promise<runtime.ApiResponse<RefreshOutput>> {
        if (requestParameters.refreshInput === null || requestParameters.refreshInput === undefined) {
            throw new runtime.RequiredError('refreshInput','Required parameter requestParameters.refreshInput was null or undefined when calling authControllerRefresh.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public/api/auth`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshInputToJSON(requestParameters.refreshInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshOutputFromJSON(jsonValue));
    }

    /**
     * 토큰을 갱신한다
     * 토큰갱신
     */
    async authControllerRefresh(requestParameters: AuthControllerRefreshRequest): Promise<RefreshOutput> {
        const response = await this.authControllerRefreshRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 인증서를 조회한다
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     */
    async errorControllerGetCertRaw(requestParameters: ErrorControllerGetCertRequest): Promise<runtime.ApiResponse<GetCertOutput>> {
        if (requestParameters.errorId === null || requestParameters.errorId === undefined) {
            throw new runtime.RequiredError('errorId','Required parameter requestParameters.errorId was null or undefined when calling errorControllerGetCert.');
        }

        if (requestParameters.connectId === null || requestParameters.connectId === undefined) {
            throw new runtime.RequiredError('connectId','Required parameter requestParameters.connectId was null or undefined when calling errorControllerGetCert.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling errorControllerGetCert.');
        }

        const queryParameters: any = {};

        if (requestParameters.connectId !== undefined) {
            queryParameters['connectId'] = requestParameters.connectId;
        }

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/error/{errorId}/cert`.replace(`{${"errorId"}}`, encodeURIComponent(String(requestParameters.errorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCertOutputFromJSON(jsonValue));
    }

    /**
     * 특정 인증서를 조회한다
     * 인증서 조회 (관리자 전용: 극히 일부사용자만)
     */
    async errorControllerGetCert(requestParameters: ErrorControllerGetCertRequest): Promise<GetCertOutput> {
        const response = await this.errorControllerGetCertRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 에러를 조회한다
     * 에러 조회 (관리자 전용)
     */
    async errorControllerGetErrorRaw(requestParameters: ErrorControllerGetErrorRequest): Promise<runtime.ApiResponse<PcClientError>> {
        if (requestParameters.errorId === null || requestParameters.errorId === undefined) {
            throw new runtime.RequiredError('errorId','Required parameter requestParameters.errorId was null or undefined when calling errorControllerGetError.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/error/{errorId}`.replace(`{${"errorId"}}`, encodeURIComponent(String(requestParameters.errorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PcClientErrorFromJSON(jsonValue));
    }

    /**
     * 특정 에러를 조회한다
     * 에러 조회 (관리자 전용)
     */
    async errorControllerGetError(requestParameters: ErrorControllerGetErrorRequest): Promise<PcClientError> {
        const response = await this.errorControllerGetErrorRaw(requestParameters);
        return await response.value();
    }

    /**
     * 에러 목록을 검색한다
     * 에러 목록 검색 (관리자 전용)
     */
    async errorControllerGetErrorsRaw(requestParameters: ErrorControllerGetErrorsRequest): Promise<runtime.ApiResponse<GetErrorsResponse>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling errorControllerGetErrors.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling errorControllerGetErrors.');
        }

        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling errorControllerGetErrors.');
        }

        if (requestParameters.endAt === null || requestParameters.endAt === undefined) {
            throw new runtime.RequiredError('endAt','Required parameter requestParameters.endAt was null or undefined when calling errorControllerGetErrors.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.endAt !== undefined) {
            queryParameters['endAt'] = requestParameters.endAt;
        }

        if (requestParameters.appVersion !== undefined) {
            queryParameters['appVersion'] = requestParameters.appVersion;
        }

        if (requestParameters.appName !== undefined) {
            queryParameters['appName'] = requestParameters.appName;
        }

        if (requestParameters.jangbuName !== undefined) {
            queryParameters['jangbuName'] = requestParameters.jangbuName;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/error`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetErrorsResponseFromJSON(jsonValue));
    }

    /**
     * 에러 목록을 검색한다
     * 에러 목록 검색 (관리자 전용)
     */
    async errorControllerGetErrors(requestParameters: ErrorControllerGetErrorsRequest): Promise<GetErrorsResponse> {
        const response = await this.errorControllerGetErrorsRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 장부사를 조회한다
     * 장부사 조회 (관리자 전용)
     */
    async jangbuControllerGetJangbuRaw(requestParameters: JangbuControllerGetJangbuRequest): Promise<runtime.ApiResponse<Jangbu>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling jangbuControllerGetJangbu.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu/{jangbuId}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JangbuFromJSON(jsonValue));
    }

    /**
     * 특정 장부사를 조회한다
     * 장부사 조회 (관리자 전용)
     */
    async jangbuControllerGetJangbu(requestParameters: JangbuControllerGetJangbuRequest): Promise<Jangbu> {
        const response = await this.jangbuControllerGetJangbuRaw(requestParameters);
        return await response.value();
    }

    /**
     * 장부사 목록을 검색한다
     * 장부사 목록 검색 (관리자 전용)
     */
    async jangbuControllerGetJangbusRaw(requestParameters: JangbuControllerGetJangbusRequest): Promise<runtime.ApiResponse<GetJangbusOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling jangbuControllerGetJangbus.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling jangbuControllerGetJangbus.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.serviceIds) {
            queryParameters['serviceIds'] = requestParameters.serviceIds;
        }

        if (requestParameters.jangbuName !== undefined) {
            queryParameters['jangbuName'] = requestParameters.jangbuName;
        }

        if (requestParameters.repId !== undefined) {
            queryParameters['repId'] = requestParameters.repId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJangbusOutputFromJSON(jsonValue));
    }

    /**
     * 장부사 목록을 검색한다
     * 장부사 목록 검색 (관리자 전용)
     */
    async jangbuControllerGetJangbus(requestParameters: JangbuControllerGetJangbusRequest): Promise<GetJangbusOutput> {
        const response = await this.jangbuControllerGetJangbusRaw(requestParameters);
        return await response.value();
    }

    /**
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색한다
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     */
    async jangbuControllerGetJangbusWithChargeJangbuPartnershipRaw(requestParameters: JangbuControllerGetJangbusWithChargeJangbuPartnershipRequest): Promise<runtime.ApiResponse<GetJangbusOutput>> {
        if (requestParameters.yearMonth === null || requestParameters.yearMonth === undefined) {
            throw new runtime.RequiredError('yearMonth','Required parameter requestParameters.yearMonth was null or undefined when calling jangbuControllerGetJangbusWithChargeJangbuPartnership.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling jangbuControllerGetJangbusWithChargeJangbuPartnership.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling jangbuControllerGetJangbusWithChargeJangbuPartnership.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.serviceIds) {
            queryParameters['serviceIds'] = requestParameters.serviceIds;
        }

        if (requestParameters.jangbuName !== undefined) {
            queryParameters['jangbuName'] = requestParameters.jangbuName;
        }

        if (requestParameters.repId !== undefined) {
            queryParameters['repId'] = requestParameters.repId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu/yearMonth/{yearMonth}`.replace(`{${"yearMonth"}}`, encodeURIComponent(String(requestParameters.yearMonth))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJangbusOutputFromJSON(jsonValue));
    }

    /**
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색한다
     * (특정연월의 파트너쉽 단가정보와) 장부사 검색 (관리자 전용)
     */
    async jangbuControllerGetJangbusWithChargeJangbuPartnership(requestParameters: JangbuControllerGetJangbusWithChargeJangbuPartnershipRequest): Promise<GetJangbusOutput> {
        const response = await this.jangbuControllerGetJangbusWithChargeJangbuPartnershipRaw(requestParameters);
        return await response.value();
    }

    /**
     * 장부사를 등록한다
     * 장부사 등록 (관리자 전용)
     */
    async jangbuControllerRegisterJangbuRaw(requestParameters: JangbuControllerRegisterJangbuRequest): Promise<runtime.ApiResponse<Jangbu>> {
        if (requestParameters.registerJangbuInput === null || requestParameters.registerJangbuInput === undefined) {
            throw new runtime.RequiredError('registerJangbuInput','Required parameter requestParameters.registerJangbuInput was null or undefined when calling jangbuControllerRegisterJangbu.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterJangbuInputToJSON(requestParameters.registerJangbuInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JangbuFromJSON(jsonValue));
    }

    /**
     * 장부사를 등록한다
     * 장부사 등록 (관리자 전용)
     */
    async jangbuControllerRegisterJangbu(requestParameters: JangbuControllerRegisterJangbuRequest): Promise<Jangbu> {
        const response = await this.jangbuControllerRegisterJangbuRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 장부사를 수정한다
     * 장부사 수정 (관리자 전용)
     */
    async jangbuControllerUpdateJangbuRaw(requestParameters: JangbuControllerUpdateJangbuRequest): Promise<runtime.ApiResponse<Jangbu>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling jangbuControllerUpdateJangbu.');
        }

        if (requestParameters.updateJangbuInput === null || requestParameters.updateJangbuInput === undefined) {
            throw new runtime.RequiredError('updateJangbuInput','Required parameter requestParameters.updateJangbuInput was null or undefined when calling jangbuControllerUpdateJangbu.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu/{jangbuId}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateJangbuInputToJSON(requestParameters.updateJangbuInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JangbuFromJSON(jsonValue));
    }

    /**
     * 특정 장부사를 수정한다
     * 장부사 수정 (관리자 전용)
     */
    async jangbuControllerUpdateJangbu(requestParameters: JangbuControllerUpdateJangbuRequest): Promise<Jangbu> {
        const response = await this.jangbuControllerUpdateJangbuRaw(requestParameters);
        return await response.value();
    }

    /**
     * (로그인 계정의) 아이디 또는 패스워드를 찾는다
     * 아이디 찾기 또는 패스워드 찾기
     */
    async memberControllerFindMemberRaw(requestParameters: MemberControllerFindMemberRequest): Promise<runtime.ApiResponse<FindMemberOutput>> {
        if (requestParameters.findMemberInput === null || requestParameters.findMemberInput === undefined) {
            throw new runtime.RequiredError('findMemberInput','Required parameter requestParameters.findMemberInput was null or undefined when calling memberControllerFindMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public/api/member/find/account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FindMemberInputToJSON(requestParameters.findMemberInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FindMemberOutputFromJSON(jsonValue));
    }

    /**
     * (로그인 계정의) 아이디 또는 패스워드를 찾는다
     * 아이디 찾기 또는 패스워드 찾기
     */
    async memberControllerFindMember(requestParameters: MemberControllerFindMemberRequest): Promise<FindMemberOutput> {
        const response = await this.memberControllerFindMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 회원을 조회한다
     * 회원 조회
     */
    async memberControllerGetMemberRaw(requestParameters: MemberControllerGetMemberRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling memberControllerGetMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/member/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 특정 회원을 조회한다
     * 회원 조회
     */
    async memberControllerGetMember(requestParameters: MemberControllerGetMemberRequest): Promise<User> {
        const response = await this.memberControllerGetMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * 회원 목록을 검색한다
     * 회원 목록 검색
     */
    async memberControllerGetMembersRaw(requestParameters: MemberControllerGetMembersRequest): Promise<runtime.ApiResponse<GetMembersOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling memberControllerGetMembers.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling memberControllerGetMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.jangbuId !== undefined) {
            queryParameters['jangbuId'] = requestParameters.jangbuId;
        }

        if (requestParameters.serviceId !== undefined) {
            queryParameters['serviceId'] = requestParameters.serviceId;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        if (requestParameters.ceoName !== undefined) {
            queryParameters['ceoName'] = requestParameters.ceoName;
        }

        if (requestParameters.userLevel !== undefined) {
            queryParameters['userLevel'] = requestParameters.userLevel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/member`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMembersOutputFromJSON(jsonValue));
    }

    /**
     * 회원 목록을 검색한다
     * 회원 목록 검색
     */
    async memberControllerGetMembers(requestParameters: MemberControllerGetMembersRequest): Promise<GetMembersOutput> {
        const response = await this.memberControllerGetMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * 패스워드 재설정 정보를 조회한다
     * 패스워드 재설정 조회
     */
    async memberControllerGetResetPasswordRaw(requestParameters: MemberControllerGetResetPasswordRequest): Promise<runtime.ApiResponse<Recovery>> {
        if (requestParameters.recoveryKey === null || requestParameters.recoveryKey === undefined) {
            throw new runtime.RequiredError('recoveryKey','Required parameter requestParameters.recoveryKey was null or undefined when calling memberControllerGetResetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/api/member/recover/{recoveryKey}`.replace(`{${"recoveryKey"}}`, encodeURIComponent(String(requestParameters.recoveryKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecoveryFromJSON(jsonValue));
    }

    /**
     * 패스워드 재설정 정보를 조회한다
     * 패스워드 재설정 조회
     */
    async memberControllerGetResetPassword(requestParameters: MemberControllerGetResetPasswordRequest): Promise<Recovery> {
        const response = await this.memberControllerGetResetPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * (고객사) 계정을 등록한다
     * (고객사) 계정 등록
     */
    async memberControllerRegisterCustomerRaw(requestParameters: MemberControllerRegisterCustomerRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.registerCustomerInput === null || requestParameters.registerCustomerInput === undefined) {
            throw new runtime.RequiredError('registerCustomerInput','Required parameter requestParameters.registerCustomerInput was null or undefined when calling memberControllerRegisterCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/member/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterCustomerInputToJSON(requestParameters.registerCustomerInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * (고객사) 계정을 등록한다
     * (고객사) 계정 등록
     */
    async memberControllerRegisterCustomer(requestParameters: MemberControllerRegisterCustomerRequest): Promise<User> {
        const response = await this.memberControllerRegisterCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * (관리자 또는 장부사) 계정을 등록한다 (관라지만 이용)
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     */
    async memberControllerRegisterMemberRaw(requestParameters: MemberControllerRegisterMemberRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.registerMemberInput === null || requestParameters.registerMemberInput === undefined) {
            throw new runtime.RequiredError('registerMemberInput','Required parameter requestParameters.registerMemberInput was null or undefined when calling memberControllerRegisterMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/member`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterMemberInputToJSON(requestParameters.registerMemberInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * (관리자 또는 장부사) 계정을 등록한다 (관라지만 이용)
     * (관리자 또는 장부사) 계정 등록 (관라지만 이용)
     */
    async memberControllerRegisterMember(requestParameters: MemberControllerRegisterMemberRequest): Promise<User> {
        const response = await this.memberControllerRegisterMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * (계정찾기진행시) 패스워드 재설정 정보를 처리한다
     * (계정찾기진행시) 패스워드 재설정 처리
     */
    async memberControllerResetPasswordRaw(requestParameters: MemberControllerResetPasswordRequest): Promise<runtime.ApiResponse<ResetPasswordOutput>> {
        if (requestParameters.recoveryKey === null || requestParameters.recoveryKey === undefined) {
            throw new runtime.RequiredError('recoveryKey','Required parameter requestParameters.recoveryKey was null or undefined when calling memberControllerResetPassword.');
        }

        if (requestParameters.resetPasswordInput === null || requestParameters.resetPasswordInput === undefined) {
            throw new runtime.RequiredError('resetPasswordInput','Required parameter requestParameters.resetPasswordInput was null or undefined when calling memberControllerResetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public/api/member/recover/{recoveryKey}`.replace(`{${"recoveryKey"}}`, encodeURIComponent(String(requestParameters.recoveryKey))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordInputToJSON(requestParameters.resetPasswordInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetPasswordOutputFromJSON(jsonValue));
    }

    /**
     * (계정찾기진행시) 패스워드 재설정 정보를 처리한다
     * (계정찾기진행시) 패스워드 재설정 처리
     */
    async memberControllerResetPassword(requestParameters: MemberControllerResetPasswordRequest): Promise<ResetPasswordOutput> {
        const response = await this.memberControllerResetPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * 아이디+이메일 조합으로 패스워드를 초기화한다
     * 로그인 패스워드 초기화
     */
    async memberControllerResetPasswordWithIdEmailRaw(requestParameters: MemberControllerResetPasswordWithIdEmailRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling memberControllerResetPasswordWithIdEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/member/{memberId}/reset`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 아이디+이메일 조합으로 패스워드를 초기화한다
     * 로그인 패스워드 초기화
     */
    async memberControllerResetPasswordWithIdEmail(requestParameters: MemberControllerResetPasswordWithIdEmailRequest): Promise<User> {
        const response = await this.memberControllerResetPasswordWithIdEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 계정의 권한그룹을 저장한다
     * 계정의 권한그룹 저장
     */
    async memberControllerSaveUserRoleGroupRaw(requestParameters: MemberControllerSaveUserRoleGroupRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling memberControllerSaveUserRoleGroup.');
        }

        if (requestParameters.roleGroupCode === null || requestParameters.roleGroupCode === undefined) {
            throw new runtime.RequiredError('roleGroupCode','Required parameter requestParameters.roleGroupCode was null or undefined when calling memberControllerSaveUserRoleGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/member/{userId}/role/{roleGroupCode}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleGroupCode"}}`, encodeURIComponent(String(requestParameters.roleGroupCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 특정 계정의 권한그룹을 저장한다
     * 계정의 권한그룹 저장
     */
    async memberControllerSaveUserRoleGroup(requestParameters: MemberControllerSaveUserRoleGroupRequest): Promise<User> {
        const response = await this.memberControllerSaveUserRoleGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * 계정을 수정한다
     * 계정 수정
     */
    async memberControllerUpdateMemberRaw(requestParameters: MemberControllerUpdateMemberRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling memberControllerUpdateMember.');
        }

        if (requestParameters.updateMemberInput === null || requestParameters.updateMemberInput === undefined) {
            throw new runtime.RequiredError('updateMemberInput','Required parameter requestParameters.updateMemberInput was null or undefined when calling memberControllerUpdateMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/member/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberInputToJSON(requestParameters.updateMemberInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 계정을 수정한다
     * 계정 수정
     */
    async memberControllerUpdateMember(requestParameters: MemberControllerUpdateMemberRequest): Promise<User> {
        const response = await this.memberControllerUpdateMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * 앱 버전 목록을 검색한다
     * 앱 버전 목록 검색 (관리자 전용)
     */
    async mobileAppControllerGetAppVersionsRaw(requestParameters: MobileAppControllerGetAppVersionsRequest): Promise<runtime.ApiResponse<GetAppVersionsOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling mobileAppControllerGetAppVersions.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling mobileAppControllerGetAppVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.osType !== undefined) {
            queryParameters['osType'] = requestParameters.osType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/app/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAppVersionsOutputFromJSON(jsonValue));
    }

    /**
     * 앱 버전 목록을 검색한다
     * 앱 버전 목록 검색 (관리자 전용)
     */
    async mobileAppControllerGetAppVersions(requestParameters: MobileAppControllerGetAppVersionsRequest): Promise<GetAppVersionsOutput> {
        const response = await this.mobileAppControllerGetAppVersionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * (특정 장부사의) 특정 메시지를 조회한다
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     */
    async mobileAppControllerGetJangbuMessageRaw(requestParameters: MobileAppControllerGetJangbuMessageRequest): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling mobileAppControllerGetJangbuMessage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling mobileAppControllerGetJangbuMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/app/jangbu/{jangbuId}/message/{messageId}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * (특정 장부사의) 특정 메시지를 조회한다
     * (특정 장부사의) 메시지 조회 (관리자, 장부사 전용)
     */
    async mobileAppControllerGetJangbuMessage(requestParameters: MobileAppControllerGetJangbuMessageRequest): Promise<Message> {
        const response = await this.mobileAppControllerGetJangbuMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * (특정 장부사의) 메시지 목록을 검색한다
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     */
    async mobileAppControllerGetJangbuMessagesRaw(requestParameters: MobileAppControllerGetJangbuMessagesRequest): Promise<runtime.ApiResponse<GetJangbuMessagesOutput>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling mobileAppControllerGetJangbuMessages.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling mobileAppControllerGetJangbuMessages.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling mobileAppControllerGetJangbuMessages.');
        }

        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling mobileAppControllerGetJangbuMessages.');
        }

        if (requestParameters.endAt === null || requestParameters.endAt === undefined) {
            throw new runtime.RequiredError('endAt','Required parameter requestParameters.endAt was null or undefined when calling mobileAppControllerGetJangbuMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.endAt !== undefined) {
            queryParameters['endAt'] = requestParameters.endAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/app/jangbu/{jangbuId}/message`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJangbuMessagesOutputFromJSON(jsonValue));
    }

    /**
     * (특정 장부사의) 메시지 목록을 검색한다
     * (특정 장부사의) 메시지 목록 검색 (관리자, 장부사 전용)
     */
    async mobileAppControllerGetJangbuMessages(requestParameters: MobileAppControllerGetJangbuMessagesRequest): Promise<GetJangbuMessagesOutput> {
        const response = await this.mobileAppControllerGetJangbuMessagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * 앱 사용자 목록을 검색한다
     * 앱 사용자 목록 검색 (관리자 전용)
     */
    async mobileAppControllerGetUsingAppUsersRaw(requestParameters: MobileAppControllerGetUsingAppUsersRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling mobileAppControllerGetUsingAppUsers.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling mobileAppControllerGetUsingAppUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.osType !== undefined) {
            queryParameters['osType'] = requestParameters.osType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/app/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 앱 사용자 목록을 검색한다
     * 앱 사용자 목록 검색 (관리자 전용)
     */
    async mobileAppControllerGetUsingAppUsers(requestParameters: MobileAppControllerGetUsingAppUsersRequest): Promise<object> {
        const response = await this.mobileAppControllerGetUsingAppUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * 앱 버전을 등록한다
     * 앱 버전 등록 (관리자 전용)
     */
    async mobileAppControllerRegisterAppVersionRaw(requestParameters: MobileAppControllerRegisterAppVersionRequest): Promise<runtime.ApiResponse<AppVersion>> {
        if (requestParameters.registerAppVersionInput === null || requestParameters.registerAppVersionInput === undefined) {
            throw new runtime.RequiredError('registerAppVersionInput','Required parameter requestParameters.registerAppVersionInput was null or undefined when calling mobileAppControllerRegisterAppVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/app/version`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterAppVersionInputToJSON(requestParameters.registerAppVersionInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AppVersionFromJSON(jsonValue));
    }

    /**
     * 앱 버전을 등록한다
     * 앱 버전 등록 (관리자 전용)
     */
    async mobileAppControllerRegisterAppVersion(requestParameters: MobileAppControllerRegisterAppVersionRequest): Promise<AppVersion> {
        const response = await this.mobileAppControllerRegisterAppVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * 앱 버전을 수정한다
     * 앱 버전 수정 (관리자 전용)
     */
    async mobileAppControllerUpdateAppVersionRaw(requestParameters: MobileAppControllerUpdateAppVersionRequest): Promise<runtime.ApiResponse<AppVersion>> {
        if (requestParameters.versionId === null || requestParameters.versionId === undefined) {
            throw new runtime.RequiredError('versionId','Required parameter requestParameters.versionId was null or undefined when calling mobileAppControllerUpdateAppVersion.');
        }

        if (requestParameters.updateAppVersionInput === null || requestParameters.updateAppVersionInput === undefined) {
            throw new runtime.RequiredError('updateAppVersionInput','Required parameter requestParameters.updateAppVersionInput was null or undefined when calling mobileAppControllerUpdateAppVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/app/version/{versionId}`.replace(`{${"versionId"}}`, encodeURIComponent(String(requestParameters.versionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAppVersionInputToJSON(requestParameters.updateAppVersionInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AppVersionFromJSON(jsonValue));
    }

    /**
     * 앱 버전을 수정한다
     * 앱 버전 수정 (관리자 전용)
     */
    async mobileAppControllerUpdateAppVersion(requestParameters: MobileAppControllerUpdateAppVersionRequest): Promise<AppVersion> {
        const response = await this.mobileAppControllerUpdateAppVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * 공지사항을 삭제한다
     * 공지사항 삭제 (관리자 전용)
     */
    async noticeControllerDeleteNoticeRaw(requestParameters: NoticeControllerDeleteNoticeRequest): Promise<runtime.ApiResponse<Notice>> {
        if (requestParameters.noticeId === null || requestParameters.noticeId === undefined) {
            throw new runtime.RequiredError('noticeId','Required parameter requestParameters.noticeId was null or undefined when calling noticeControllerDeleteNotice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/notice/{noticeId}`.replace(`{${"noticeId"}}`, encodeURIComponent(String(requestParameters.noticeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeFromJSON(jsonValue));
    }

    /**
     * 공지사항을 삭제한다
     * 공지사항 삭제 (관리자 전용)
     */
    async noticeControllerDeleteNotice(requestParameters: NoticeControllerDeleteNoticeRequest): Promise<Notice> {
        const response = await this.noticeControllerDeleteNoticeRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 공지사항을 조회한다
     * 공지사항 조회 (관리자, 장부사 전용)
     */
    async noticeControllerGetNoticeRaw(requestParameters: NoticeControllerGetNoticeRequest): Promise<runtime.ApiResponse<Notice>> {
        if (requestParameters.noticeId === null || requestParameters.noticeId === undefined) {
            throw new runtime.RequiredError('noticeId','Required parameter requestParameters.noticeId was null or undefined when calling noticeControllerGetNotice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/notice/{noticeId}`.replace(`{${"noticeId"}}`, encodeURIComponent(String(requestParameters.noticeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeFromJSON(jsonValue));
    }

    /**
     * 특정 공지사항을 조회한다
     * 공지사항 조회 (관리자, 장부사 전용)
     */
    async noticeControllerGetNotice(requestParameters: NoticeControllerGetNoticeRequest): Promise<Notice> {
        const response = await this.noticeControllerGetNoticeRaw(requestParameters);
        return await response.value();
    }

    /**
     * 공지사항 목록을 검색한다
     * 공지사항 검색 (관리자, 장부사 전용)
     */
    async noticeControllerGetNoticesRaw(requestParameters: NoticeControllerGetNoticesRequest): Promise<runtime.ApiResponse<GetNotices>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling noticeControllerGetNotices.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling noticeControllerGetNotices.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/notice`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNoticesFromJSON(jsonValue));
    }

    /**
     * 공지사항 목록을 검색한다
     * 공지사항 검색 (관리자, 장부사 전용)
     */
    async noticeControllerGetNotices(requestParameters: NoticeControllerGetNoticesRequest): Promise<GetNotices> {
        const response = await this.noticeControllerGetNoticesRaw(requestParameters);
        return await response.value();
    }

    /**
     * 공지사항을 등록한다
     * 공지사항 등록 (관리자 전용)
     */
    async noticeControllerRegisterNoticeRaw(requestParameters: NoticeControllerRegisterNoticeRequest): Promise<runtime.ApiResponse<Notice>> {
        if (requestParameters.registerNoticeInput === null || requestParameters.registerNoticeInput === undefined) {
            throw new runtime.RequiredError('registerNoticeInput','Required parameter requestParameters.registerNoticeInput was null or undefined when calling noticeControllerRegisterNotice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/notice`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterNoticeInputToJSON(requestParameters.registerNoticeInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeFromJSON(jsonValue));
    }

    /**
     * 공지사항을 등록한다
     * 공지사항 등록 (관리자 전용)
     */
    async noticeControllerRegisterNotice(requestParameters: NoticeControllerRegisterNoticeRequest): Promise<Notice> {
        const response = await this.noticeControllerRegisterNoticeRaw(requestParameters);
        return await response.value();
    }

    /**
     * 공지사항을 수정한다
     * 공지사항 수정 (관리자 전용)
     */
    async noticeControllerUpdateNoticeRaw(requestParameters: NoticeControllerUpdateNoticeRequest): Promise<runtime.ApiResponse<Notice>> {
        if (requestParameters.noticeId === null || requestParameters.noticeId === undefined) {
            throw new runtime.RequiredError('noticeId','Required parameter requestParameters.noticeId was null or undefined when calling noticeControllerUpdateNotice.');
        }

        if (requestParameters.registerNoticeInput === null || requestParameters.registerNoticeInput === undefined) {
            throw new runtime.RequiredError('registerNoticeInput','Required parameter requestParameters.registerNoticeInput was null or undefined when calling noticeControllerUpdateNotice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/notice/{noticeId}`.replace(`{${"noticeId"}}`, encodeURIComponent(String(requestParameters.noticeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterNoticeInputToJSON(requestParameters.registerNoticeInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoticeFromJSON(jsonValue));
    }

    /**
     * 공지사항을 수정한다
     * 공지사항 수정 (관리자 전용)
     */
    async noticeControllerUpdateNotice(requestParameters: NoticeControllerUpdateNoticeRequest): Promise<Notice> {
        const response = await this.noticeControllerUpdateNoticeRaw(requestParameters);
        return await response.value();
    }

    /**
     * 권한 목록을 검색한다
     * 권한 목록 검색 (관리자, 장부사 전용)
     */
    async roleControllerGetRolesRaw(requestParameters: RoleControllerGetRolesRequest): Promise<runtime.ApiResponse<SearchRoleGroupOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling roleControllerGetRoles.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling roleControllerGetRoles.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.userLevel !== undefined) {
            queryParameters['userLevel'] = requestParameters.userLevel;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/role`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchRoleGroupOutputFromJSON(jsonValue));
    }

    /**
     * 권한 목록을 검색한다
     * 권한 목록 검색 (관리자, 장부사 전용)
     */
    async roleControllerGetRoles(requestParameters: RoleControllerGetRolesRequest): Promise<SearchRoleGroupOutput> {
        const response = await this.roleControllerGetRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * 권한을 등록한다
     * 권한 등록 (관리자 전용)
     */
    async roleControllerRegisterRoleRaw(requestParameters: RoleControllerRegisterRoleRequest): Promise<runtime.ApiResponse<RoleGroup>> {
        if (requestParameters.createRoleGroupInput === null || requestParameters.createRoleGroupInput === undefined) {
            throw new runtime.RequiredError('createRoleGroupInput','Required parameter requestParameters.createRoleGroupInput was null or undefined when calling roleControllerRegisterRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoleGroupInputToJSON(requestParameters.createRoleGroupInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleGroupFromJSON(jsonValue));
    }

    /**
     * 권한을 등록한다
     * 권한 등록 (관리자 전용)
     */
    async roleControllerRegisterRole(requestParameters: RoleControllerRegisterRoleRequest): Promise<RoleGroup> {
        const response = await this.roleControllerRegisterRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * 권한을 수정한다
     * 권한 수정 (관리자 전용)
     */
    async roleControllerUpdateRoleRaw(requestParameters: RoleControllerUpdateRoleRequest): Promise<runtime.ApiResponse<RoleGroup>> {
        if (requestParameters.roleGroupCode === null || requestParameters.roleGroupCode === undefined) {
            throw new runtime.RequiredError('roleGroupCode','Required parameter requestParameters.roleGroupCode was null or undefined when calling roleControllerUpdateRole.');
        }

        if (requestParameters.updateRoleGroupInput === null || requestParameters.updateRoleGroupInput === undefined) {
            throw new runtime.RequiredError('updateRoleGroupInput','Required parameter requestParameters.updateRoleGroupInput was null or undefined when calling roleControllerUpdateRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/role/{roleGroupCode}`.replace(`{${"roleGroupCode"}}`, encodeURIComponent(String(requestParameters.roleGroupCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoleGroupInputToJSON(requestParameters.updateRoleGroupInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleGroupFromJSON(jsonValue));
    }

    /**
     * 권한을 수정한다
     * 권한 수정 (관리자 전용)
     */
    async roleControllerUpdateRole(requestParameters: RoleControllerUpdateRoleRequest): Promise<RoleGroup> {
        const response = await this.roleControllerUpdateRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 버전 코드를 활성/비활성화 한다
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     */
    async scrapingCodeControllerActivateScrapingCodeRaw(requestParameters: ScrapingCodeControllerActivateScrapingCodeRequest): Promise<runtime.ApiResponse<ScrapingCode>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling scrapingCodeControllerActivateScrapingCode.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling scrapingCodeControllerActivateScrapingCode.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/scraping-code/{serviceId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScrapingCodeFromJSON(jsonValue));
    }

    /**
     * 특정 버전 코드를 활성/비활성화 한다
     * 코드 활성 여부 변경 (관리자 전용: 극히 일부사용자만)
     */
    async scrapingCodeControllerActivateScrapingCode(requestParameters: ScrapingCodeControllerActivateScrapingCodeRequest): Promise<ScrapingCode> {
        const response = await this.scrapingCodeControllerActivateScrapingCodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * 스크래핑 코드목록을 검색한다
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     */
    async scrapingCodeControllerGetScrapingCodesRaw(requestParameters: ScrapingCodeControllerGetScrapingCodesRequest): Promise<runtime.ApiResponse<GetScrapingCodesOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling scrapingCodeControllerGetScrapingCodes.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling scrapingCodeControllerGetScrapingCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.serviceId !== undefined) {
            queryParameters['serviceId'] = requestParameters.serviceId;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/scraping-code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetScrapingCodesOutputFromJSON(jsonValue));
    }

    /**
     * 스크래핑 코드목록을 검색한다
     * 스크래핑 코드 목록 검색 (관리자 전용: 극히 일부사용자만)
     */
    async scrapingCodeControllerGetScrapingCodes(requestParameters: ScrapingCodeControllerGetScrapingCodesRequest): Promise<GetScrapingCodesOutput> {
        const response = await this.scrapingCodeControllerGetScrapingCodesRaw(requestParameters);
        return await response.value();
    }

    /**
     * 스크래핑 코드버전을 등록한다
     * 스크래핑 코드 버전 등록 (Github Action >> Amazon SNS)
     */
    async scrapingCodeControllerRegisterScrapingCodeVersionRaw(requestParameters: ScrapingCodeControllerRegisterScrapingCodeVersionRequest): Promise<runtime.ApiResponse<ScrapingCode>> {
        if (requestParameters.registerScrapingCodeVersionInput === null || requestParameters.registerScrapingCodeVersionInput === undefined) {
            throw new runtime.RequiredError('registerScrapingCodeVersionInput','Required parameter requestParameters.registerScrapingCodeVersionInput was null or undefined when calling scrapingCodeControllerRegisterScrapingCodeVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/scraping-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterScrapingCodeVersionInputToJSON(requestParameters.registerScrapingCodeVersionInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScrapingCodeFromJSON(jsonValue));
    }

    /**
     * 스크래핑 코드버전을 등록한다
     * 스크래핑 코드 버전 등록 (Github Action >> Amazon SNS)
     */
    async scrapingCodeControllerRegisterScrapingCodeVersion(requestParameters: ScrapingCodeControllerRegisterScrapingCodeVersionRequest): Promise<ScrapingCode> {
        const response = await this.scrapingCodeControllerRegisterScrapingCodeVersionRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 서비스를 조회한다
     * 서비스 조회 (관리자전용)
     */
    async serviceControllerGetServiceRaw(requestParameters: ServiceControllerGetServiceRequest): Promise<runtime.ApiResponse<Service>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling serviceControllerGetService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/service/{serviceId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceFromJSON(jsonValue));
    }

    /**
     * 특정 서비스를 조회한다
     * 서비스 조회 (관리자전용)
     */
    async serviceControllerGetService(requestParameters: ServiceControllerGetServiceRequest): Promise<Service> {
        const response = await this.serviceControllerGetServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * 서비스 목록을 검색한다
     * 서비스 목록 검색
     */
    async serviceControllerGetServicesRaw(requestParameters: ServiceControllerGetServicesRequest): Promise<runtime.ApiResponse<GetServicesOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling serviceControllerGetServices.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling serviceControllerGetServices.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.jangbuId !== undefined) {
            queryParameters['jangbuId'] = requestParameters.jangbuId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/service`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServicesOutputFromJSON(jsonValue));
    }

    /**
     * 서비스 목록을 검색한다
     * 서비스 목록 검색
     */
    async serviceControllerGetServices(requestParameters: ServiceControllerGetServicesRequest): Promise<GetServicesOutput> {
        const response = await this.serviceControllerGetServicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * 서비스를 새로 등록한다
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     */
    async serviceControllerRegisterServiceRaw(requestParameters: ServiceControllerRegisterServiceRequest): Promise<runtime.ApiResponse<Service>> {
        if (requestParameters.registerServiceInput === null || requestParameters.registerServiceInput === undefined) {
            throw new runtime.RequiredError('registerServiceInput','Required parameter requestParameters.registerServiceInput was null or undefined when calling serviceControllerRegisterService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/service`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterServiceInputToJSON(requestParameters.registerServiceInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceFromJSON(jsonValue));
    }

    /**
     * 서비스를 새로 등록한다
     * 서비스 등록 (관리자전용: 일부사용자 or 정산관리자)
     */
    async serviceControllerRegisterService(requestParameters: ServiceControllerRegisterServiceRequest): Promise<Service> {
        const response = await this.serviceControllerRegisterServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * 서비스를 수정한다
     * 서비스 수정 (관리자전용: 일부사용자)
     */
    async serviceControllerUpdateServiceRaw(requestParameters: ServiceControllerUpdateServiceRequest): Promise<runtime.ApiResponse<Service>> {
        if (requestParameters.serviceId === null || requestParameters.serviceId === undefined) {
            throw new runtime.RequiredError('serviceId','Required parameter requestParameters.serviceId was null or undefined when calling serviceControllerUpdateService.');
        }

        if (requestParameters.updateServiceInput === null || requestParameters.updateServiceInput === undefined) {
            throw new runtime.RequiredError('updateServiceInput','Required parameter requestParameters.updateServiceInput was null or undefined when calling serviceControllerUpdateService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/service/{serviceId}`.replace(`{${"serviceId"}}`, encodeURIComponent(String(requestParameters.serviceId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateServiceInputToJSON(requestParameters.updateServiceInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceFromJSON(jsonValue));
    }

    /**
     * 서비스를 수정한다
     * 서비스 수정 (관리자전용: 일부사용자)
     */
    async serviceControllerUpdateService(requestParameters: ServiceControllerUpdateServiceRequest): Promise<Service> {
        const response = await this.serviceControllerUpdateServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 업무를 조회한다
     * 업무 조회
     */
    async workControllerGetWorkRaw(requestParameters: WorkControllerGetWorkRequest): Promise<runtime.ApiResponse<Work>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling workControllerGetWork.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling workControllerGetWork.');
        }

        if (requestParameters.workId === null || requestParameters.workId === undefined) {
            throw new runtime.RequiredError('workId','Required parameter requestParameters.workId was null or undefined when calling workControllerGetWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu/{jangbuId}/user/{userId}/work/{workId}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"workId"}}`, encodeURIComponent(String(requestParameters.workId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkFromJSON(jsonValue));
    }

    /**
     * 특정 업무를 조회한다
     * 업무 조회
     */
    async workControllerGetWork(requestParameters: WorkControllerGetWorkRequest): Promise<Work> {
        const response = await this.workControllerGetWorkRaw(requestParameters);
        return await response.value();
    }

    /**
     * (관리자전용) 특정 업무의 S3정보를 조회한다.
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     */
    async workControllerGetWorkS3DataRaw(requestParameters: WorkControllerGetWorkS3DataRequest): Promise<runtime.ApiResponse<GetWorkS3DataResponse>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling workControllerGetWorkS3Data.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/work/log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkS3DataResponseFromJSON(jsonValue));
    }

    /**
     * (관리자전용) 특정 업무의 S3정보를 조회한다.
     * (관리자전용) 특정 업무의 S3정보 조회 (업로드 정보 또는 스크래핑 정보)
     */
    async workControllerGetWorkS3Data(requestParameters: WorkControllerGetWorkS3DataRequest): Promise<GetWorkS3DataResponse> {
        const response = await this.workControllerGetWorkS3DataRaw(requestParameters);
        return await response.value();
    }

    /**
     * 특정 업무의 S3정보(업로드 로그)를 조회한다.
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     */
    async workControllerGetWorkS3DetailLogRaw(requestParameters: WorkControllerGetWorkS3DetailLogRequest): Promise<runtime.ApiResponse<GetWorkS3DetailLogResponse>> {
        if (requestParameters.workId === null || requestParameters.workId === undefined) {
            throw new runtime.RequiredError('workId','Required parameter requestParameters.workId was null or undefined when calling workControllerGetWorkS3DetailLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/work/log-detail/{workId}`.replace(`{${"workId"}}`, encodeURIComponent(String(requestParameters.workId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkS3DetailLogResponseFromJSON(jsonValue));
    }

    /**
     * 특정 업무의 S3정보(업로드 로그)를 조회한다.
     * 특정 업무의 S3정보의 조회 (업로드 로그)
     */
    async workControllerGetWorkS3DetailLog(requestParameters: WorkControllerGetWorkS3DetailLogRequest): Promise<GetWorkS3DetailLogResponse> {
        const response = await this.workControllerGetWorkS3DetailLogRaw(requestParameters);
        return await response.value();
    }

    /**
     * 업무목록을 검색한다
     * 업무 목록 검색 (관리자 전용)
     */
    async workControllerGetWorksRaw(requestParameters: WorkControllerGetWorksRequest): Promise<runtime.ApiResponse<GetWorksOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling workControllerGetWorks.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling workControllerGetWorks.');
        }

        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling workControllerGetWorks.');
        }

        if (requestParameters.endAt === null || requestParameters.endAt === undefined) {
            throw new runtime.RequiredError('endAt','Required parameter requestParameters.endAt was null or undefined when calling workControllerGetWorks.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.serviceId !== undefined) {
            queryParameters['serviceId'] = requestParameters.serviceId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.loginId !== undefined) {
            queryParameters['loginId'] = requestParameters.loginId;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        if (requestParameters.jangbuName !== undefined) {
            queryParameters['jangbuName'] = requestParameters.jangbuName;
        }

        if (requestParameters.memo !== undefined) {
            queryParameters['memo'] = requestParameters.memo;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.endAt !== undefined) {
            queryParameters['endAt'] = requestParameters.endAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/work`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorksOutputFromJSON(jsonValue));
    }

    /**
     * 업무목록을 검색한다
     * 업무 목록 검색 (관리자 전용)
     */
    async workControllerGetWorks(requestParameters: WorkControllerGetWorksRequest): Promise<GetWorksOutput> {
        const response = await this.workControllerGetWorksRaw(requestParameters);
        return await response.value();
    }

    /**
     * 장부사별 업무목록을 검색한다
     * 장부사별 업무 목록 검색 (장부사 전용)
     */
    async workControllerGetWorksByJangbuRaw(requestParameters: WorkControllerGetWorksByJangbuRequest): Promise<runtime.ApiResponse<GetWorksOutput>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling workControllerGetWorksByJangbu.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling workControllerGetWorksByJangbu.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling workControllerGetWorksByJangbu.');
        }

        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling workControllerGetWorksByJangbu.');
        }

        if (requestParameters.endAt === null || requestParameters.endAt === undefined) {
            throw new runtime.RequiredError('endAt','Required parameter requestParameters.endAt was null or undefined when calling workControllerGetWorksByJangbu.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.serviceId !== undefined) {
            queryParameters['serviceId'] = requestParameters.serviceId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.loginId !== undefined) {
            queryParameters['loginId'] = requestParameters.loginId;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        if (requestParameters.memo !== undefined) {
            queryParameters['memo'] = requestParameters.memo;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.endAt !== undefined) {
            queryParameters['endAt'] = requestParameters.endAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu/{jangbuId}/work`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorksOutputFromJSON(jsonValue));
    }

    /**
     * 장부사별 업무목록을 검색한다
     * 장부사별 업무 목록 검색 (장부사 전용)
     */
    async workControllerGetWorksByJangbu(requestParameters: WorkControllerGetWorksByJangbuRequest): Promise<GetWorksOutput> {
        const response = await this.workControllerGetWorksByJangbuRaw(requestParameters);
        return await response.value();
    }

    /**
     * 사용자별 업무목록을 검색한다
     * 사용자별 업무 목록 검색 (고객 전용)
     */
    async workControllerGetWorksByUserRaw(requestParameters: WorkControllerGetWorksByUserRequest): Promise<runtime.ApiResponse<GetWorksOutput>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling workControllerGetWorksByUser.');
        }

        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling workControllerGetWorksByUser.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling workControllerGetWorksByUser.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling workControllerGetWorksByUser.');
        }

        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling workControllerGetWorksByUser.');
        }

        if (requestParameters.endAt === null || requestParameters.endAt === undefined) {
            throw new runtime.RequiredError('endAt','Required parameter requestParameters.endAt was null or undefined when calling workControllerGetWorksByUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.memo !== undefined) {
            queryParameters['memo'] = requestParameters.memo;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.endAt !== undefined) {
            queryParameters['endAt'] = requestParameters.endAt;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu/{jangbuId}/user/{userId}/work`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorksOutputFromJSON(jsonValue));
    }

    /**
     * 사용자별 업무목록을 검색한다
     * 사용자별 업무 목록 검색 (고객 전용)
     */
    async workControllerGetWorksByUser(requestParameters: WorkControllerGetWorksByUserRequest): Promise<GetWorksOutput> {
        const response = await this.workControllerGetWorksByUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * (접수 또는 승인건만) 업무를 수정한다
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     */
    async workControllerUpdateWorkRaw(requestParameters: WorkControllerUpdateWorkRequest): Promise<runtime.ApiResponse<Work>> {
        if (requestParameters.jangbuId === null || requestParameters.jangbuId === undefined) {
            throw new runtime.RequiredError('jangbuId','Required parameter requestParameters.jangbuId was null or undefined when calling workControllerUpdateWork.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling workControllerUpdateWork.');
        }

        if (requestParameters.workId === null || requestParameters.workId === undefined) {
            throw new runtime.RequiredError('workId','Required parameter requestParameters.workId was null or undefined when calling workControllerUpdateWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/jangbu/{jangbuId}/user/{userId}/work/{workId}`.replace(`{${"jangbuId"}}`, encodeURIComponent(String(requestParameters.jangbuId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"workId"}}`, encodeURIComponent(String(requestParameters.workId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkFromJSON(jsonValue));
    }

    /**
     * (접수 또는 승인건만) 업무를 수정한다
     * (접수 또는 승인건만) 업무 수정 (관리자 전용: 취소처리)
     */
    async workControllerUpdateWork(requestParameters: WorkControllerUpdateWorkRequest): Promise<Work> {
        const response = await this.workControllerUpdateWorkRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum MemberControllerGetMembersActiveEnum {
    _0 = '0',
    _1 = '1'
}
/**
    * @export
    * @enum {string}
    */
export enum MemberControllerGetMembersUserLevelEnum {
    NUMBER_3 = 3,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
    * @export
    * @enum {string}
    */
export enum MobileAppControllerGetAppVersionsActiveEnum {
    T = 'T',
    F = 'F'
}
/**
    * @export
    * @enum {string}
    */
export enum MobileAppControllerGetUsingAppUsersActiveEnum {
    T = 'T',
    F = 'F'
}
/**
    * @export
    * @enum {string}
    */
export enum RoleControllerGetRolesUserLevelEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3
}
/**
    * @export
    * @enum {string}
    */
export enum RoleControllerGetRolesActiveEnum {
    _0 = '0',
    _1 = '1'
}
/**
    * @export
    * @enum {string}
    */
export enum ScrapingCodeControllerGetScrapingCodesActiveEnum {
    _0 = '0',
    _1 = '1'
}
/**
    * @export
    * @enum {string}
    */
export enum ServiceControllerGetServicesCategoryEnum {
     = '회계업로드',
     = '계좌통합',
     = '음식배달',
    Edi = 'EDI'
}
