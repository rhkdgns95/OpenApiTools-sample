/* tslint:disable */
/* eslint-disable */
/**
 * 뱅크다K 웹앱 REST API
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiLog,
    ApiLogFromJSON,
    ApiLogToJSON,
    ExceptionResponse,
    ExceptionResponseFromJSON,
    ExceptionResponseToJSON,
    GetApiMonitorsOutput,
    GetApiMonitorsOutputFromJSON,
    GetApiMonitorsOutputToJSON,
} from '../models';

export interface ApiMonitorControllerGetApiMonitorRequest {
    apiId: number;
}

export interface ApiMonitorControllerGetApiMonitorsRequest {
    page: number;
    limit: number;
    startAt: string;
    endAt: string;
    route?: string;
    jangbuId?: number;
    serviceName?: string;
    userSeq?: number;
    uid?: string;
    ip?: string;
    apiSeq?: number;
    rcode?: number;
    isFail?: boolean;
}

export interface ApiMonitorControllerGetApiS3DataRequest {
    path: string;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * 특정 API모니터링을 조회한다
     * API모니터링 조회 (관리자 전용)
     */
    async apiMonitorControllerGetApiMonitorRaw(requestParameters: ApiMonitorControllerGetApiMonitorRequest): Promise<runtime.ApiResponse<ApiLog>> {
        if (requestParameters.apiId === null || requestParameters.apiId === undefined) {
            throw new runtime.RequiredError('apiId','Required parameter requestParameters.apiId was null or undefined when calling apiMonitorControllerGetApiMonitor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/api-monitor/detail/{apiId}`.replace(`{${"apiId"}}`, encodeURIComponent(String(requestParameters.apiId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiLogFromJSON(jsonValue));
    }

    /**
     * 특정 API모니터링을 조회한다
     * API모니터링 조회 (관리자 전용)
     */
    async apiMonitorControllerGetApiMonitor(requestParameters: ApiMonitorControllerGetApiMonitorRequest): Promise<ApiLog> {
        const response = await this.apiMonitorControllerGetApiMonitorRaw(requestParameters);
        return await response.value();
    }

    /**
     * API모니터링 목록을 검색한다
     * API모니터링 목록 검색 (관리자 전용)
     */
    async apiMonitorControllerGetApiMonitorsRaw(requestParameters: ApiMonitorControllerGetApiMonitorsRequest): Promise<runtime.ApiResponse<GetApiMonitorsOutput>> {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling apiMonitorControllerGetApiMonitors.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling apiMonitorControllerGetApiMonitors.');
        }

        if (requestParameters.startAt === null || requestParameters.startAt === undefined) {
            throw new runtime.RequiredError('startAt','Required parameter requestParameters.startAt was null or undefined when calling apiMonitorControllerGetApiMonitors.');
        }

        if (requestParameters.endAt === null || requestParameters.endAt === undefined) {
            throw new runtime.RequiredError('endAt','Required parameter requestParameters.endAt was null or undefined when calling apiMonitorControllerGetApiMonitors.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.route !== undefined) {
            queryParameters['route'] = requestParameters.route;
        }

        if (requestParameters.startAt !== undefined) {
            queryParameters['startAt'] = requestParameters.startAt;
        }

        if (requestParameters.endAt !== undefined) {
            queryParameters['endAt'] = requestParameters.endAt;
        }

        if (requestParameters.jangbuId !== undefined) {
            queryParameters['jangbuId'] = requestParameters.jangbuId;
        }

        if (requestParameters.serviceName !== undefined) {
            queryParameters['serviceName'] = requestParameters.serviceName;
        }

        if (requestParameters.userSeq !== undefined) {
            queryParameters['userSeq'] = requestParameters.userSeq;
        }

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        if (requestParameters.ip !== undefined) {
            queryParameters['ip'] = requestParameters.ip;
        }

        if (requestParameters.apiSeq !== undefined) {
            queryParameters['apiSeq'] = requestParameters.apiSeq;
        }

        if (requestParameters.rcode !== undefined) {
            queryParameters['rcode'] = requestParameters.rcode;
        }

        if (requestParameters.isFail !== undefined) {
            queryParameters['isFail'] = requestParameters.isFail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/api-monitor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiMonitorsOutputFromJSON(jsonValue));
    }

    /**
     * API모니터링 목록을 검색한다
     * API모니터링 목록 검색 (관리자 전용)
     */
    async apiMonitorControllerGetApiMonitors(requestParameters: ApiMonitorControllerGetApiMonitorsRequest): Promise<GetApiMonitorsOutput> {
        const response = await this.apiMonitorControllerGetApiMonitorsRaw(requestParameters);
        return await response.value();
    }

    /**
     * API모니터링 S3 데이터를 조회한다
     * API모니터링 S3 데이터 조회 (관리자 전용)
     */
    async apiMonitorControllerGetApiS3DataRaw(requestParameters: ApiMonitorControllerGetApiS3DataRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling apiMonitorControllerGetApiS3Data.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/public/api/api-monitor/log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * API모니터링 S3 데이터를 조회한다
     * API모니터링 S3 데이터 조회 (관리자 전용)
     */
    async apiMonitorControllerGetApiS3Data(requestParameters: ApiMonitorControllerGetApiS3DataRequest): Promise<string> {
        const response = await this.apiMonitorControllerGetApiS3DataRaw(requestParameters);
        return await response.value();
    }

}
