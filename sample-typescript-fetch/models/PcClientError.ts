/* tslint:disable */
/* eslint-disable */
/**
 * 뱅크다K 웹앱 REST API
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Connect,
    ConnectFromJSON,
    ConnectFromJSONTyped,
    ConnectToJSON,
    PcClient,
    PcClientFromJSON,
    PcClientFromJSONTyped,
    PcClientToJSON,
} from './';

/**
 * 
 * @export
 * @interface PcClientError
 */
export interface PcClientError {
    /**
     * 에러 순번
     * @type {number}
     * @memberof PcClientError
     */
    id: number;
    /**
     * 어플리케이션 명
     * @type {string}
     * @memberof PcClientError
     */
    appName: string;
    /**
     * 어플리케이션 버전
     * @type {string}
     * @memberof PcClientError
     */
    appVersion: string;
    /**
     * IP 주소
     * @type {string}
     * @memberof PcClientError
     */
    ip: string;
    /**
     * 에러정보 S3 경로
     * @type {string}
     * @memberof PcClientError
     */
    errorPath: string;
    /**
     * 클라이언트 번호
     * @type {number}
     * @memberof PcClientError
     */
    clientId: number;
    /**
     * 접속정보 고유번호
     * @type {number}
     * @memberof PcClientError
     */
    connectId?: number | null;
    /**
     * 생성일
     * @type {Date}
     * @memberof PcClientError
     */
    createdAt: Date;
    /**
     * 접속정보
     * @type {Connect}
     * @memberof PcClientError
     */
    connect?: Connect | null;
    /**
     * pc클라이언트
     * @type {PcClient}
     * @memberof PcClientError
     */
    pcClient?: PcClient | null;
}

export function PcClientErrorFromJSON(json: any): PcClientError {
    return PcClientErrorFromJSONTyped(json, false);
}

export function PcClientErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): PcClientError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'appName': json['appName'],
        'appVersion': json['appVersion'],
        'ip': json['ip'],
        'errorPath': json['errorPath'],
        'clientId': json['clientId'],
        'connectId': !exists(json, 'connectId') ? undefined : json['connectId'],
        'createdAt': (new Date(json['createdAt'])),
        'connect': !exists(json, 'connect') ? undefined : ConnectFromJSON(json['connect']),
        'pcClient': !exists(json, 'pcClient') ? undefined : PcClientFromJSON(json['pcClient']),
    };
}

export function PcClientErrorToJSON(value?: PcClientError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'appName': value.appName,
        'appVersion': value.appVersion,
        'ip': value.ip,
        'errorPath': value.errorPath,
        'clientId': value.clientId,
        'connectId': value.connectId,
        'createdAt': (value.createdAt.toISOString()),
        'connect': ConnectToJSON(value.connect),
        'pcClient': PcClientToJSON(value.pcClient),
    };
}


