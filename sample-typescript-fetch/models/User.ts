/* tslint:disable */
/* eslint-disable */
/**
 * 뱅크다K 웹앱 REST API
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Jangbu,
    JangbuFromJSON,
    JangbuFromJSONTyped,
    JangbuToJSON,
    RoleGroup,
    RoleGroupFromJSON,
    RoleGroupFromJSONTyped,
    RoleGroupToJSON,
} from './';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 회원순번
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 장부사 순번 (관리자의 경우 없음)
     * @type {number}
     * @memberof User
     */
    jangbuId?: number | null;
    /**
     * 로그인아이디
     * @type {string}
     * @memberof User
     */
    loginId: string;
    /**
     * 회원명
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * 대표자명
     * @type {string}
     * @memberof User
     */
    ceoName?: string | null;
    /**
     * 이메일
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 핸드폰
     * @type {string}
     * @memberof User
     */
    phone: string;
    /**
     * 생성일시
     * @type {Date}
     * @memberof User
     */
    createdAt: Date;
    /**
     * 이용여부
     * @type {boolean}
     * @memberof User
     */
    active: boolean;
    /**
     * 회원레벨 (1:고객, 2:장부사, 3:관리자)
     * @type {number}
     * @memberof User
     */
    userLevel: number;
    /**
     * 장부사
     * @type {Jangbu}
     * @memberof User
     */
    jangbu?: Jangbu | null;
    /**
     * 권한그룹
     * @type {RoleGroup}
     * @memberof User
     */
    roleGroup?: RoleGroup | null;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'jangbuId': !exists(json, 'jangbuId') ? undefined : json['jangbuId'],
        'loginId': json['loginId'],
        'name': json['name'],
        'ceoName': !exists(json, 'ceoName') ? undefined : json['ceoName'],
        'email': json['email'],
        'phone': json['phone'],
        'createdAt': (new Date(json['createdAt'])),
        'active': json['active'],
        'userLevel': json['userLevel'],
        'jangbu': !exists(json, 'jangbu') ? undefined : JangbuFromJSON(json['jangbu']),
        'roleGroup': !exists(json, 'roleGroup') ? undefined : RoleGroupFromJSON(json['roleGroup']),
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'jangbuId': value.jangbuId,
        'loginId': value.loginId,
        'name': value.name,
        'ceoName': value.ceoName,
        'email': value.email,
        'phone': value.phone,
        'createdAt': (value.createdAt.toISOString()),
        'active': value.active,
        'userLevel': value.userLevel,
        'jangbu': JangbuToJSON(value.jangbu),
        'roleGroup': RoleGroupToJSON(value.roleGroup),
    };
}


