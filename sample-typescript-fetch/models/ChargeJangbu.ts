/* tslint:disable */
/* eslint-disable */
/**
 * 뱅크다K 웹앱 REST API
 * 뱅크다K 웹앱 REST API : 관리자, 장부사, 고객사
 *
 * The version of the OpenAPI document: 0.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChargeJangbuPaid,
    ChargeJangbuPaidFromJSON,
    ChargeJangbuPaidFromJSONTyped,
    ChargeJangbuPaidToJSON,
    ChargeJangbuPartnership,
    ChargeJangbuPartnershipFromJSON,
    ChargeJangbuPartnershipFromJSONTyped,
    ChargeJangbuPartnershipToJSON,
    ChargeJangbuStatus,
    ChargeJangbuStatusFromJSON,
    ChargeJangbuStatusFromJSONTyped,
    ChargeJangbuStatusToJSON,
    Jangbu,
    JangbuFromJSON,
    JangbuFromJSONTyped,
    JangbuToJSON,
} from './';

/**
 * 
 * @export
 * @interface ChargeJangbu
 */
export interface ChargeJangbu {
    /**
     * 장부사 순번
     * @type {number}
     * @memberof ChargeJangbu
     */
    jangbuId: number;
    /**
     * 해당연월
     * @type {number}
     * @memberof ChargeJangbu
     */
    yearMonth: number;
    /**
     * 정산합계금액
     * @type {number}
     * @memberof ChargeJangbu
     */
    totalPrice: number;
    /**
     * 할인된 금액
     * @type {number}
     * @memberof ChargeJangbu
     */
    discountPrice: number;
    /**
     * 최저이용금액
     * @type {number}
     * @memberof ChargeJangbu
     */
    minBillingPrice: number;
    /**
     * 청구금액
     * @type {number}
     * @memberof ChargeJangbu
     */
    billingPrice: number;
    /**
     * 부가세 포함금액
     * @type {number}
     * @memberof ChargeJangbu
     */
    vatPrice: number;
    /**
     * 
     * @type {ChargeJangbuStatus}
     * @memberof ChargeJangbu
     */
    status: ChargeJangbuStatus;
    /**
     * 
     * @type {ChargeJangbuPaid}
     * @memberof ChargeJangbu
     */
    paid: ChargeJangbuPaid;
    /**
     * 메모 (합계산정이유 등)
     * @type {string}
     * @memberof ChargeJangbu
     */
    memo?: string | null;
    /**
     * 정산관련메모 (미납사유 등)
     * @type {string}
     * @memberof ChargeJangbu
     */
    paidMemo?: string | null;
    /**
     * 계좌통합서비스
     * @type {ChargeJangbuPartnership}
     * @memberof ChargeJangbu
     */
    chargeJangbuPartnership?: ChargeJangbuPartnership | null;
    /**
     * 장부사
     * @type {Jangbu}
     * @memberof ChargeJangbu
     */
    jangbu?: Jangbu | null;
}

export function ChargeJangbuFromJSON(json: any): ChargeJangbu {
    return ChargeJangbuFromJSONTyped(json, false);
}

export function ChargeJangbuFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChargeJangbu {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'jangbuId': json['jangbuId'],
        'yearMonth': json['yearMonth'],
        'totalPrice': json['totalPrice'],
        'discountPrice': json['discountPrice'],
        'minBillingPrice': json['minBillingPrice'],
        'billingPrice': json['billingPrice'],
        'vatPrice': json['vatPrice'],
        'status': ChargeJangbuStatusFromJSON(json['status']),
        'paid': ChargeJangbuPaidFromJSON(json['paid']),
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'paidMemo': !exists(json, 'paidMemo') ? undefined : json['paidMemo'],
        'chargeJangbuPartnership': !exists(json, 'chargeJangbuPartnership') ? undefined : ChargeJangbuPartnershipFromJSON(json['chargeJangbuPartnership']),
        'jangbu': !exists(json, 'jangbu') ? undefined : JangbuFromJSON(json['jangbu']),
    };
}

export function ChargeJangbuToJSON(value?: ChargeJangbu | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'jangbuId': value.jangbuId,
        'yearMonth': value.yearMonth,
        'totalPrice': value.totalPrice,
        'discountPrice': value.discountPrice,
        'minBillingPrice': value.minBillingPrice,
        'billingPrice': value.billingPrice,
        'vatPrice': value.vatPrice,
        'status': ChargeJangbuStatusToJSON(value.status),
        'paid': ChargeJangbuPaidToJSON(value.paid),
        'memo': value.memo,
        'paidMemo': value.paidMemo,
        'chargeJangbuPartnership': ChargeJangbuPartnershipToJSON(value.chargeJangbuPartnership),
        'jangbu': JangbuToJSON(value.jangbu),
    };
}


